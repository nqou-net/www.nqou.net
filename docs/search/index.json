[{"content":"@nqounetです。\nコーヒーに目覚めたり、ビールに目覚めたり、ウイスキーに目覚めたり、というのは、人生の楽しみの一つです。\n私がウイスキーに目覚めた（再入門した）のは、2017年の10月ごろです。それまでは「ウイスキーのことをバーボンとも言うのか」と思っていたくらい、ウイスキーについては何も知りませんでした。\nウイスキーは水割りが当たり前で、ロックだと生意気、みたいに言われたりしていた（個人の感想です）のですが、今や、ストレートが当たり前で、ビールの代わりにハイボール、という感じです。\n飲む量と買う量のバランスがおかしくて、気がつくと、部屋がウイスキーだらけになってしまったのですが、そんなこんなで、AMRUT というウイスキーを知りました。\nAmrut Indian Single Malt Whisky - Amrut Distilleries AMRUT は、インドのウイスキーです。 ウイスキーは、気温の低い地域でゆっくりと熟成させるもの、というのが一般的なイメージですが、近年はインドや台湾など、気温の高い地域でもウイスキーが作られています。技術の勝利なんですかね？\nAMRUT は、一般的に想像するウイスキーとは随分とイメージが異なり、ハーブやスパイスの香りが強く、味も独特です。好みもあるとは思いますが、私は好きです。\nhttps://amzn.to/3z5V7jq\n","date":"2024-08-29T23:14:12+09:00","permalink":"https://www.nqou.net/2024/08/29/231412/","title":"AMRUT というウイスキー"},{"content":"おはようございます。 @nqounet です。\n2023年3月19日に開催された YAPC::Kyoto 2023 に、ボランティアスタッフとして参加してきました。\n応募に至った経緯 久しぶりのオフライン開催だったため、チケットの購入が必要であることを完全に失念しており、後になって気付いたところ、既に完売となっておりました。 困っていたところ、ボランティアスタッフが募集されていることに気がつきました。 そういうわけで、ボランティアスタッフに応募したところ、なんとか採用いただいた、というわけでした。\nYAPC::Kyoto 2023の当日スタッフを募集します！ - YAPC::Japan 運営ブログ 募集記事にも少しは書いていますが、実際の仕事（？）の内容を紹介したいと思います。 仕事（？）の内容としては、前日と当日でいくつか違いがあります。\n前日のお仕事 前日は、ノベルティの準備が主な内容です。 トートバッグに各種ノベルティを入れて、セットにする作業です。 以前は、Tシャツをたたむ、というのがなかなか大変だったように記憶していますが、今回は、畳まれている状態で袋に入っていたので、全体の作業量が減り、かなり早く終わりました。\n当日のお仕事 当日は、会場全体に配置されます。 私の担当は「Gyazoホール by Helpfeel」ということでしたが、集合から担当部屋の設営をし、その後、最初のトラックまでは受付のヘルプとして「Scrapboxホール by Helpfeel」で、来場者への声掛け（どこに並ぶのか、など）をしてました。\n部屋担当のボランティアスタッフとして私がやっていたのは、部屋の設営と撤収、トークの開始時と終了時のドアの開け閉め、質問者へマイクを持っていく、ランチセッションの前後にテーブルの除菌をする、などでした。 今回特に気をつける必要があったのは、感染予防対策として、質問者ごとにマイクの消毒やマイクカバーを取り換える、ということでした。 マスク解禁後とはいえ、気になりますよね。\n部屋担当の仕事としては、他にも、司会進行、タイムキーパーなどもありますが、それらは主にコアスタッフの担当になります。\nもちろん、部屋担当以外にも役目はあるのですが、今回は観測範囲外なので、他の方のブログを探してみるのも良いと思います。\nボランティアスタッフとしての感想 今回は、チケットを購入し忘れたため、代替案としてのボランティアスタッフ参加でしたが、普通に参加するよりも楽しく感じました。 コアスタッフは楽しむどころではなかったかもしれませんが、多少でも力になれたとすれば幸いです。 スタッフ用にSlackのワークスペースがあるのですが、熱量がすごいです。 現在進行形で「ふりかえり」を実施していますが、やり切ったからこそのKPT(Keep, Problem, Try)がたくさん出ています。 次回開催の YAPC::Hiroshima は、今回よりもさらに良いイベントになると確信しています。\nボランティアスタッフのすすめ ぶっちゃけたところ、とってもホワイトな現場です。（※個人の感想です） お給料は出ませんが、チケットは不要（チケット代が浮いた）で、お昼はお弁当が出ます。（お昼代が浮いた） さらに、今回は打ち上げとして、登壇者とスタッフ（ボランティア含む）でディナー会もありました。（飲み代が浮いた） また、スタッフであることがわかるように、スタッフ用のTシャツが配給されます。 さらに、今回はスタッフパーカーも配給されました。（洋服代が浮いた） さらにさらに、余ったノベルティは持って帰ることもできます。 私は一つで十分だったので遠慮しましたが。\nもしも、あなたが少しでも YAPC に興味はあるのであれば、試しにボランティアスタッフとして参加してみる、というのも選択肢に加えてみてください。\nちょっとだけ本編の感想 さて、今回はボランティアスタッフとして参加していたわけですが、メンバーと調整しておけば、見たいトークは遠慮なく見ることができます。 特に部屋担当は余力がある（※個人の感想です）ので、そこそこ自由が効くと思います。\n担当部屋以外のトークでは、昨今のデプロイ事情が気になったので、 デプロイ今昔物語 〜CGIからサーバーレスまで〜 を見に行きました。 CGIと聞くと懐かしさが込み上げてきます。 デモで使っているCGIスクリプトの文字コードがEUC-JPだったのが本格的（？）でした。\n「Gyazoホール by Helpfeel」の撤収がすぐに終わったので、ライトニングトークやキーノートも全編見ることができました。 キーノートは、ジーンと来ました。 「転機」というのは誰にでもあるのかもしれませんが、それからどうするのか、がとても重要なんだなと思います。 私の場合は、Kansai.pmの参加者（モブ）から、コミュニティを引っ張る役目（メインキャラ）を選んだことが大きな転機だったと思います。 そのおかげで、いろいろな方に顔を覚えていただいたり、YAPC::Kansaiが開催できたりしました。 スケールは違いますが、シンパシーを感じました。 会場で聞くことができて本当によかったです。\nまとめ 何度も書いてますが、今回はボランティアスタッフとして参加できて、本当によかったです。 チケットが売り切れになっていた時はどうしようかと思いましたが、ボランティアスタッフとして応募することにして良かったです。 YAPCは、技術カンファレンスという場ですが、Perlという言語を媒介にしたコミュニティでもあるんだろうなと思います。 本当に今回は参加できて良かったです。\n","date":"2023-03-21T13:26:30+09:00","permalink":"https://www.nqou.net/2023/03/21/132630/","title":"YAPC::Kyoto 2023に行けなかった私がボランティアスタッフになってみた"},{"content":"明けましておめでとうございます。 本年もよろしくお願い申し上げます。\nここ1、2年はあまりアウトプットできていませんが、今年は少しくらいはアウトプットしようと思います。\n","date":"2022-01-01T00:00:00+09:00","permalink":"https://www.nqou.net/2022/01/01/000000/","title":"明けましておめでとうございます"},{"content":"@nqounetです。\n（前文）\nもうかなり前ですが、初心者向けにMooを使ったオブジェクト指向プログラミングの記事を書こうとしていて、下書きが残ったままでした。\n今回、サイトジェネレータをHugoに変更しましたが、下書きになっていたものを順次解放していこうと思います。\n（本文）\nPerl鍋やなにわPerlでもそこそこ評判が良かったので、Mooを使ったオブジェクト指向なプログラミングについて書いてみます。\nなお、なるべくシンプルな記述にしたいので、厳密には正しくない事も書いています。\nMooについて深く知りたい方は、原典を見ることをオススメします。\nPerl鍋 なにわPerl Moo blessについて これまでにPerlのオブジェクト指向について学んだ方は、blessすればOK、みたいに覚えている方が多いと思います。\nしかし、改めてPerlでオブジェクト指向プログラミングを楽しむのであれば、blessについては忘れてしまいましょう。\n今は、もっと良い方法があります。\nMooを使ってみる まずは数行のプログラムを書いて動かしてみましょう。\nPerlの実行環境が無い場合は、Perl入学式の資料を見ながら環境構築をしてみましょう。\nhttps://github.com/perl-entrance-org/workshop-2015-01/blob/master/slide.md\nつまづいたらTwitterなどで「#Perl入学式」というハッシュタグを付けてつぶやいてみると、誰かが助けてくれるかもしれません。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package MyApp { use utf8; use Moo; has hoge =\u0026gt; (is =\u0026gt; \u0026#39;rw\u0026#39;); sub show { my $self = shift; print $self-\u0026gt;hoge; } }; my $app = MyApp-\u0026gt;new; $app-\u0026gt;hoge(\u0026#39;ほげ\u0026#39;); $app-\u0026gt;show; 上記のコードを「hoge.pl」として保存してから、ターミナルで以下のように入力し、書いたプログラム（コード）を実行してみましょう。\nコピペでも良いのですが、自分自身の手で書いてみるとより深く理解できると思います。\nまずはコピペで動くのが確認できたら、改めて書いてみて、実行してみてください。\n1 2 cpanm Moo perl hoge.pl 「ほげ」という風に表示されましたか？\nよくわからないかもしれませんが、これがオブジェクト指向の第一歩です。\nまずは用語を覚えましょう オブジェクト指向プログラミングでは、いくつかの専門的な用語を使います。\nまず「オブジェクト」というのは、「属性」と「機能」を持った「まとまり」の事です。\nそして、その「まとまり」は「クラス」で定義します。\n「属性」は、「プロパティ（property）」や「メンバ（member）」「アトリビュート（attribute）」などと呼ばれています。 私は「プロパティ」と呼んでいるので、今後はプロパティと書いていきます。\n「機能」は、「メソッド（method）」と呼ぶことが多いでしょう。\nこれらの用語は、何も考えずにそのまま覚えてしまうほうが良いです。日本語だと用語として覚えにくい場合は、カタカナで覚えてしまいましょう。使っていくうちに自然と理解できるようになります。\n次回は先ほど書いたコードの説明もしてみたいと思います。\nまとめ bless は忘れよう コピペではなく書いて動かしてみよう 用語（オブジェクト、クラス、プロパティ、メソッド）を覚えよう ","date":"2021-10-31T19:10:08+09:00","permalink":"https://www.nqou.net/2021/10/31/191008/","title":"第1回-Mooで覚えるオブジェクト指向プログラミング"},{"content":"おはようございます。 若林（@nqounet）です。\n少し時間ができたので、Hugoを使ってサイトを作ってみる（というか移行してみる）ことにしました。\n新しいことをやるのは久しぶりな気がします。\nとはいえ、ネタとしてはHexoで使っているマークダウンファイルがあるので、それを使います。\nメタ情報 記事には中身だけではなく、タイトルや作成日、タグなどの情報が必要です。\nマークダウンで書くにしても、こういった情報を書く必要があります。\nHexoでもファイルの最初にメタ情報を書くことができました。\nHugoではこの部分を「Front Matter」と呼ぶみたいです。\n行き着くところは大体同じなのか、ここはYAMLで書けるみたいで、プログラムとも相性が良いです。\n既に存在している情報はほぼそのまま使えるので便利です。\nHexoと大きく異なっていたのは、dateです。\nHugoでは、dateがISO8601で書けるようで、タイムゾーン情報も残しておけます。\n個人的にはこの点だけでも高評価です。最初からHugoにしておけばよかったかも。\n解釈しない項目は、無視されるだけで害がないのも良いですね。\nコンテンツ 記事は中身が大事です。\n記事を何度引っ越ししたか忘れましたが、その時々でフォーマットが少しずつ異なっています。\n前回は、WordPressからHexoにインポートしました。\nその直近の記事は良いのですが、後からよくみると過去にさかのぼれば全部がHTMLで書いてあったり一部がHTMLだったり、改行がなかったり、良く見てみると実は全然移行がうまく行っていませんでした。\nそして、今回、Hugoでは、HTMLで書かれている部分は、ほぼ無視されている感じでした。 特に2000年の記事は、中身がソースコードだけのような状態になっています。\n良く考えると、20年以上前に書いた記事をまだ置いておくか？という気もします。改めて読んでみると中々に赤面するような記事やコードですが。\n今回の移行でエラーになったのは、Shortcodeとして見做された部分でした。\nHexoの時もそうですが、記事に使える便利機能が、ソースコードを書くときには邪魔な感じです。\nとりあえず、思っていたよりは簡単に移行できました。\n途中で一部書き直したりしましたが、中途半端にやったことで後から手間が増えてきたことに気づいたので、一旦白紙に戻し、エラーの部分だけを直しました。\n見えない部分の修正はこれから、というところです。\nデプロイ 最近の機能なのかもしれませんが、Githubでホスティングするときは、リポジトリのgh-pagesブランチだけではなく、任意のブランチを指定することができるようです。\nさらに、ルートディレクトリではなく、docsディレクトリを指定することもできるようです。\nHugoは、通常はpublicディレクトリにファイルを生成しますが、生成先を変更することができるので、docsに指定しました。\nあとは、生成したファイルもリポジトリに追加して、pushすればそのまま公開できます。\nカスタムドメインの指定は、staticにCNAMEを作成すればよいだけでした。（元々カスタムドメインを指定していたためで、最初からやる場合はそれなりの手間はかかります）\n最後にfaviconを忘れていたことに気づいて、たまたまですが、選んだテーマがfavicon.pngに対応していたので、同じくstaticディレクトリにファイルをコピーしました。\nまとめ 実質的な作業量は半日くらいでしたが、その半分近くは記事の修正に失敗した時間なので、思っていたよりは簡単でした。\n特にデプロイ方法が、docsディレクトリに生成すれば良いだけになっていたのはとても便利です。\n公開するファイルも同じリポジトリで管理する、というところに今後どう感じるかわかりませんが、今の時点では、脳内で切り離されているので差分も気になりません。\n少なくともコミットは分けるべきでしょうね。\n参考になる資料 The world’s fastest framework for building websites | Hugo Front Matter | Hugo Shortcodes | Hugo WordPressの記事をHexoにインポートしようとしたが挫折した · nqou.net nqou-net/www.nqou.net: www.nqou.net ","date":"2021-10-30T21:29:34+09:00","permalink":"https://www.nqou.net/2021/10/30/212934/","title":"Hugoを使ってみることにした"},{"content":"これまでアップデートしてきた結果、時々、コマンドラインツールが無い、とか言われるようになったのですが、その生活ともオサラバです。\n新しいマシンでこれまでどおりのことをするのは、簡単になったとはいえ、それなりに面倒なものです。 それはそれで楽しみもあるので良いのですが。\nただ、困ったことに、このブログを作っているリポジトリをインストールすることが出来ない事がわかりました。 正確に言うと、このブログを書いているリポジトリで npm install がエラーで止まってしまうので、このサイトを編集したりすることができなくなる、ということがわかりました。\nNode も 14.16.1 で固定して使用していたのですが、それも新しいマシンには入らず。（インストール中に画面が止まって、しばらく待ちましたが進捗がないので諦めました）\n色々とありましたが、それなりに快適だったのでちょっと残念です。 何かしら移行手段を考えないとなぁ、という感じです。\n","date":"2021-10-29T09:28:26+09:00","permalink":"https://www.nqou.net/2021/10/29/092826/","title":"新しい MacBook Pro を買った"},{"content":"最近 Kotlin を勉強し始めた。 なかなか刺激になったので、久しぶりに何か書こうと思ったら、 2020-03-18 くらいに何かを書こうとしていたらしい。\n新型コロナの影響で出張もできなかったので、暇つぶし的に heroku を使っていたら何か思ったのでしょう。 なにかに使えるかもしれないのでそのまま残しておきます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 → mojo version CORE Perl (v5.30.2, darwin) Mojolicious (8.34, Supervillain) OPTIONAL Cpanel::JSON::XS 4.09+ (4.19) EV 4.0+ (4.32) IO::Socket::Socks 0.64+ (0.74) IO::Socket::SSL 2.009+ (2.067) Net::DNS::Native 0.15+ (0.22) Role::Tiny 2.000001+ (2.001004) Future::AsyncAwait 0.36+ (0.37) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 → docker version Client: Docker Engine - Community Version: 19.03.5 API version: 1.40 Go version: go1.12.12 Git commit: 633a0ea Built: Wed Nov 13 07:22:34 2019 OS/Arch: darwin/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.5 API version: 1.40 (minimum version 1.12) Go version: go1.12.12 Git commit: 633a0ea Built: Wed Nov 13 07:29:19 2019 OS/Arch: linux/amd64 Experimental: false containerd: Version: v1.2.10 GitCommit: b34a5c8af56e510852c35414db4c1f4fa6172339 runc: Version: 1.0.0-rc8+dev GitCommit: 3e425f80a8c931f88e6d94a8c831b9d5aa481657 docker-init: Version: 0.18.0 GitCommit: fec3683 1 2 → heroku version heroku/7.39.0 darwin-x64 node-v12.13.0 1 2 3 4 5 → heroku login heroku: Press any key to open up the browser to login or q to exit: Opening browser to https://cli-auth.heroku.com/auth/... Logging in... done Logged in as nobu@nishimiyahara.net 1 2 3 4 5 6 7 8 9 10 11 12 13 14 → heroku help container Use containers to build and deploy Heroku apps USAGE $ heroku container COMMANDS container:login log in to Heroku Container Registry container:logout log out from Heroku Container Registry container:pull pulls an image from an app\u0026#39;s process type container:push builds, then pushes Docker images to deploy your Heroku app container:release Releases previously pushed Docker images to your Heroku app container:rm remove the process type from your app container:run builds, then runs the docker image locally ","date":"2020-09-09T08:42:05+09:00","permalink":"https://www.nqou.net/2020/09/09/084205/","title":"何か書こうとしていた"},{"content":"過去の記事を整理していたら懐かしいものを見つけた。\n翻訳対決 - nqou.net Sign up for a free membership to MindMeister to manage and share your mind maps online and hold online real-time brainstorming sessions with friends and colleagues.\n最近は、 Google 翻訳しか使っていなかったので、同じものを翻訳してみました。\nGoogle 翻訳 MindMeisterの無料メンバーシップにサインアップして、オンラインでマインドマップを管理および共有し、友人や同僚とオンラインでリアルタイムのブレーンストーミングセッションを開催します。\nなんだか、カタカナの固有名詞が増えたような気がする。\n12年前は文字だけだったけど、今は音声でも翻訳がリアルタイムでできるようになっている。\n技術の進歩で言語の壁がなくなっていくのは良いですね。\n","date":"2020-03-09T01:54:41+09:00","permalink":"https://www.nqou.net/2020/03/09/015441/","title":"続・翻訳対決"},{"content":"事の起こり 実は半年ほど前に書こうと思っていたことなのですが。\nお名前.com で「メール転送サービス」が有料化になったんですよね。\n従来、ご利用料金を無料にてご提供させていただいておりました「お名前.com 転送Plus（メール転送設定/URL転送設定）」について、 サービス品質向上のため、新機能追加及び環境改善対応とともに有料化させていただくこととなりました。\nお名前.com Navi\n1ドメインごとに100円/月という設定も、利便性を考えれば安いとは思うのですが、ドメインをいくつも持っていると流石に堪えるなぁと。 しかも、ドメインあたりに精々1つか2つくらいの指定であればなおさらです。\nそこで、似たようなサービスがないだろうかとダメ元で検索してみたんですよ。 そしたら、やっぱりあったんですよ。\n無料メールサーバ Tagirl - 独自ドメインOK。アカウント数・ドメイン数無制限 -無料メールサーバ Tagirl | 独自ドメイン利用可能\n設定も簡単です。 詳しい使い方は about を見てください。\nTagirlとは | 無料メールサーバTagirl 独自ドメインでのメール受信だけならこれだけでもOKって感じです。\n送信もしたい場合は、 gmail 側で設定すれば良さそうです。\nHGoogleの無料SMTPサーバーを利用してメールを送信する方法について 私は、最近はそういうのが面倒になったので、送るときは gmail のまま送ってます。\n","date":"2020-03-05T01:25:16+09:00","permalink":"https://www.nqou.net/2020/03/05/012516/","title":"独自ドメインのメールを gmail に転送する方法"},{"content":"Date::Japanese::Era というとても便利な Perl のモジュールがあります。\n和暦をいい感じに扱うモジュールです。\nもちろん「令和」にも対応しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env perl use utf8; use strict; use warnings; use Data::Printer {deparse =\u0026gt; 1, caller_info =\u0026gt; 1}; use Date::Japanese::Era; { my $era = Date::Japanese::Era-\u0026gt;new(2019, 5, 1); p $era-\u0026gt;name; p $era-\u0026gt;year; } { my $era = Date::Japanese::Era-\u0026gt;new(2019, 4, 30); p $era-\u0026gt;name; p $era-\u0026gt;year; } { my $era = Date::Japanese::Era-\u0026gt;new(\u0026#34;令和\u0026#34;, 1); p $era-\u0026gt;gregorian_year; } このモジュールですが、「令和」への対応は 2019-03-31 に発表されています。\n…PDT（アメリカ太平洋夏時間）ですが。\nChanges - metacpan.org ","date":"2019-05-14T01:54:21+09:00","permalink":"https://www.nqou.net/2019/05/14/015421/","title":"Perl の「令和」への対応"},{"content":"キッカソンの時に話題になっていた、Perl入学式in東京のピザ会でのお題の過去問があったので解いてみました。\nPerl入学式 2018 in東京 秋開講 第1回 お疲れ様でした - sironekotoroの日記 ソースコードにある問題文だけを見て書いていたので、「ルーレットを3回まわし」の部分がすっかり抜けていました。 なので決着がつくまで回すとどうなるか、というような勝負になっています。\n勝率が6倍くらい、という話だったのでは、と思って気づいた感じです。 手元で試すと勝数も倍率も結構ばらつきがありました。\n決着がつくまでやるとせいぜい3倍くらい。 こっちは何度試してもだいたい同じくらいでした。\n（なお、「ルーレットを3回まわし」の勝負にする場合は、44行目の while (1) を for my $i (1 .. 3) に変更すれば動きます（試してみたので54行目に draw が書いてあります（消し忘れ））\nリファレンス不使用縛りがあると書ける気がしないのでそっちはやりません。\nただ、対戦人数を増やすのも割と簡単に対応できる柔軟性のあるコードになっていると思います。 「ルーレットを3回まわし」の場合は、人数を増やしても勝つ回数にはほとんど影響しない、というのも面白いですね。 ルーレットを回す回数を倍の6回にするとどうなるのか？ とかいろいろと数値を変えて試してみたくなりますね。\nこの問題も、最初は簡単そうに思ったのですがやってみると結構難しいですね。 同じ数字をどうやって消し込んでいくか、ちょっと考えてしまいました。\n","date":"2019-02-17T19:29:08+09:00","permalink":"https://www.nqou.net/2019/02/17/192908/","title":"「Perl入学式 2018 in東京 秋開講 第1回 ピザ会でのお題」を解いてみた"},{"content":"先週土曜日（もう一週間も経ってしまった。。。）から一泊二日で「Perl入学式の修学旅行」という別名を持つ「キッカソン」へ行ってきました。\nイベント自体は第3回ということですが、私は今回が初参加です。\n初菊香荘 #キッカソン pic.twitter.com/sw4OIUHdVI\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) February 9, 2019 じわじわ集まるのかと思っていたら、皆さん意外と到着していて驚きました（失礼）\nハッカソンは、広間でワイワイとやってました。 あっちこっちで色んな話が飛び交っているのをなんとなく聞いていると、時々興味ある話が出ていたりするのでちゃっかりメモしたりしました。\nhttps://t.co/lPpsyXOSxq\n軽くて良さそう。こういう情報が耳に入ってくるのがハッカソンの有意義なところですね #キッカソン\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) February 10, 2019 私はというと、数年前に Resque というモジュールを使って書いたジョブキューのサンプルプログラムがあったのですが、これを Docker を使った実装に変更するのをやってました。 数年前のプログラムでは、 Proclet と Test::RedisServer を使って動かしていたのですが、コンテナを使った実装に変更したいなと。\n本当のことを言うと、 Perl の自動テストで Test::Mysqld を使用しているのをコンテナを使ったテストに書き換えたい、と思っていたのです。 この話は、 YAPC::Tokyo で @onk さんがチラッと話していたと思うのですが、開発中は DB のコンテナを使うのに、自動テストの時はアプリのコンテナを使っているのが微妙だな、という話です。 それがなければアプリのコンテナサイズも少しは小さくなるのかなと（副産物的な話ですが）。\n実は memcached や Elasticsearch でも同じ問題があったのですが、この時はかなりのサイズダウンができたんですよね。 確か対策前はコンテナサイズが 2GB 近くあった気がします。 今は 1GB ちょっとになっています。\nキッカソンの唯一の問題だったのは、ネットワーク環境です。 元々 Wi-Fi はないという話だったので通信自体はテザリングで問題ないのですが、 Docker のイメージを扱うのは時間がかかりました。。。 かつ、ダウンロードが途中で止まってしまうことも多かったので、比較的軽量な redis:alpine のイメージを使ってできることをやっていた感じです。\n成果物はこちら。\nnqounet/try-p5-resque: use Resque; 新たに書く docker-compose の設定ファイルは version: \u0026quot;3\u0026quot; で書くようにしているのですが、起動するコンテナの数を指定をすると docker-compose では指定が無視されてしまう。\nhttps://docs.docker.com/compose/compose-file/#deploy https://docs.docker.com/engine/reference/commandline/stack_deploy/ 手軽さを求めて docker-compose を使っているのもあって、今のところはミスマッチ感があるな。。。ということで、起動時にコンテナの数をオプションとして指定するようにしました。\n1 $ docker-compose up --build --scale worker=4 なお、 nginx の設定も書いていますが、今回は無関係です。\n気がつけば晩ごはん。\nコードを書いた後は晩御飯タイム！ #キッカソン pic.twitter.com/2likAeANwy\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) February 9, 2019 広い場所で贅沢な晩ごはんでした。\nそれから夜遅くまで雑談からPerl入学式の運営から技術的な話まで、いろいろと話しました。 ここから寝るまでコードは一切書いていません。 ハッカソンというだけでなく、Perl入学式のサポーターが集まっている場でもあるので、今後の方針や地域ごとの問題などについても話し合い、より良い運営を目指して議論しました。\n私は残念ながら途中で退席しました。\n気がつけば朝ごはん。\n朝ご飯！ #キッカソン pic.twitter.com/TrJIZENATI\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) February 9, 2019 朝ごはんが終わったあと、部屋に戻って帰り支度というか、荷物を持って広間へ。 2日目開始です。\nこの時に @tomcha_ さんに Kansai.pm を託しました。 Kansai.pm はメーリングリストが主体のゆるいコミュニティでしたが、いざ中心になって活動しようとするといろいろとわからないことが多くて大変でした。 今後はそうならないように、と思っていろいろと画策していましたが、それでも引き継ぐ内容は多くてやっぱり大変でした。\n引き継いだその場で、早速 connpass のページを作ってました。\nhttps://t.co/zDISXiXX2wのコンパスページを作成しました。今後、イベントなどはこちらで募集しますのでメンバー登録などよろしくお願いします。 #Kansaipm #Perl #Perl入学式 https://t.co/YDOB2DYryh\n\u0026mdash; tomcha_ (@tomcha_) February 10, 2019 Kansai Perl Mongers - connpass 今後とも、 Kansai.pm をよろしくお願い申し上げます。 私も遠くから応援しています。\nさて、実は上着を部屋に忘れてました。 室内が暖かくてすっかり忘れていました。\n私は京都観光もそこそこに、頼まれていたお土産を買って帰路につきました。\n","date":"2019-02-16T17:21:05+09:00","permalink":"https://www.nqou.net/2019/02/16/172105/","title":"キッカソン #3 に参加してきました"},{"content":"2019年1月26日に開催された「YAPC::Tokyo 2019」で、「YAPC座談会」に YAPC::Kansai の実行委員長として呼ばれたので、舞い上がって行ってきました。\nYAPC座談会 は、これまでの YAPC::Japan を開催した4箇所の実行委員長が一堂に会してあれこれ語る形式で行われました。\n会場で簡単に打ち合わせしていた時に、技術系の話ではないのでそんなに来ないのでは、という話もあって安心していたのですが、フタを開けると意外と（失礼）多く来てくださっていたので、急に緊張し始めたのを覚えています。 特に最初の方は、自分の喋る番になると急に話したかったことがどこかに消えてしまって、自分でも何を言っているのか分からない状態になってました。 お恥ずかしい。\n座談会の様子を似顔絵付きでまとめてツイートしてくれた方がいましたので貼っておきます。 テーマのスライドはありましたが、話す内容についてはほぼその場の雰囲気でモデレータの馮さんに頼り切っている感じだったので、こういったメモは本当に嬉しいですね。\nYAPC::Japan座談会のメモです #yapcjapanRoom1 #yapcjapan pic.twitter.com/qWdNWVJ8ea\n\u0026mdash; 近藤佑子 (@kondoyuko) January 26, 2019 座談会が始まる前に、モデレータの馮さんが「40分はあっという間」という事を言っていたのですが、本当にそのとおりでした。 いろいろと用意したものは頭から消えてしまったものの、その場で思い出したりしたことを話していると気がついたら5分前でした。\n1つだけ印象に残っているのは、事前準備の時にタイムキーパー用のベルが用意されていたのを確認し、アナログだな〜といじることを予告していて、最後にそこをちゃんといじったところです。 （そしてそのタイミングで5分前のベルでした）\nYAPC::Kansai の時は部屋の番長をしていたのですが、その時は「座長の友」というアプリを使ってタイムキーパーがとても楽になっていたので、そういうアプリは絶対に使ったほうが良いと思います。\nzjs HTML5で学会タイマー - Ichiro Maruta Homepage YAPCは作れる 座談会の予習として、前夜祭から帰った後と当日の朝に、開催した後のアンケートを見返したりしていました。\nまた、改めてスタッフ用のマニュアルや資料などを見返していたのですが、本当によくできています。\nYAPC::Hokkaidoのつくりかた #yapcjapan - たまめも(tech) 上の記事の中で「持続可能なカンファレンス」という項があるのですが、 YAPC::Japan は持続可能なカンファレンスであると思います。\nスタッフ向けのマニュアルも良くできているし、何より JPA の方々のサポートが厚いです。\nYAPC::Japan を開催したいという熱い想い（と何人かの仲間）があれば（いれば）開催できると思います。\nKansai.pm と YAPC と私 本当は座談会でも話したかったことなのですが、 Kansai.pm はもともとゆるいコミュニティで、代表という立場の人は不在で、開催したい人がメーリングリストで声掛けをして開催するスタンスで動いていました。（とはいえ、よく動いているメンバー（中心人物）はいました）\n2011年に私がIT業界に転向してフリーランスになって、これから Kansai.pm にも参加していこう、と思っていた矢先に、これまで中心で活動していた方が東京へ行ってしまいました。 この時の Kansai.pm には日程が合わず参加できなかったのが本当に残念でした。\nで、その後、 JPA 経由でスピーカー派遣の話があり、その話を受ける人が居なかったので、私が代表というかリーダーとして活動していくことになりました。\n本当に何も知らないで勝手にリーダーになったので、いろいろなことをメーリングリストで訊いたりして活動していました。 その間に、 Kansai.pm のウェブサイトを github でホスティングするようにしたりしました。\nそして今、私が関西を飛び出して石川県に引っ越してしまったので、ちゃんと引き継ぎをしたいところです。\n持続可能なコミュニティ 一人の人間がコミュニティを継続するのはとても大変なので「持続可能なコミュニティ」を作ることも考えていきたいと思っていました。\n究極を言えば、誰にでも Kansai.pm のリーダーができるような仕組みを作る、ということです。\n必要な情報は然るべきところにまとめておくとか。公開できない情報ってそんなにないと思いますので、 github にリポジトリを作っておけば良さそうな気がします。 ウェブサイトは github でホスティングしておけば、おそらく誰かが更新できるでしょう。 サイトのジェネレータも Perl 製ですし、簡単ですが説明も書いてあります。 メーリングリストも、 google グループならば誰かが扱うことができると思います。\n…これに関しては実際にはうまくいってないかもしれません。\nKansai.pm の情報拠点は github にあります。 興味のある方は以下のリンクをポチッとな。\nkansai.pm まとめ まとまりませんが、 YAPC に参加するとこれまでの Perl のコミュニティ活動に紐付いた記憶がどんどん蘇ってきて熱くなってきます。 YAPC::Japan が持続可能なカンファレンスなら、 Kansai.pm は持続可能なコミュニティを目指して今後もサポートしていきたいと思います。\n","date":"2019-01-30T03:08:50+09:00","permalink":"https://www.nqou.net/2019/01/30/030850/","title":"「YAPC::Tokyo 2019」に呼ばれたので行ってきました"},{"content":"久しぶりに Heroku に push すると警告が出た。\n1 2 3 4 5 6 7 $ heroku container:push web === Building web (/Users/nobu/local/src/github.com/nqounet/heroku-enigmatic-castle-35725/Dockerfile) Sending build context to Docker daemon 53.76kB ...（中略） Your image has been successfully pushed. You can now release it with the \u0026#39;container:release\u0026#39; command. ▸ heroku container:push no longer creates a release. ▸ Run heroku container:release to create a release with this image. 今後は以下のようにするらしい。\n1 $ heroku container:release web 意味的に、「リリース」のほうがしっくり来る、という話なのかな。\nコンテナ周辺はまだ過渡期ってことだろうと思うので仕方ないですね。\n","date":"2018-06-12T11:52:34+09:00","permalink":"https://www.nqou.net/2018/06/12/115234/","title":"heroku の container:push が非推奨になっていた"},{"content":"Mac に入っている docker を stable から edge に変えたところ、以前は build できていたはずの Dockerfile が build に失敗するようになった。\n1 2 3 4 5 6 7 8 9 10 11 12 13 $ docker-compose build Building webapp Step 1/9 : FROM perl:latest ---\u0026gt; dbada67dc42d Step 2/9 : RUN useradd -m -s /bin/bash appuser \u0026amp;\u0026amp; cpanm Carmel --notest ---\u0026gt; Using cache ---\u0026gt; 6f9065cda747 Step 3/9 : USER appuser ---\u0026gt; Using cache ---\u0026gt; c68da1175f01 Step 4/9 : RUN mkdir -p ~/webapp ---\u0026gt; Running in ec4f449376a8 ERROR: Service \u0026#39;webapp\u0026#39; failed to build: OCI runtime create failed: container_linux.go:348: starting container process caused \u0026#34;chdir to cwd (\\\u0026#34;/root\\\u0026#34;) set in config.json failed: permission denied\u0026#34;: unknown たまたまタイミングがそうだっただけで、実際には正しくない書き方だったのかもしれないと思って、より堅実そうな書き方に変更した。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 FROM perl:latest RUN useradd -m -s /bin/bash appuser \\ \u0026amp;\u0026amp; cpanm Carmel --notest WORKDIR /home/appuser/webapp RUN chown appuser:appuser /home/appuser/webapp USER appuser COPY --chown=appuser:appuser webapp/cpanfile . RUN carmel install COPY --chown=appuser:appuser webapp . CMD carmel exec -- ./myapp.pl daemon -l http://0.0.0.0:$PORT 変更したのはディレクトリを作成する部分。 以前は appuser に切り替えてディレクトリを作成していたけど、そこがエラーになっていた。\nなので、ディレクトリを作ったあと chown で所有者を変更することにした。 結果として同じ状態にはなるので問題ないと思います。\n参考 DockerでHerokuでMojoliciousが動いたぞ!!!（改定版） | nqou.net ","date":"2018-06-12T11:02:04+09:00","permalink":"https://www.nqou.net/2018/06/12/110204/","title":"以前は動いていた Dockerfile で permission denied が出るようになった話"},{"content":"すごい話だと思うのですが、カスタムドメインでも https で公開することができるようになりました。\nCustom domains on GitHub Pages gain support for HTTPS | The GitHub Blog 強制的に https しか使用しないようにすることも可能なので、このサイトはそのようにしました。 以下のリンクから飛んでも https にリダイレクトされます。\nhttp://nqou.net 利点があるかどうかについては未知数です。\n","date":"2018-05-08T03:04:26+09:00","permalink":"https://www.nqou.net/2018/05/08/030426/","title":"github がカスタムドメインでも勝手に https に対応していた"},{"content":"Path::Tiny 祭り Path::Tiny を使い始めてから、以前 Path::Class を使って書いていたものを書き直したい衝動といつも戦っています。\ntouchpath というのを知った つい最近まで知らなかったのですが、ファイルを作る時にディレクトリがない場合に自動的に作成するメソッドがありました。 というか、これまでは当たり前のようにディレクトリを作成してからファイルを作成していたのですが。\n1 2 3 my $path = path(\u0026#39;var/foo/bar.txt\u0026#39;); $path-\u0026gt;parent-\u0026gt;mkpath; $path-\u0026gt;touch; 実は以下のようにできるのです。\n1 2 my $path = path(\u0026#39;var/foo/bar.txt\u0026#39;); $path-\u0026gt;touchpath; とっても便利。\nプログラムが作るファイルの置き場所 さて、プログラムが作るファイルはなるべく同じところに集めておきたいので、プロジェクトルートに var というディレクトリを作っておいてその中で各種ファイルを作成するようにしています。\n予め var というディレクトリを作っておいて、 .gitkeep などのファイルを作成してリポジトリに登録しておきます。 かつ、そのディレクトリの中は git では管理しないように .gitignore に除外ディレクトリとして追加しておくのが定番です。\n実際にプログラムを作成し始めて var/foo/bar.txt というようなファイルを作成しようとすると、 foo ディレクトリがない場合に例外になってしまいます。\nわかっていてもうっかりやってしまうので、 touchpath だとこういうときには便利ですね。\n","date":"2018-05-08T02:56:36+09:00","permalink":"https://www.nqou.net/2018/05/08/025636/","title":"Path::Tiny を使っている時にディレクトリを自動的に作る"},{"content":"新年 あけましておめでとうございます 2018 年もよろしくお願い申し上げます。\n今だからこそ振り返る 2017 年を振り返る間もなく 2018 年に突入してしまいました。\nしかし、 2018 年に同じことを繰り返さないように一つだけ振り返ろうと思います。\nこれは、 2016 年から 2017 年にかけてじわりじわりと痛手を負ってきたことです。\nGET した時、作成されていなかった場合に作成する、という悪手 前提として、稼働中のサービスだった場合、長時間サービスを止めるのはできるだけ避けたい。\nしかし、既存のデータを一度に変換すると、かなり時間がかかることがわかっています。\nということで、この時はサービスを動かしながら、アクセス（ HTTP でいう GET ）された時、データが変換されていなかったら変換して使用するようにしよう、と考えました。\nコードを書いて、テストも書いて、変換されている状態でも変換されていない状態でも、正しく動作することを確認しました。\n……\n結果はどうだったでしょうか。\n実際の動作では、変換したデータがいくつも出来てしまい、異常な状態になってしまいました。\n何がいけなかったのか 落ち着いて考えてみれば、排他制御が出来ていなかった、ということが言えると思います。\nデータの変換はデータの更新である、という意識が抜けていて、排他制御の必要性に気づいていませんでした。\nそれ以前に、 GET の操作に副作用（データを追加したり更新したりする）があってはいけない、という基本を疎かにしていました。\n2018 年は基本を疎かにせずにプログラミングに勤しみたいと思います。\nRESTful Web サービスの基本 ","date":"2018-01-03T11:30:12+09:00","permalink":"https://www.nqou.net/2018/01/03/113012/","title":"HTTP の GET の時に、 DB が更新されるのは悪手である"},{"content":"（追記）\nこの記事で書いていた Dockerfile が動かなくなっていたので動くように修正した記事を書きました。\n以前は動いていた Dockerfile で permission denied が出るようになった話 | nqou.net （追記ここまで）\nこの記事は、 Perl Advent Calendar 2017 の 13 日目の記事です。\n昨日は sago35 さんの 「Strawberry Perl に Minilla をインストールする」でした。\nこの記事のパッチがあたって、 CPAN からインストールできるようになったようです。\nこれで、 Windows + Strawberry Perl な方も安心して使えますね。\nMinilla - CPAN module authoring tool - metacpan.org ちょっとしたものを作り始める時でも Minilla で雛形を作ってから始めると色々と便利ですよね。\n最近はあまり使っていなかったので、この機会にまた使い始めようと思います。\nDocker で動いている Perl で作ったアプリを Heroku で公開する 実は少し前に「DockerでHerokuでMojoliciousが動いたぞ!!!」というのを書いてしまっていて、これを少し改善してアドベントカレンダーのネタにしようと思います。\nHeroku で Perl のプログラムを動かすには buildpack を使えばよいのですが、少しコツがいるのです。\nしかし、2年ほど前から Heroku でもコンテナを動かすことができるようになっており、最近ではインターフェイスも改善されていて、比較的簡単に公開できるようになっています。\nなので、コンテナを使って Perl のアプリを作って、それを Heroku で公開する、というのが今後しばらくは良さそうかなと思います。\nHeroku をコマンドラインインターフェイスで操作する さて、 heroku を使う時はコマンドラインツールを使うと便利です。\nMac な方は Homebrew を使って brew install heroku が手軽だと思います。\nWindows な方にも用意されているようなので使ってみてください。私は使ったことがないので使用感についてはわかりません。\nhttps://devcenter.heroku.com/articles/heroku-cli#windows 基本的な使い方はググれば色々と出てくると思いますので省略します。幾つか丁寧そうな記事を貼っておきます。\nHeroku初心者がHello, Herokuをしてみる - Qiita コマンドでHerokuを操作する Heroku CLI のインストール - ゼロからはじめるWEBプログラミング入門 事前の準備 一つのプロジェクトを作るところをイメージしながら進めていきます。\nソースコードは git で管理することにします。\nまずは、プロジェクトのディレクトリを作成しましょう。\nまた、 Heroku では現在は Volume をマウントする方式には対応していないので、 COPY コマンドを使います。細かい説明は省きますが、 COPY する必要があるファイルだけをまとめておくと便利だと思います。\nここでは、 COPY するファイル群を webapp というディレクトリに入れておくことにします。\nでは、ターミナルを操作していきます。\n1 2 3 $ mkdir myproject \u0026amp;\u0026amp; cd myproject $ git init $ mkdir webapp \u0026amp;\u0026amp; cd webapp ひとまずコレで準備は完了です。\nMojolicious さて、次は Perl のアプリを書いていきます。\n特にこだわりがなければ、 Mojolicious を使っていくと良いと思います。\n必要に応じて Perl や Mojolicious をインストールしておいてください。\n資料としてはPerl入学式の資料が秀逸です。 Mojolicious については第5回に掲載されています。\nhttps://github.com/perl-entrance-org/workshop-2017 Mojolicious のバージョンについては以下のもので動作を確認しています。\n1 2 3 4 5 6 7 8 9 10 11 $ mojo version CORE Perl (v5.26.1, darwin) Mojolicious (7.58, Doughnut) OPTIONAL EV 4.0+ (4.22) IO::Socket::Socks 0.64+ (0.74) IO::Socket::SSL 1.94+ (2.052) Net::DNS::Native 0.15+ (0.15) Role::Tiny 2.000001+ (2.000006) 説明を簡単にするためにここでは Mojolicious::Lite の方を使っていきます。\nコマンドを使って雛形を作っておきます。\n1 $ mojo generate lite_app myapp.pl とりあえず、これでアプリを書いたことにします。\n動作するか確認してみましょう。\n1 2 $ morbo myapp.pl Server available at http://127.0.0.1:3000 この状態でブラウザで http://127.0.0.1:3000 にアクセスして Welcome to the Mojolicious real-time web framework! という画面が表示されれば成功です。\nターミナルに戻って、 ctrl + c でアプリを止めておきます。\n手元では Mojolicious が入っているので動作しますが、コンテナには入っていません。\n動作に必要な Module は cpanfile に記述しておくことで、コンテナを作成する時に自動的にインストールされるような仕組みをあとで作成します。\nなので、 cpanfile という名前のファイルを作成し、必要なモジュールを書いておきます。\n今回は簡素化のためコマンドで作ります。\n1 $ echo \u0026#34;requires \u0026#39;Mojolicious\u0026#39;;\u0026#34; \u0026gt; cpanfile 一旦、プロジェクトのディレクトリに戻って現在の状態を確認します。\n1 2 3 4 5 6 $ cd .. $ tree . . └── webapp ├── cpanfile └── myapp.pl Docker 次は Docker で動かせるように Dockerfile を作っていきます。\nDocker のインストールなどは完了しているものとします。\n資料としては、公式の日本語サイトがあるのでそちらをご覧ください。\nGet Docker - Docker を手に入れる — Docker-docs-ja 17.06.Beta ドキュメント Docker のバージョンについては以下のもので動作を確認しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ docker version Client: Version: 17.09.1-ce API version: 1.32 Go version: go1.8.3 Git commit: 19e2cf6 Built: Thu Dec 7 22:22:25 2017 OS/Arch: darwin/amd64 Server: Version: 17.09.1-ce API version: 1.32 (minimum version 1.12) Go version: go1.8.3 Git commit: 19e2cf6 Built: Thu Dec 7 22:28:28 2017 OS/Arch: linux/amd64 Experimental: true 元になるイメージですが、特にこだわりがなければ公式の Perl のイメージを使うと良いと思います。\nタグを指定すると、特定のバージョンの Perl が使用できるのでバージョンを固定するのも簡単です。\nhttps://hub.docker.com/r/library/perl/tags/ ここでは、現在の最新の安定版である 5.26.1 のイメージを使用します。\nプロジェクトのルートディレクトリに、以下のような Dockerfile を作成します。\n基本的な方針としては、 Carmel を使用してモジュールのインストールを行い、 Mojolicious の機能でアプリサーバーを起動します。\nWORKDIR の前に RUN mkdir しているのは、 WORKDIR の場合、 root ユーザーで webapp ディレクトリが作成されてしまい、その後の RUN carmel install が失敗してしまうためです。なので、事前に appuser でディレクトリを作成し、そのディレクトリを作業ディレクトリに指定しています。\nなお、 root ユーザーで実行しないのはセキュリティの観点からです。やっておいて損はないと思います。\nDockerコンテナを本番環境で使うためのセキュリティ設定 - Qiita 最後の CMD は、 Heroku で動かすための設定です。この挙動は省略時に使用されるので、 docker run の時に実行するコマンドを指定すれば、この行は使用されません。\nとはいえ、毎回書くのはだるいので、 docker-compose を使用して手軽に起動できるようにしておくと便利だと思います。\n使用するコンテナが一つでも起動が簡単になるので、使えるものは使っていくのが良いと思います。\nでは、 docker-compose を使用するため、プロジェクトのルートディレクトリに docker-compose.yml を作成します。\n1 2 3 4 5 6 7 version: \u0026#34;3\u0026#34; services: webapp: build: . command: carmel exec -- morbo myapp.pl ports: - 3000:3000 動作するか確認してみましょう。\nプロジェクトのルートディレクトリにいることを確認して、以下のように実行してください。\nなお、実行すると 300MB 以上あるイメージファイルをダウンロードしてくるので、ちゃんとしたネットワーク環境で実行することをオススメします。\n1 $ docker-compose up --build しばらく待っていると以下のような表示が出て画面の動きが止まります。\n1 2 Attaching to myproject_webapp_1 webapp_1 | Server available at http://127.0.0.1:3000 Server available at http://127.0.0.1:3000 というのが目印です。\nこの表示が出たら、またブラウザで http://127.0.0.1:3000 にアクセスしてみてください。\n先ほどと同じような画面が出たら成功です。\nこれで、 Perl の（ Mojolicious::Lite で書いた）プログラムが Docker で動作しました。\n動作が確認できたら、ターミナルに戻って ctrl + c で Docker を終了しておきましょう。\nHeroku さて、お待たせしました。\nいよいよ、 Docker で動いている Perl のプログラムを Heroku で公開しましょう。\nまずは、コマンドラインツール（ Heroku Toolbelt と呼ばれています）でログインします。\nすでにログインしている方は不要です。\nEmail, Password, （設定している方は）Two-factor code を訊かれるので入力します。\n1 $ heroku login ログインできたら、次はアプリを登録します。\n新しく登録するのは簡単です。以下のようにコマンドを入力するだけです。\n1 $ heroku create 指定すればアプリの名称も決められますが、後でも変更できるので、まずは確実に作っておくほうが良いと思います。\nさて、コンテナを使用する場合、 Container Registry にログインする必要があるようですのでログインします。\n1 $ heroku container:login ログインが出来たら、いよいよデプロイです。\nデプロイということは、つまり、コンテナをアップロードするということなので、大きなファイルを送信することになります。くれぐれもネットワーク環境に注意してください。\n1 $ heroku container:push web デプロイが終わったら動作確認をしてみましょう。\nコマンドを使用して、アプリの URL をブラウザで開くことが出来ます。\n1 $ heroku open 先ほどと同じような画面が出たら成功です。\nPerl で作成したアプリを Heroku で公開することが出来ました。\nまとめ Perl でアプリを作って、 Docker で動かしたら Heroku で公開しましょう！\nDocker や Heroku はまだまだ進化しています。\n仕様がいつ変わるかわかりません。\n今のうちに是非お試しください。\n明日は 明日は @Morichan さんで「Bio::Perlを使いこなせずに挫折した話」のようです。\n明日もお楽しみに！\n","date":"2017-12-13T10:33:56+09:00","permalink":"https://www.nqou.net/2017/12/13/103356/","title":"DockerでHerokuでMojoliciousが動いたぞ!!!（改定版）"},{"content":"（追記: 2021/10/31 ）\nHexoの機能で、こういうのもあったなぁ、という感じです。\nHugo では include は何かしら工夫が必要みたいです。\n（追記ここまで）\n常に最新版の tools/rename_posts を表示しておけるように、 tools/rename_posts に対する symlink を張っておいた。\n1 {% include_code tools/rename_posts lang:perl rename_posts %} ","date":"2017-12-05T23:46:13+09:00","permalink":"https://www.nqou.net/2017/12/05/234613/","title":"include_code を試してみる"},{"content":"ソースコードの表示部分を markdown に置き換えたことで、別の問題が発生していた。\nインポートの時に {{ を {{ に変換していたのだけど、 ``` で書き直したところ、ソースコード部分の `` が見えるようになってしまった。\nなんとなく `` のほうが優先されると思ってさっきの記事も書いてみたんだけど、どうもそうでも無いようで、 ``` の中はしっかりとエスケープされるらしい。\nMustache とかのソースが（書くとすれば）面倒だなと思っていたけど、全然そうじゃなく、 ``` を書くほうが難しかった。\nMustache のソースがあるページ Zusaarのページを更新しました | nqou.net ","date":"2017-12-04T01:15:30+09:00","permalink":"https://www.nqou.net/2017/12/04/011530/","title":"template の処理順序"},{"content":"このブログは、何かとソースコードの埋め込みが多いのですが、これまで何度かシステムを引っ越したり、書き方を変えたりしてきたおかげで、色々な書き方が混在していた。\nこれまでは、手をいれるのも億劫だったんだけど、ようやく重い腰を上げることができた。\n手元にファイルがあるって素晴らしい。\n編集するのは何も Perl で処理するばかりではなく、エディタも活用すれば良い。\nhexo は基本的に github 風の markdown で書くことができる。\nソースコードを書く場合は、バッククォート3つ（```）でソースコードを囲めば良い。\n…しかし、それを markdown で表現するのが難しい、というジレンマよ。\nとりあえず、ソースコードについては markdown に置き換えが終わった。\n参考 https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code https://hexo.io/docs/tag-plugins.html#Backtick-Code-Block ","date":"2017-12-04T00:23:40+09:00","permalink":"https://www.nqou.net/2017/12/04/002340/","title":"ソースコード表示部分を markdown に置き換えた"},{"content":"hexoのように、手元に記事のファイルがあると便利だった。\nこれまで書いてきた記事にタグを付ける時に、本文に何かが含まれていたらタグに追加する、とかが Perl で簡単にできるようになった。\nこれまでは過去記事にタグを追加しよう、とか思ったこともないけど、こういうことをやろうと思えるようになったのは良いね。\n紆余曲折あって、変換スクリプトはこんな感じになっている。\n二重管理になるけど、今のところは大きく問題はない感じ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #!/usr/bin/env perl use utf8; use strict; use warnings; use Path::Tiny qw(path); use YAML (); use Time::Moment (); my $root = path(__FILE__)-\u0026gt;absolute-\u0026gt;parent(2); # 記事を取得 my $posts_dir = path($root, \u0026#39;source\u0026#39;, \u0026#39;_posts\u0026#39;); my $iterator = $posts_dir-\u0026gt;iterator(+{recurse =\u0026gt; 1}); # タイムゾーンを取得 my $tm = Time::Moment-\u0026gt;now; my $offset = $tm-\u0026gt;offset; my $jp_offset = 540; # 記事から時間を取得して、名称変更 while (my $post = $iterator-\u0026gt;()) { next unless $post-\u0026gt;is_file; my ($yaml, $after) = split /\\n---/, $post-\u0026gt;slurp_utf8; my $info = YAML::Load($yaml); my $modified; # ISO8601を持っていない場合はdateからISOを作成 unless (exists $info-\u0026gt;{iso8601}) { # 存在しなければ今書いたことにする if (!exists $info-\u0026gt;{date}) { $info-\u0026gt;{iso8601} = Time::Moment-\u0026gt;now-\u0026gt;to_string; } # すでに変換済みであればそのまま渡す elsif (-1 \u0026lt; index($info-\u0026gt;{date}, \u0026#39;T\u0026#39;)) { $info-\u0026gt;{iso8601} = $info-\u0026gt;{date}; } # date があれば iso8601 を作成 else { my $date = join(\u0026#39;T\u0026#39;, split(/\\s/, $info-\u0026gt;{date})) . \u0026#39;Z\u0026#39;; my $tm = Time::Moment-\u0026gt;from_string($date); my $new_date = $tm-\u0026gt;with_offset_same_local($offset); $info-\u0026gt;{iso8601} = $new_date-\u0026gt;to_string; } # date はURLのために日本時間へ統一 my $tm = Time::Moment-\u0026gt;from_string($info-\u0026gt;{iso8601}); my $url_date = $tm-\u0026gt;with_offset_same_instant($jp_offset); $info-\u0026gt;{date} = $url_date-\u0026gt;strftime(\u0026#39;%F %T\u0026#39;); $modified = 1; } # 本文に文字列が含まれていたらタグを追加 my $tag = \u0026#39;perl\u0026#39;; if ($after =~ /$tag\\b/i) { my $tags = $info-\u0026gt;{tags}; # undef が含まれていたら削除する $tags = +[grep { $_ ne \u0026#39;undef\u0026#39; and $_ ne $tag } @{$tags}]; push @{$tags}, $tag; $info-\u0026gt;{tags} = +[sort @{$tags}]; $modified = 1; } # 変更されていたら保存する if ($modified) { # 結合して出力 my $dump_yaml = YAML::Dump($info); my $body = join qq{\\n---}, $dump_yaml, $after; $post-\u0026gt;spew_utf8($body); } # 時間でファイル名を変更 my $tm = Time::Moment-\u0026gt;from_string($info-\u0026gt;{iso8601})-\u0026gt;with_offset_same_instant($jp_offset); my $path = $tm-\u0026gt;strftime(\u0026#39;%Y/%m/%d/%H%M%S\u0026#39;); my $new_post = path($posts_dir, qq{$path.md})-\u0026gt;absolute; $new_post-\u0026gt;parent-\u0026gt;mkpath; $post-\u0026gt;move($new_post-\u0026gt;stringify); } ","date":"2017-12-03T17:07:50+09:00","permalink":"https://www.nqou.net/2017/12/03/170750/","title":"hexoにして1時間くらいで感じたこと"},{"content":"TL;DR migration 時に気をつけること\nhexo-migrator-wordpress を修正し、 HTML を無理に markdown に変換しないようにする {{ は {{ に変換する お知らせ Wordpress で書いていた www.nishimiyahara.net から、すべての記事を引っ越しました。\nhexo も色々難点はあるけど、そこを理解して付き合っていけば何とかなりそうな気がしてきた。\nまあ、そう思えるのは、結果的に記事のインポートが（かなり躓いたけど）うまくいった（少なくとも構築できる状態になった）からだと思う。\n元凶は migrator だった 色々見ていくうちに、ソースコードとして書いている部分が妙な markdown になっていることに気づいた。 これは、と思って hexo-migrator-wordpress のソースコードを見ると、 HTML を markdown に変換しているところがあった。\n過去記事は無理に markdown にする必要はないので、変換部分を削除して実行してみた。 すると、これまでと違って hexo generate --debug のエラーがわかりやすいものに変わった。\nあとは、 {{ を {{ に変換するくらいで、エラーがなくなった。\n結構苦労したけど、結果的にやることがすごく少なくて拍子抜けと言うか。\n記号の扱いは、昔から困ることが当然なので、この程度で済んだのなら御の字というか。\nURL と時間の扱い そして問題は時間の扱いに戻った。\nこれまで色々と考えて時間を扱ってきたけど、移転に際してまた困ることになった。\nこの辺は諦めて、時差を含めた時間は別のメタ情報として保存するようにして、 date の値は、常に日本時間にすることで解決することにした。\n時差を含めた情報は個人的なこだわりではあるけど、記事をインポートしてみると、使っていないメタ情報がたくさんあることに気づいた。\nしかも、特に捨てられるわけではないので、それなら時差を含めた時間の情報を持っておいて、ファイルを変換する時に URL の元になる date を生成すれば良い。\nインポートする前に書いていた記事は URL が変わってしまうことになるけど、それはそれ。\nとりあえず色々とスッキリした。\n","date":"2017-12-03T15:48:42+09:00","permalink":"https://www.nqou.net/2017/12/03/154842/","title":"Wordpress から Hexo に乗り換えた（ついでにドメイン移転）"},{"content":"さっきの記事を書いて面倒だなと思ったので、ローカルの開発時は docker-compose を使えば楽かなと思ってやってみた。\n1 2 3 4 5 6 7 version: \u0026#34;3\u0026#34; services: webapp: build: . command: carton exec -- morbo myapp.pl ports: - 3000:3000 このファイルからみると、 myapp.pl の場所が違うので直感的ではないけれど、 COPY で .git までコピーされているのを見ると、アプリに必要なファイルだけをコピーするのが良いんじゃないか、と思った次第。\n1 2 3 4 5 6 $ docker-compose up Creating network \u0026#34;serenelake43934_default\u0026#34; with the default driver Creating serenelake43934_webapp_1 ... Creating serenelake43934_webapp_1 ... done Attaching to serenelake43934_webapp_1 webapp_1 | Server available at http://127.0.0.1:3000 感想 楽だった。\n多くのコンテナを使うようなものじゃなくても、 Dockerfile を上書きするように使えるのは便利。\ndocker build する度に、タグを入れるのは面倒だし、そうでなくても docker images で \u0026lt;none\u0026gt; がたくさん生成されるのを見ると色々と正しく指定しなければいけないのかなと思ってくる。\nまあ、一段落したら、全部止めて要らなさそうなやつは消しておくようにはしてます。\n1 2 $ docker ps -a -q | xargs docker stop $ docker image prune ","date":"2017-12-03T02:57:13+09:00","permalink":"https://www.nqou.net/2017/12/03/025713/","title":"ローカルでの開発は docker-compose を使うと楽だった"},{"content":"久しぶりに Heroku を使ってみたら、いつの間にかコンテナも使えるようになっていた。\nというくらいに全然 Heroku を使っていなかった。\n正確に言うと、 Heroku で動かしているアプリはあるけど、ずっと動かしたままだったので、ダッシュボードを見ることがなかった、という感じ。\n検索していると2年半くらい前の記事が多くて、時代に追いついてないのを感じる。\n今回頑張ったこと Dockerfile を書く時、これまでユーザーを意識していなかったので、今回は、 root 以外のユーザーで実行するようにした。\nUSER を指定すると、その後の COPY とかもユーザーで実行するのかと思ったら、そうでもなかったようだ。\n調べてみると、最近追加された機能で、ファイルのオーナーを変更できるようになったらしい。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 FROM perl:5.20.3-threaded RUN useradd -m -s /bin/bash appuser \\ \u0026amp;\u0026amp; cpanm Carton USER appuser RUN mkdir -p /home/appuser/webapp WORKDIR /home/appuser/webapp COPY --chown=appuser:appuser webapp/cpanfile /home/appuser/webapp RUN carton install COPY --chown=appuser:appuser webapp /home/appuser/webapp CMD carton exec -- /home/appuser/webapp/myapp.pl daemon -l http://0.0.0.0:$PORT 最後の CMD はとりあえず Mojolicious で動かしたいので適当に書きました。\nローカルでの開発はあまり意識していないのですが、やるとしたらこんな感じで起動するのかなと。\n1 2 docker build -t nqounet/serene-lake-43934 . docker run --rm -p 3000:3000 nqounet/serene-lake-43934 carton exec -- morbo myapp.pl …面倒くさそうですね。\nデプロイ方法 コンテナを使う時は、 Container Registry にログインする必要があるようです。\n1 2 3 4 5 6 7 8 # 必要なら作成 heroku create # Container Registry にログイン heroku container:login # デプロイ heroku container:push web 感想 buildpack を使う方法よりは真っ当な方法な気がします。\nというか、コンテナがそのまま公開できるって凄い。\n参考 nqounet/serene-lake-43934: Heroku Container Registry で動かす Container Registry \u0026amp; Runtime | Heroku Dev Center DockerでHerokuでPerlが動いたぞ!!! - hitode909の日記 第34回　DockerによるPerlのWebアプリケーション開発（1）：Perl Hackers Hub｜gihyo.jp … 技術評論社 Docker 17.09 からADD/COPY \u0026ndash;chownでファイルのオーナーを変更できるようになった - Qiita ","date":"2017-12-03T01:20:37+09:00","permalink":"https://www.nqou.net/2017/12/03/012037/","title":"DockerでHerokuでMojoliciousが動いたぞ!!!"},{"content":"結構前に書いた heroku で Mojolicious::Lite で作ったアプリを動かす記事が今でも使えるのか確認してみた。\nMojolicious::Liteで作ったアプリをHerokuで動かす | IT Office Nishimiyahara 経緯としては、先日の Perl 入学式の後の懇親会で、「自分の作ったアプリが公開できる、と思うとやる気が出る」みたいな話になったので、おさらいしてみるか、という感じです。\n結果として、動きませんでした。\nとは言え、ちょっとした注意点だけのことだったので、メモしておきます。\ncedar-14 と heroku-16 ひとことで言うと、デフォルトで使用される Stack が cedar-14 から heroku-16 に変わっていて、 buildpack が heroku-16 に対応していなかった、ということのようです。\nなので、 stack を指定してやればまだ使えます。\n改訂版はこちら。\n1 2 3 4 5 6 7 8 9 10 11 mkdir myapp \u0026amp;\u0026amp; cd myapp git init mojo generate lite_app myapp.pl heroku create --stack cedar-14 --buildpack https://github.com/pnu/heroku-buildpack-perl.git touch app.psgi echo \u0026#39;requires \u0026#34;Mojolicious\u0026#34;;\u0026#39; \u0026gt; cpanfile echo \u0026#39;web: starman --preload-app --port $PORT myapp.pl psgi\u0026#39; \u0026gt; Procfile git add . git commit -m \u0026#39;go to heroku\u0026#39; git push heroku master heroku open cedar-14 は 2019年4月までサポートされる、ということなので、まだしばらくは遊べますね。\n参考 Cedar-14 Stack | Heroku Dev Center Stacks | Heroku Dev Center ","date":"2017-12-02T17:03:42+09:00","permalink":"https://www.nqou.net/2017/12/02/170342/","title":"【2019年4月頃まで有効】Mojolicious::Liteで作ったアプリをHerokuで動かす"},{"content":"静的なコンテンツジェネレータ、というのかはわかりませんが、 hexo のようなプログラムをまとめたサイトが紹介されていたのでメモっておきます。\nTop Open-Source Static Site Generators - StaticGen Static Site Generators Github Pagesでブログ構築ができる静的サイトジェネレーター総まとめ - Qiita 英語では「Static Site Generators」というのが通称のようですね。\n静的サイトジェネレータ、ですか。\n","date":"2017-12-02T16:04:03+09:00","permalink":"https://www.nqou.net/2017/12/02/160403/","title":"Static Site Generators をまとめたサイトまとめ"},{"content":"Hexoの時間の扱いについてわかったこと 納得がいかなくて色々と調べてみたところ、とても不思議な現象が起きていることがわかった。\ndate の読み込みは正しいのだが、UTCの時間のまま _config.yml に書いてある timezone の時間として時差が付加される。\n具体的に Hexoの日付処理の挙動が意味不明 という記事は date の値として 2017-09-27T00:18:03-07:00 を指定しているが、出力時に日付を詳細に表示してみると 2017-09-27T07:18:03+09:00 となる。\n時間としては 2017-09-27T07:18:03+00:00 となるのが正しい。\nただ、何故かURLの日付は「26」を示していた。\nこれは、ファイルを生成する時に、26日として認識している、ということだ。\nつまり、表示に使用している時間を元にしてファイルを生成しているのだろう。\nHexo のソースコードを見ていると気になったコードがあった。\n1 2 3 4 5 6 7 8 9 10 exports.timezone = function(date, timezone) { if (moment.isMoment(date)) date = date.toDate(); var offset = date.getTimezoneOffset(); var ms = date.getTime(); var target = moment.tz.zone(timezone).offset(ms); var diff = (offset - target) * DURATION_MINUTE; return new Date(ms - diff); }; せっかくの momentjs のオブジェクトを JS の Date オブジェクトに変えている？ ここは普通に考えて momentjs の方へ処理をまとめるべきでは？\n中国はタイムゾーンが一つだった Hexo は中国発のソフトウェアということだ。\n中国はあれだけ広いので、複数のタイムゾーンがあるだろう、と勝手に思っていた。\nつまり、 Hexo はタイムゾーンについての考慮がされていると思っていた。\nこれはちゃんと調べてなかったのも悪かったけど、中国はあれだけ広いのにタイムゾーンが一つしかないようだ。\n色々と衝撃だ。\nタイムゾーンの処理を任せてみる 上記の timezone は、調べた範囲では、設定で指定している時だけに実行されている。\nそれならば、ということで、 timezone の指定をやめてみた。\nすると、これまでよりはマシになった。\nまず、パーマリンクが UTC の日付になった。ファイルとURLが一致するようになった。\nこれまで、23日なのに22日扱いになっていたりしたファイルなどが思っている日付になるようになった。\nしかし、表示に使う時間はやはりおかしい。\n具体的には 2017-09-27T00:18:03-07:00 という指定が 2017-09-27T07:18:03-07:00 のようになる。\nやはりこういう場合は、正しく 2017-09-27T07:18:03-00:00 として認識されて欲しい。\nただ、元々詳細な時間までは表示されていないし、URLの問題は解決したので、ひとまずはこれで良さそう。\n","date":"2017-10-06T18:25:20+09:00","permalink":"https://www.nqou.net/2017/10/06/182520/","title":"タイムゾーンの憂鬱"},{"content":"日付がおかしい 色々変更しているからかどうかはわかりませんが、最初の方の記事の日付が1日ズレてしまっている。\n本来は、日時的にUTCと考えても22日ではなく23日のはずなのに、何故かURLは22日として構築されている。\n理由はわかりませんが、今のところはリンク切れを回避するためにリンクを修正しました。\n日本に戻ったら、 date の部分をもとに戻して、改めて再構築しようかなと。\n挙動は以下のような感じなのですが、意味がよくわからないです。\nUTC にしても、23日なのに、22日になるファイルがある URLは22日なのに、HTMLファイルには23日と表示される どうなってんの？\n","date":"2017-09-27T16:18:03+09:00","permalink":"https://www.nqou.net/2017/09/27/161803/","title":"Hexoの日付処理の挙動が意味不明"},{"content":"試しにISO8601で書いてみたら動いた アメリカに来て、 hexo new post としてみたところ、やはり date はローカルタイムで作成されていた。\nふと思いついて、 date の部分を ISO8601 の形式で書いてみたところ、正常に読み込めた。\nHexoのソースコードを読んでみた どういうことかと思ってソースコードを読んでみたら、読み込む時は Moment.js を使って読み込んでいたようだ。\nということは、 hexo new post の時に ISO8601 の形式で出力しておけば万事解決。\n…のはずなんですが、どこを修正すればよいのかわかりませんでした。\n仕方なく、 Perl で書き直すことにしました。\nPerlでYAMLも再構築 date が ISO8601 の形式でなかった場合は、そのローカルタイムのタイムゾーンであるとみなして、 ISO8601 の形式で書き直す、というふうにしました。\nまた、そうした時に、どのタイムゾーンの日付をファイルの基準にするのか悩ましいのですが、 UTC の時間にすることにしました。\nなので、これまで書いてきた記事のファイルのパスも変更になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #!/usr/bin/env perl use utf8; use strict; use warnings; use Path::Tiny qw(path); use YAML (); use Time::Moment (); my $root = path(__FILE__)-\u0026gt;absolute-\u0026gt;parent(2); # 記事を取得 my $posts_dir = path($root, \u0026#39;source\u0026#39;, \u0026#39;_posts\u0026#39;); my $iterator = $posts_dir-\u0026gt;iterator(+{recurse =\u0026gt; 1}); # タイムゾーンを取得 my $tm = Time::Moment-\u0026gt;now; my $offset = $tm-\u0026gt;offset; # 記事から時間を取得して、名称変更 while (my $post = $iterator-\u0026gt;()) { next unless $post-\u0026gt;is_file; my ($yaml, $after) = split /\\n---/, $post-\u0026gt;slurp_utf8; my $info = YAML::Load($yaml); # 時間がISO8601でない場合は変換 if (-1 \u0026lt; index($info-\u0026gt;{date}, \u0026#39; \u0026#39;)) { my $date = join(\u0026#39;T\u0026#39;, split(/\\s/, $info-\u0026gt;{date})) . \u0026#39;Z\u0026#39;; my $tm = Time::Moment-\u0026gt;from_string($date); my $new_date = $tm-\u0026gt;with_offset_same_local($offset); $info-\u0026gt;{date} = $new_date-\u0026gt;to_string; # 結合して出力 my $dump_yaml = YAML::Dump($info); my $body = join qq{\\n---}, $dump_yaml, $after; $post-\u0026gt;spew_utf8($body); } # 時間でファイル名を変更 my $tm = Time::Moment-\u0026gt;from_string($info-\u0026gt;{date})-\u0026gt;at_utc; my $path = $tm-\u0026gt;strftime(\u0026#39;%Y/%m/%d/%H%M%S\u0026#39;); my $new_post = path($posts_dir, qq{$path.md})-\u0026gt;absolute; $new_post-\u0026gt;parent-\u0026gt;mkpath; $post-\u0026gt;move($new_post-\u0026gt;stringify); } ","date":"2017-09-26T13:33:37+09:00","permalink":"https://www.nqou.net/2017/09/26/133337/","title":"Moment.jsを使っていたので、ISO8601で書き直した"},{"content":"時間の形式 最初に書こうと思っていたネタにようやくたどり着いた。\nファイル名を変更する時に微妙に困ったのが時間の扱い。\nHexo では、 date の形式が MySQL と同じような形式になっている。\nこの表示の仕方は割と一般的だとは思うのだけど、この形式について何も感じたことはないのだろうか？\n表示形式について 時間の表示方法はいろいろな表し方があるようでいつも戸惑う。\n私の場合は yyyy-mm-dd HH:MM:SS のように、日付部分は小文字、時間部分は大文字で書く。\nしかし、 YYYY-mm-dd のように、4桁の西暦を大文字で書く人もいる。（2桁の年を yy と表現する）\nあるいは、 strftime のように、 %Y-%m-%d %H:%M:%S とか、場合によっては %F %T とか。\n時差について いずれにしても、このような表現の場合、時差というかタイムゾーンについての情報が完全に欠落する。\nHexo はローカル環境でビルドするので、ローカル環境のタイムゾーンに依存する。\nなので、この date をローカルのタイムゾーンを元にして UTC になおしてファイル名にすると、日本にいる時に実行して変更したファイルは、アメリカに行って実行すると全部書き換わってしまう。と思う。試してないけど。（ローカル環境のタイムゾーンを変えない、という選択肢もあるけど）\n今時、 momentjs もあるし、文字列にする場合は、少なくとも ISO8601 に沿ってくれればよいのに。と思いながら、日本時間ということにしてファイル名を変更するスクリプトを書いた。\nようやくこのネタを書けたので、ちょっとアメリカ行ってきます。\n","date":"2017-09-24T10:58:13+09:00","permalink":"https://www.nqou.net/2017/09/24/105813/","title":"時間を表現する時はタイムゾーンも含めよう"},{"content":"hexo new [layout] \u0026lt;title\u0026gt; テーマを色々と見ていて、ふと気がついた。 hexo new post とした時にタイトルが post になっていた理由に。\nnew の help を改めてみてみる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ hexo help new Usage: hexo new [layout] \u0026lt;title\u0026gt; Description: Create a new post. Arguments: layout Post layout. Use post, page, draft or whatever you want. title Post title. Wrap it with quotations to escape. Options: -p, --path Post path. Customize the path of the post. -r, --replace Replace the current post if existed. -s, --slug Post slug. Customize the URL of the post. あー、なるほど。\nlayout が省略可能扱いなので、 hexo new post とした場合、 post は layout ではなく title として入力されていた、という話だった。\nふと気がついた、わけではない 実際には、テーマの使い方の説明のところに hexo new \u0026lt;title\u0026gt; と書いてあったのを見て、もしかして、と思った。 で、調べてみたところ案の定、って感じ。\nコマンド体系 ところで、最近のコマンドはサブコマンド形式が多い。\n普段お世話になっている brew もそうだし、この hexo もそう。\nまた、サブコマンドを入力しなかった時に使い方がでる、というスタイルや、 コマンド help サブコマンド のようにしてサブコマンドのヘルプを呼び出す、というのもだいたい共通している。\nまた、上の方では hexo help new として結果を書いているが、 hexo new でも同じ内容のヘルプが出る。\nターミナル上で操作をしていると、新しいコマンドもとりあえず同じように使ってみる、ということがあると思う。\n取扱説明書を熟読してから家電を使う人はいない。\nコマンドもそうだと思う。\nヘルプを見なくても使えるコマンドは素晴らしいコマンドだ。\nplenv のような、 **env は沢山ある。\nanyenv を使うと、そのような **env が気軽に使えるようになる。\nしかし、時々コマンド体系が違うものがあって嫌な感じになる。\n例えば goenv に関しては、インストール可能なバージョンを確認しようとして goenv install -l とするとエラーになる。\nで、 goenv install ではどうかというと、以下のようになる。\n1 2 3 $ goenv install /Users/nobu/.anyenv/envs/goenv/libexec/goenv-install: line 18: [: =: unary operator expected Not found: ちなみに、 plenv ではどうかというと。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ plenv install Summary: Install a Perl version using the perl-build plugin Usage: plenv install [-v|--verbose] \u0026lt;version\u0026gt; plenv install [-v|--verbose] /path/to/definition plenv install -l|--list -l/--list List all available versions -v/--verbose Verbose mode: print compilation status to stdout --as=\u0026lt;NAME\u0026gt; Install the definition as \u0026lt;NAME\u0026gt; --test Run test cases --noman Skip installation of manpages -D, -A, -U, -j perl configure options via perl-build Example: plenv install 5.20.2 -j 8 -Dcc=gcc -UDEBUGGING -Accflags=... For more options that are passed through perl-build, run `perl-build --help` or see: https://metacpan.org/pod/distribution/Perl-Build/script/perl-build#OPTIONS なお、 goenv でインストール可能なバージョンの一覧は goenv install --list で見ることができるのだが、ヘルプにも書いていない…。\n1 2 3 4 $ goenv help install Usage: goenv install \u0026lt;version\u0026gt; Versions should be in the form of N.N.N とはいえ、実際のところ、golangの場合は実行形式で配布できるので、言語自体のバージョンを固定したり切り替えたりする意味もなさそうではある。\n","date":"2017-09-24T10:21:32+09:00","permalink":"https://www.nqou.net/2017/09/24/102132/","title":"省略可能な引数の配置について"},{"content":"ウェブサイトのテーマ Hexoのような、HTMLを生成するようなものを使う利点というと、テーマが豊富ということがあげられると思います。 ウェブデザインのセンスの欠片もない私にとってはとてもありがたいです。\nこの手のソフトの総称とは ところで、この手のソフトの総称ってどういうのが一般的なのでしょうか？\nローカルでビルドして、サーバー上には出来上がったHTMLファイルやJSファイルだけを置く事ができる、主に、 Github Pages で公開できます！という感じで謳っているヤツ。\nCMS ともちょっと違う。というか、マネジメントはできるので用語的には正しいともいえますが、何となく違う。\ncontents generator で検索すると、何故か sketch のプラグインが沢山表示されるので、 contents generator については、かなり特化した名称なのかなと思っています。\nMovable Type みたいなやつ、と言ってみる 仕組みとしては、昔からあります。\n更新を重視するか、閲覧を重視するかを選ぶ時に、閲覧に重きを置くと静的なファイルを生成し、普段は表示するだけ。\n例えば掲示板の場合、閲覧は多いが更新は少ないような掲示板だと、この仕組が活きてきます。\nなんとなくこういう感じで思い出すのが Movable Type です。 管理画面で記事を作成して、作成ボタンを押すと各ページが再構築されます。\nMovable Type について言えば、ページ数が増えてくると極端に再構築が遅くなる問題がありました。\nなので、更新が頻繁に行われるサイトには、あまり向いていない、といえます。\nテーマのカスタマイズがよくわからない 話が大きくそれていきそうなので戻します。\nHexo を使ってみようと思った時、この casual というテーマが気に入ったので使い始めました。\nしかし、カスタマイズの方法がよくわからず。\n結局、githubでforkして自分用に直接いじってカスタマイズしています。\nでも、これって正しいやり方なのでしょうか？\n例えば、 avatar とか favicon は、サイトごとに違います。\nなので、それが置き換えられるような仕組みになっていてほしい、と思っています。\n見たところ、ファイルを置いているだけのようなので、 avatar.png を source の中に置けば、生成時にトップのファイルとしてそれで良さそうな気がします。\n実際 hexo server ではうまくいったように見えたのですが、生成するとどうもうまくいってない様子。 もしかしたらその時の勘違い、あるいは、何らかの影響でうまくいかなかっただけかもしれない。\n少なくとも、 _config.yml は、本体側でテーマ向けの設定を書いても有効にはなっていない。 上書きするやり方はあるのかもしれないけど、少なくとも直感的ではない。\n仕組み的に、テーマでいろいろな拡張ができるはずですが、設定などは本体側で上書きできるように作るのが普通じゃないのか？\nそう思いながら、一旦テーマの方をカスタマイズしてしまうと、もう戻れない。\nテーマ選択の自由 この casual というテーマ。\nバージョンが v2.0.0 に上がった時に雰囲気が変わってしまったようです。 しかも、デモのページがドメインの期限切れのような雰囲気。\nもともと Smantic UI に興味があって、それを使っているテーマを探していた。\n公式のテーマを見ても、ハッシュタグに semantic-ui が書いてあるのは一つだけ。 しかし、そのサイトへ行くと別のテーマを使っていた…。\n実際のところ、あるテーマに偏った感じで記事を書くことはないと思う。 もしそうしてしまうと、テーマを気軽に変更できなくなってしまう。\nと、考えたのだが、そもそも、こういう考え方が稀なのかもしれない。\nだから、テーマを直接編集する、ということに対して違和感を感じないのだろうか？\n","date":"2017-09-24T04:47:25+09:00","permalink":"https://www.nqou.net/2017/09/24/044725/","title":"テーマを直接変更する時に感じる嫌な感じの正体"},{"content":"危うくハマるところだった 先程の記事を書いていて、ファイル名はどうせ変更するし、最初のファイルだけならフラットで良いのでは、と思ったので、さっそく new_post_name を :title.md に戻して hexo server を実行してみた。\nすると、なんということでしょう。\n/2017/09/24/2017/09/24/023018/ というURLになってしまったのです…。\nダメだったか、と思い、設定ファイルを前回の状態に戻して、改めて hexo server してみたのですが。\nなんと、もとに戻りません。\nもしかすると、うまくいっていたのが勘違いだったのでは？と思い、ウェブの方も確認してみました。 こっちは大丈夫でした。\n勘違いではなくちゃんとうまくいっていたようです。\nということは、落ち着いてクリーンな状態から再起動すれば良さそうです。\nそこで、 hexo clean してから hexo server してみたところ、ようやくもとに戻りました。\n困ったとき、というか、設定を変えたあとは hexo clean が良さそうです。\nプレースホルダーとは一体何なのか 1 permalink: :year/:month/:day/:title/ ここでいう :title というのは、一体何を示しているのでしょう？\nそもそもこれが :title になっているのが意味不明です。\n本質的な意味の「タイトル」ではないのは明らかです。 これまでの変更で、URLにタイトルが含まれないようになっています。\nsource/_posts からの相対パスから拡張子を除いたもの、というような定義？\nそういう意味では、 new_post_name の :title.md でいう :title と同じようにも見えますが…。\nともかく、 URL についてはこれで落ち着きそうです。\n個人事業のサイトもうまくいけば移行できる可能性が見えてきました。\n","date":"2017-09-24T03:22:46+09:00","permalink":"https://www.nqou.net/2017/09/24/032246/","title":"変数やプレースホルダーの名前は重要です"},{"content":"ディレクトリとファイル名 Hexo では、 source/_posts のディレクトリ内に、フラットにファイルが置かれる。 もちろん設定で変更できる。\nというわけで、変更してみる。\nこれは調べている時に見た方法で、どこで見たのかはわからなくなってしまった。 よくあることだけど。 改めて検索すると見つからないんだよね…。\n1 new_post_name: :year/:month/:day/:title.md new_post_name は、初期設定は :title.md だけなので、タイトルがそのままファイル名になる。\nなお、この設定は hexo new post \u0026lt;title\u0026gt; とした時に、 \u0026lt;title\u0026gt; に書いた文字列がそのままタイトルとされる。\nなので、記事を書こうと思ったらタイトルを書かなければならない。 …というのはあんまりじゃないかと思ってタイトル無しでコマンドを実行すると post が指定されたことになるようだ。\nファイル名は後で変更することにしているので、とりあえず post というタイトルで書き始め、あとでタイトルを設定する、というのが、なんとなく良さげな感じに思えてきた。\n大体、記事を書いているとタイトルと合わなくなってくるので、タイトルは最後に書きたい派です。\n話がそれた。\nで、元々、日本語のURLが嫌だったので、WordPressのURLはタイムスタンプで決まるようにしていた。\n1 2 # カスタム構造 /%year%/%monthnum%/%day%/%hour%%minute%%second% まあ、雰囲気で書くと /年/月/日/時分秒 みたいな。\nHexo ではファイルはフラットに置かれるが、URLは/年/月/日/ の配下になるため、URLを想定して 時分秒.md みたいにすると、ファイル名が衝突する可能性が結構高い。\nなので、ファイル自体もURLと同じように配置することで衝突を回避することができる。\nというわけで、リネームツールも一部変更した。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env perl use utf8; use strict; use warnings; use Path::Tiny qw(path); use YAML qw(Load); use Time::Moment; my $root = path(__FILE__)-\u0026gt;absolute-\u0026gt;parent(2); # 記事を取得 my $posts_dir = path($root, \u0026#39;source\u0026#39;, \u0026#39;_posts\u0026#39;); my $iterator = $posts_dir-\u0026gt;iterator(+{recurse =\u0026gt; 1}); # 記事から時間を取得して、名称変更 while (my $post = $iterator-\u0026gt;()) { next unless $post-\u0026gt;is_file; my ($yaml) = split /\\n---/, $post-\u0026gt;slurp_utf8; my $info = Load($yaml); my $date = join(\u0026#39;T\u0026#39;, split(/\\s/, $info-\u0026gt;{date})) . \u0026#39;+09\u0026#39;; my $tm = Time::Moment-\u0026gt;from_string($date); my $basename = $tm-\u0026gt;strftime(\u0026#39;%Y/%m/%d/%H%M%S\u0026#39;); my $new_post = path($posts_dir, qq{$basename.md})-\u0026gt;absolute; $new_post-\u0026gt;parent-\u0026gt;mkpath; $post-\u0026gt;move($new_post-\u0026gt;stringify); } ","date":"2017-09-24T02:30:18+09:00","permalink":"https://www.nqou.net/2017/09/24/023018/","title":"WordPressで使っていたURLに合わせよう"},{"content":"日本語とプログラミング Hexo は基本的にはタイトルの名前をファイル名にして保存し、そのファイル名をURLに割り当てている。 もちろん、設定で変更できる。\n先程の記事のタイトルの何がいけなかったのかはわからないけど、デプロイしたあと確認してみると、404エラーになっていた。 今は変更したので正常にリンクできる。\n「WordPressの記事をHexoにインポートしようとしたが挫折した」の何がいけないのだろう？\n元々、URLに日本語が入っているのは気持ち悪いので設定を変えたいと思っていたのだけど、設定を変更するとよくわからないエラーになるし、調べても今一つな感じでした。\n救いなのは、ファイル名を変更すれば、そのファイル名がURLになるので、ファイル名を変更するのが安全な方法というのがわかった。\nなので、 Perl を使ってポストの時間からファイル名を生成するようにした。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env perl use utf8; use strict; use warnings; use Path::Tiny qw(path); use YAML qw(Load); use Time::Moment; my $root = path(__FILE__)-\u0026gt;absolute-\u0026gt;parent(2); # 記事を取得 my @posts = path($root, \u0026#39;source\u0026#39;, \u0026#39;_posts\u0026#39;)-\u0026gt;children; # 記事から時間を取得して、名称変更 for my $post (@posts) { my ($yaml) = split /\\n---/, $post-\u0026gt;slurp_utf8; my $info = Load($yaml); my $date = join(\u0026#39;T\u0026#39;, split(/\\s/, $info-\u0026gt;{date})) . \u0026#39;+09\u0026#39;; my $tm = Time::Moment-\u0026gt;from_string($date); my $basename = $tm-\u0026gt;strftime(\u0026#39;%Y%m%d%H%M%S\u0026#39;); my $new_post = path($post-\u0026gt;parent, qq{$basename.md})-\u0026gt;absolute; $post-\u0026gt;move($new_post-\u0026gt;stringify); } デプロイの前に自動的に実行するようにしておいた。\nnpm でもコマンドが作れるみたいだけど、いつも使っているので daiku で。\n1 2 3 4 5 6 desc \u0026#39;deploy\u0026#39;; task deploy =\u0026gt; sub { sh qw{hexo clean}; sh qw{tools/rename_posts}; sh qw{hexo deploy}; }; こうすることで、記事を書いたあと、 daiku deploy すればサイトを更新できるようになった。\n","date":"2017-09-23T23:50:09+09:00","permalink":"https://www.nqou.net/2017/09/23/235009/","title":"マルチバイトの憂鬱"},{"content":"出発前夜 明日からアメリカへ行くのだけど、とりあえず着替えとかを詰めて、ひと休み。\n今日は夕方くらいまでは仕事をするつもりだったのに、サーバーの整理をし始めて、しかもうっかりウェブサイトを消してしまったりして。（とは言え、githubにソースは残っているのだが）\nいつもと少し違うことがあると、そわそわする。\n大体そういう時に余計なことをして変なことになる、気がする。\nWordPress の記事をインポート 記事が沢山あるとどうなるのか気になって、IT Office Nishimiyaharaの記事をインポートしようとした。\nインポートするときには以下の記事を参照した。\nMigration | Hexo コマンドレベルで言うとこんな感じ。\n1 2 npm install hexo-migrator-wordpress --save hexo migrate wordpress \u0026lt;source\u0026gt; インポートする場合、まずは WordPress の形式でエクスポートして、 migrate の時に、そのファイルを指定する。\nあっさり取り込むことができた。\nただ、取り込むまでは良かったけど、 hexo server で確認しようとすると、エラーになってしまった。\n色々と調べていると、記事の中にテンプレートエンジンで使用する記号を使っていると、それをエスケープしないといけないらしいことはわかった。\nただ、他にも原因があるのか、色々とやってみてもエラーが解消しないので諦めた。\nなので、適当に記事を量産することにする。\n一応フォローしておくと、コードを書かないような普通の人にとっては何も問題はなさそう。\nまあ、普通の人がこういうツールを使うかというと怪しいけど。\n","date":"2017-09-23T22:04:54+09:00","permalink":"https://www.nqou.net/2017/09/23/220454/","title":"WordPressの記事をHexoにインポートしようとしたが挫折した"},{"content":"さくらのVPSを結構な期間使っているのですが、そろそろサーバーを整理したいなと思って色々消していました。\nで、ウェブサイトのディレクトリがあったのですが、git remote -v で確認したところ、今はやめている gitlab を参照していたので消しました。\nするとどうでしょう。\nnqou.net のサイトが404エラーを出すようになりました。\ngithubにもリポジトリがあるのにおかしいなと思っていたのですが、まあ消してしまったものは仕方ありません。\n改めて github にあったものを使い始めたのですが、どうも中途半端になっていたようでした。\nとりあえず、この時は Hexo を使ってみようと思っていたようなので使っていきます。\nHexo ","date":"2017-09-23T14:53:37+09:00","permalink":"https://www.nqou.net/2017/09/23/145337/","title":"うっかり消してしまった"},{"content":"おはようございます。 若林（@nqounet）です。\nubuntuをCUIで起動する方法というのをかれこれ3年前に備忘録として書いたのですが、最近はこのやり方ではCUIで起動しないようです。\n…ということを、少し前に知って、最近の方法を調べていたはずですが、案の定忘れていて、しかも結構調べてしまったので書いておくことにします。\n最近の方法 /etc/default/grub の GRUB_CMDLINE_LINUX_DEFAULT の項目を変更します。\nroot で編集するのを忘れないようにしましょう。\n1 GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;systemd.unit=multi-user.target quiet nosplash\u0026#34; 保存したあと、 update-grub として変更を反映したら再起動。\n見慣れたログイン画面になったら成功です。\n参考になる資料 【Linux】UbuntuでCUIオンリーに切り替える - packpak’s diary 【ubuntu16.04LTS】CUIモード（テキストモード）で起動 - mikan\u0026rsquo;s technical note ","date":"2017-05-13T17:25:28+09:00","permalink":"https://www.nqou.net/2017/05/13/172528/","title":"CUIモードで起動するには何をどうすればよいのか"},{"content":"おはようございます。 若林（@nqounet）です。\n少し遅れましたが、この記事は、Perl 5 Advent Calendar 2016 - Qiita の25日目の記事ということにします。\nアドベントカレンダーは24日までのことが多いようですが、技術系のカレンダーだと25日までみたいですね。\n最初にお断りしておくと、この記事に技術的な話はありません。\n2016年のアドベントカレンダー さて、初日の記事を書いたときにも思ったのですが、いざ1日になってもアドベントカレンダーがないと落ち着きませんでした。\nPerl 5 Advent Calendar をまさか私が立ち上げる日が来るとは思ってもいませんでした。\nとは言っても今は簡単な仕組みが提供されているので始めるのは簡単です。 しかし、完走させるとなると大変だと思います。 おかげさまで、気がつけば多くの方が参加してくださり、この記事で無事（？）完走となります。\n私自身がすべての記事を書いたわけではありませんが、感慨深いものがあります。 来年は是非他の方に立ち上げていただきたいな、と思っています。 勢いもありましたが、貴重な経験をすることができました。\nYAPC::Kansai 2017 OSAKA このアドベントカレンダーの最中に YAPC::Hokkaido が開催されましたが、2017年は、3月に大阪で YAPC が開催されます。\n私自身もスタッフの一員として、これまでになかった YAPC を開催できるように色々と考えていきますので、是非ご期待ください。\nYAPC::Kansai 2017 OSAKA まとめ 改めて、Perlいいよね！\n","date":"2016-12-26T04:34:12+09:00","permalink":"https://www.nqou.net/2016/12/26/043412/","title":"改めて、Perlいいよね！"},{"content":"この記事は、 Perl入学式 Advent Calendar 2016 の9日目の記事です。\n昨日は ken5owata さんの Perl入学式に参加した結果www でした。\nPerl鍋を開催しました さて、奇しくも昨日は、正式名称「Perlで何か作る勉強会」、通称「Perl鍋」の第13回を開催しました。\n#Perl鍋 #13 - connpass この勉強会は、2013年の1月から毎月第3木曜日に開催していました。\n#Perl鍋 #1 - connpass まあ、第5回までは、ですが。\nこの頃は、新大阪コワーキングというコワーキングスペースを主宰していて、普段からそこで仕事をしていたので、安定して開催していました。\n5回まで開催したあたりで新大阪コワーキングを畳んだので、その後しばらく開催できていなかったのですが、現在の会場にもなっているナレッジサロンに場所を移して2015年の6月から再開しました。\nしかし、今年の2月に開催してからは、多忙なこともあり休んでいたのですが、昨日、今年2回目、通算13回目のPerl鍋を開催しました。\nなお、主催は「Perl鍋実行委員会」となっていますが、委員は私（@nqounet）だけです。\nPerl鍋が存在する理由 先程も書きましたが、Perl鍋は2013年の1月から開催されました。\n#Perl鍋 - connpass その前の年の2012年と言えば、Perl入学式の第一期が実施された年です。\n第一期のときは、全11回の講義を行いましたが、最後の講義の時、何かしらの勉強会を作りたいと考えていました。\nもう一つ、Perl入学式の次のステップになる勉強会を開催したいと思っています。\n折角覚えたのですから、使ってみたいですよね。\nPerlに入学したから満足、というだけでなく、Perlを使って色々と作ってみたりわからない所を訊いてみたりできる、そういう勉強会をやってみたいと考えています。\nPerl入学式を完走したとしても、自力で何かプログラムを書くというのは、かなり難しいことだと思います。\n例えば、Perl入学式の最後に1行掲示板を作りますが、そのプログラムを改造して新しい機能を追加したいとしましょう。\n…おそらく一人では余裕で挫折します。\n何かしようとしても、まず、どこから手を付ければ良いのか、どこを見れば何がわかるのか、そもそも、何を知れば良いのかもわからない状態だと思います。\n何故そう思うかというと、私が CGI のゲームを改造（新しい機能を追加する程度の事）をして楽しんでいた頃に、 Catalyst を学ぼうとして味わったことだからです。\n今から思えば、ゲームスタート直後にいきなりラスボスに挑むようなものだったのですが、当時の私にはそれを知るすべがなかったのでした。\n当時の私には、そういう時に質問する相手が居なかったのです。\n私と同じようにつまづいている人が気軽に参加できるような場所を作りたい。 そう思うのは、当時の私が切望していたからです。\n私が「Perl入学式」をサポートしてきたり、Kansai.pmの代表になったり、という感じに行動しているのは、単純にPerlが好きというだけでなく、自分自身が躓いた時に必要だった「都合の良い勉強会」を作りたい、と思ったからです。\n趣味でプログラミングをする方は、おそらくが独学だろうと思います。\n私はそういう気持ちでPerl鍋を開催しているので、独学で躓いていたり、周囲にプログラミングのことで気軽に質問できる人が居なくて困っている方は是非ご参加ください。\n#Perl鍋 - connpass 大阪近辺のPerlの勉強会 Kansai.pmのような集まりは、少し敷居が高く感じるだろうと思います。\n昔の私がそうでしたが、話される内容と、自分自身のレベルが違いすぎるのを感じてしまうので、こんなことを質問してもいいのだろうかと思うでしょう。\nもしかすると（というか、実際に言われたこともありますが）、Perl鍋も敷居が高い、と感じる方もいるかと思います。\nそんな時は、 @tomcha_ さんが主催している なにわPerl がより気軽に参加できると思います。\nなにわPerl - connpass @tomcha_ さんは、Perl入学式の第一期生で、純粋に趣味としてプログラミングを楽しんでいらっしゃいます。\nPerl入学式でPerlを学び始めた皆さんにとっては、最も近い先輩が開催している勉強会ですので、Perl鍋より参加しやすいと思いますよ。\nさいごに 明日、北海道で開催される YAPC::Hokkaido に続いて、来年の3月には関西でもYAPC::Kansai が開催されます。\nYAPC::Hokkaido 2016 SAPPORO YAPC::Kansai 2017 OSAKA まだまだ未定なことが多いですが、今から予定を空けておいてください。\n事前に知り合いを作っておきたい、という方にも、Perl鍋やなにわPerlはおすすめです。\n明日は Kei-Kamikawa さんで、「それでは沖縄からの中継です！」のようです。\nまた、アドベントカレンダーには、まだ空きがあるようですので、何か書いてみたい方は是非ご参加ください！\nPerl入学式 Advent Calendar 2016 - Qiita ","date":"2016-12-09T14:03:21+09:00","permalink":"https://www.nqou.net/2016/12/09/140321/","title":"#Perl鍋 第13回を開催しました"},{"content":"この記事は Perl 5 Advent Calendar 2016 の8日目の記事です。\n昨日は @wakegisky さんの Perl の基礎知識で実用プログラミング 〜旅情編〜 でした。\nデータを追加するだけで動作がどんどん良くなる、凄い仕組みのプログラムですね。 必要は発明の母です。\nさて、今日は関数のリファレンスを使った tips を書いてみたいと思います。\n遅延実行と仮実行（dry_run） シチュエーションは色々あると思いますが、実行結果を事前に確認したい、ということはよくあります。\nコマンドとかの場合は、「\u0026ndash;dry-run」のようなオプションがあって、そのオプションを付けると実際には何も変更しないけれども、実行した感じで結果が返ってくる。みたいな。\nでも、これって結構面倒だと思いませんか？\n最初からちゃんと考えて実装していれば問題ないですが、そうでもない場合は、実行しているところが色々分散していて、仮実行のときはここは変更しない、みたいなところを色々とif文などで避けなければいけない。\n実際に実行する箇所を一つにまとめられたら楽なんじゃないかなと思いませんか？\n関数のリファレンスで処理をまとめる そこで登場するのが関数のリファレンスです。\n実装のイメージとしてはこんな感じ。\n1 2 3 4 5 6 7 8 9 10 use strict; use warnings; use feature \u0026#39;say\u0026#39;; my @job; push @job, sub { say 1 }; push @job, sub { say 2 }; say \u0026#34;hoge\u0026#34;; unshift @job, sub { say 3 }; for (@job) { \u0026amp;{$_} } これを実行すると以下のようになります。\n1 2 3 4 hoge 3 1 2 基本的な仕組みとしては、関数のリファレンスを push したり unshift したりして、配列に貯めておき、実行するときは関数のリファレンスをデリファレンスする、という感じです。\nこうしておくと、実際の実行部分は、関数のデリファレンス部分にまとまります。\nこの仕組を利用すると、実際の書き込み処理は配列に貯めておいて、仮実行のときはこれを実行しない、というようにすることができます。\n1 2 3 unless ($dry_run) { for (@job) { \u0026amp;{$_} } } $dry_run が真の場合、以下のように出力されます。\n1 hoge ということで、処理が各所に点在していても、仮実行の対象にしたい処理はグローバルな変数などを一つ用意して、そこにジョブ（関数のリファレンス）を貯めておき、仮実行でない場合だけ実行するようにすることができます。\nこういった仕組みを使うと、例えば Teng の場合は、値をセット（set, set_columnsなど）だけして、実際の更新処理（update）は関数のリファレンスで貯めておき、dry_runのときはupdateの処理を捨てることで、限りなく本番に近い仮実行ができるようになります。\nCGIにも関数のリファレンスを 話は変わりますが、古き良きCGIは、スクリプトの最初にまずHTTPヘッダを出力したりしています。\nテンプレートを使っていない場合は、その次にHTMLのヘッダを出力したりしているのではないでしょうか。\nそうして順に処理していったところで何らかのエラーが発生した場合、突然エラーメッセージが出力されてHTMLがちぎれた状態になったりするんですよね。\nでも、そういうのを修正するのは面倒なので、なかなか手を付けられないのではないかとおもいます。\nそんな時に、先程の仕組みを使えば、あまり沢山のコードを書き換えなくてもよくなります。\nprint で出力しているところをグローバルな変数に関数のリファレンスとして貯めておき、エラーのときは、それまで貯めておいた処理を捨てて、エラーだけを出力する、なんてことができるようになりますよ。\n最後に 2017年3月4日（土）に YAPC::Japan と Kansai.pm がコラボした、「YAPC::Kansai 2017 OSAKA」を開催します。\nYAPC::Kansai 2017 OSAKA まだまだ未定なことが多いですが、今から予定を空けておいてください。\n明日は skaji さんで、「cpmについて書きます」のようです。\nまた、アドベントカレンダーには、まだ空きがありますので、何か書いてみたい方は是非ご参加ください！！\nPerl 5 Advent Calendar 2016 - Qiita ","date":"2016-12-08T20:21:41+09:00","permalink":"https://www.nqou.net/2016/12/08/202141/","title":"遅延実行と仮実行（dry_run）について考えてみた"},{"content":"おはようございます。 若林（@nqounet）です。\nこの記事は、Perl 5 Advent Calendar 2016 - Qiita の2日目の記事です。\n昨日も私が書きました。-\u0026gt; MacBook Pro (13-inch, Late 2016, Four Thunderbolt 3 Ports) の system perl のバージョンを調べた | IT Office Nishimiyahara\n何かネタがないかな〜、と物色していたら、以下の記事を見つけました。\n文字列操作比較16言語[JavaScript/TypeScript/CoffeeScript/C#/VB.net/VBS/D言語/R言語/Ruby/Python3/Lua/HSP3/CommonLisp/Scheme/EmacsLisp/Clojure] - Qiita Perl5がない！！！\nということでネタができました。ありがとうございます。\nPerlでの文字列操作 ズバッと回答のソースコードをば。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env perl use strict; use warnings; use feature \u0026#39;say\u0026#39;; use List::Util qw(reduce); sub str_test { # 文字列定義 my $str_text = \u0026#39;2$4$8$16\u0026#39;; say $str_text; # 文字列置換 $str_text =~ s/\\$/#/g; say $str_text; # 配列分割 my @str_list = split /#/, $str_text; say scalar @str_list; # 配列要素追加 push @str_list, \u0026#39;32\u0026#39;; say scalar @str_list; # 足し合わせ my $sum = reduce { $a + $b } @str_list; say $sum; # 配列結合 $str_text = join \u0026#39;++\u0026#39;, @str_list; say $str_text; # 文字列連結 $str_text = \u0026#39;Hoge-\u0026gt;\u0026#39; . $str_text; say $str_text; # 文字列切り取り左 $str_text = substr $str_text, 0, 10; say $str_text; # 文字列切り取り右 $str_text = substr $str_text, -6; say $str_text; } str_test(); コメント せっかくなので、一つ一つにコメントしていきましょう。\n文字列定義 なんだかいきなりですが、シングルクォートで括らないと定義（代入）すらできません。\n「$」はPerlではスカラ変数の頭につけるのですが、ダブルクォーテーションの中では変数が展開されるので、それを防ぐにはエスケープしないといけません。\nまあ、そういうのは面倒なので、シングルクォートでくくりましょう。つまり、シングルクォートの中では変数が展開されない、ということです。\n文字列置換 正規表現内では「$」はエスケープしないと動かないです。\n正規表現の中では「$」は行末にマッチする（厳密には色々違いますが）ので、文字扱いするにはエスケープする必要があります。\n置換を実行すると、変数の値が変わります。参考記事で言うところの「破壊」です。\n配列分割 「#」があるとエディタ（Atom）だとコメント扱いされますが、特にエスケープする必要はありません。\n参考記事では要素数を出していますが、Perlでは、配列の要素数を出すためには、配列の変数をスカラコンテキストで評価する必要があります。\nということで、表示するときは「scalar」を使います。つまり、表示する「say」はリストコンテキストで評価される、ということです。\nなお、「say」は、最後に改行を付けて出力してくれるので、簡単なスクリプトには便利です。\n「scalar」なしだとどうなるんだろう？と思ったあなた。センスありますよ。試してみてください。\n配列要素追加 一応、文字列リテラルで追加します。\n「push」を実行すると、変数の値が変わります。参考記事で言うところの「破壊」です。\n足し合わせ reduce は標準モジュールの List::Util に含まれているのでそれを使います。\nどうせモジュールを使うのなら「sum @str_list」でいいのですが、参考記事に合わせてみました。\n$a, $b は突然見ると気持ち悪い、と言われても仕方ないような気がします。なので、ますます「sum」使おうよ、って感じですね。\nなお、文字列-\u0026gt;数値の変換は不要です。Perlの場合は、値が文字列でも「+」演算子を使うと、数値として足し算ができるのです。\n配列結合 join でリストを任意の文字列で結合できます。\n文字列連結 文字列の連結は「.」（ドット）を使います。\n文字列切り取り左 文字列を切り取るには「substr」を使います。\n2つの引数の意味は、「場所」と「文字数」です。\n最初の引数に「0」を入れるのが、左を切り取るときのポイントです。\n文字列切り取り右 右を切り取るには、最初の引数に負の数を入れます。\n最初の引数に負の数を入れると「後ろから何番目の文字」となります。\n二つ目の引数を省略すると、最後までが対象になります。\n感想 ついカッとなって書いてみましたが、色々と思うところがありました。\nとりあえず関数名やファイル名はスネークケースで書いています。\nPerl5というとラクダのイメージですが、キャメルケースはあまり推奨されてないような気がします。わかりませんが。\nネイティブなオブジェクト指向言語ではないので、全体的に関数を使う感じになってしまいますね。 参考記事だと、 VBScript とか HSP くらいですかね…。\n正規表現、置換なども見た感じでは意味不明です。\nreduce は、個人的には使ったことないレベルです。 言い訳をすれば、List::Utilで sum などの関数は使えるので、あえて reduce を使うことはないような気がします。\nしかし、突然の$a,$bは気持ち悪いですね。 まあ、 sort でも出てくるんですけどね。\nよく見てみると、 reduce ではなく普通にループで足してるのもありました。 モジュールを使わずにループにするとこんな感じですね。\n1 2 3 4 5 my $sum = 0; for my $elm (@str_list) { $sum += $elm; } say $sum; まあ、言語仕様としてはこっちで書くほうが正解ですね。\nこうしてみると、オブジェクト指向プログラミングを学びたい人にとっては不向きな言語であることがよくわかりますね。\nまあ、それはそれ、ってことで。\nPerl 5 Advent Calendar 2016 明日は、sago35さんです。\nPerl 5 Advent Calendar 2016はまだまだ参加者を募集してまーす。\n","date":"2016-12-02T00:14:19+09:00","permalink":"https://www.nqou.net/2016/12/02/001419/","title":"Perl5で文字列操作"},{"content":"おはようございます。 若林（@nqounet）です。\nこの記事は、Perl 5 Advent Calendar 2016 - Qiita の1日目の記事です。\n誰も作らないな〜と思いながら、1日になっても作られていないので作った。後悔はしていない。\nまあ、初日から頑張りすぎて息切れしないように、完走を目指します。\nPerlのバージョンの調べ方 Perlのバージョンは「-v」で調べられます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 $ perl -v This is perl 5, version 18, subversion 2 (v5.18.2) built for darwin-thread-multi-2level (with 2 registered patches, see perl -V for more detail) Copyright 1987-2013, Larry Wall Perl may be copied only under the terms of either the Artistic License or the GNU General Public License, which may be found in the Perl 5 source kit. Complete documentation for Perl, including FAQ lists, should be found on this system using \u0026#34;man perl\u0026#34; or \u0026#34;perldoc perl\u0026#34;. If you have access to the Internet, point your browser at http://www.perl.org/, the Perl Home Page. 「v5.18.2」ですね。\nもう少し詳しく調べてみます。\n詳しく調べるには「-V」を使います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 $ perl -V Summary of my perl5 (revision 5 version 18 subversion 2) configuration: Platform: osname=darwin, osvers=16.0, archname=darwin-thread-multi-2level uname=\u0026#39;darwin osx202.apple.com 16.0 darwin kernel version 15.0.0: wed apr 6 00:55:38 pdt 2016; root:xnu-3247.1.106.2.8~1development_x86_64 x86_64 \u0026#39; config_args=\u0026#39;-ds -e -Dprefix=/usr -Dccflags=-g -pipe -Dldflags= -Dman3ext=3pm -Duseithreads -Duseshrplib -Dinc_version_list=none -Dcc=cc\u0026#39; hint=recommended, useposix=true, d_sigaction=define useithreads=define, usemultiplicity=define useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef use64bitint=define, use64bitall=define, uselongdouble=undef usemymalloc=n, bincompat5005=undef Compiler: cc=\u0026#39;cc\u0026#39;, ccflags =\u0026#39;-arch i386 -arch x86_64 -g -pipe -fno-common -DPERL_DARWIN -fno-strict-aliasing -fstack-protector\u0026#39;, optimize=\u0026#39;-Os\u0026#39;, cppflags=\u0026#39;-g -pipe -fno-common -DPERL_DARWIN -fno-strict-aliasing -fstack-protector\u0026#39; ccversion=\u0026#39;\u0026#39;, gccversion=\u0026#39;4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)\u0026#39;, gccosandvers=\u0026#39;\u0026#39; intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678 d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16 ivtype=\u0026#39;long\u0026#39;, ivsize=8, nvtype=\u0026#39;double\u0026#39;, nvsize=8, Off_t=\u0026#39;off_t\u0026#39;, lseeksize=8 alignbytes=8, prototype=define Linker and Libraries: ld=\u0026#39;cc -mmacosx-version-min=10.12\u0026#39;, ldflags =\u0026#39;-arch i386 -arch x86_64 -fstack-protector\u0026#39; libpth=/usr/lib /usr/local/lib libs= perllibs= libc=, so=dylib, useshrplib=true, libperl=libperl.dylib gnulibc_version=\u0026#39;\u0026#39; Dynamic Linking: dlsrc=dl_dlopen.xs, dlext=bundle, d_dlsymun=undef, ccdlflags=\u0026#39; \u0026#39; cccdlflags=\u0026#39; \u0026#39;, lddlflags=\u0026#39;-arch i386 -arch x86_64 -bundle -undefined dynamic_lookup -fstack-protector\u0026#39; Characteristics of this binary (from libperl): Compile-time options: HAS_TIMES MULTIPLICITY PERLIO_LAYERS PERL_DONT_CREATE_GVSV PERL_HASH_FUNC_ONE_AT_A_TIME_HARD PERL_IMPLICIT_CONTEXT PERL_MALLOC_WRAP PERL_PRESERVE_IVUV PERL_SAWAMPERSAND USE_64_BIT_ALL USE_64_BIT_INT USE_ITHREADS USE_LARGE_FILES USE_LOCALE USE_LOCALE_COLLATE USE_LOCALE_CTYPE USE_LOCALE_NUMERIC USE_PERLIO USE_PERL_ATOF USE_REENTRANT_API Locally applied patches: /Library/Perl/Updates/\u0026lt;version\u0026gt; comes before system perl directories installprivlib and installarchlib points to the Updates directory Built under darwin Compiled at Jul 30 2016 15:03:54 %ENV: PERL_CPANM_OPT=\u0026#34;--auto-cleanup=7 --notest\u0026#34; @INC: /Library/Perl/5.18/darwin-thread-multi-2level /Library/Perl/5.18 /Network/Library/Perl/5.18/darwin-thread-multi-2level /Network/Library/Perl/5.18 /Library/Perl/Updates/5.18.2 /System/Library/Perl/5.18/darwin-thread-multi-2level /System/Library/Perl/5.18 /System/Library/Perl/Extras/5.18/darwin-thread-multi-2level /System/Library/Perl/Extras/5.18 . 普段は plenv で入れた perl を使うのでお世話にはならないのですが。 オプションは誰が決めたんだろうなぁ、とか、チョットだけ妄想が膨らみますね。\nそれでは、完走に向けて頑張りましょう！ というか、誰か参加してください。\n","date":"2016-12-01T01:08:47+09:00","permalink":"https://www.nqou.net/2016/12/01/010847/","title":"MacBook Pro (13-inch, Late 2016, Four Thunderbolt 3 Ports) の system perl のバージョンを調べた"},{"content":"おはようございます。 若林（@nqounet）です。\nLion時代からお世話になっていたmarkdownエディタのMouが、macOS Sierraで使えなくなっていたので、代わりになるものを探してみた。\nMouの後継として、MacDownというソフトがあるらしいのでそれを使ってみることにした。\nMouについて プレビューを見ながら編集できるので、特にマークダウンを覚えたての頃はお世話になっていました。\n最近はそれほど使用頻度は多くなかったのですが、ちょっとしたメモを取るのに重宝していました。\nちょっとしたショートカットが便利なので、普段使っているエディタとは別にマークダウンを書くときだけはMouを使うことが多かったです。\nダウンロードしたあと実行しようとしたらこんな画面が出て涙目になりました。\nMacDownについて 後継を名乗るだけあって、なかなかのものです。\nMacDown: The open source Markdown editor for OS X. エンジニアを意識しているのか、Homebrew Caskでもインストールできるようです。私もこちらからインストールしました。\n1 $ brew cask install macdown アプリ自体は少し大きくなっていますが、操作感はあまり変わらないような気がします。\nまだ少ししか触っていませんが、普段使っていたショートカットもほぼ使えました。\nただ、画像とリンクについては、ショートカットが変わっていたのでアレ？って感じでしたが、あまり使わないので問題ないことにします。\n最近はプレビューがなくても大体イメージはできるのですが、書くときのちょっとしたショートカットはなかなかやめられません。\nしばらく使ってみようと思います。\n","date":"2016-11-20T21:07:19+09:00","permalink":"https://www.nqou.net/2016/11/20/210719/","title":"SierraでMouが使えなくなったのでMacDownを使うことにした"},{"content":"おはようございます。 若林（@nqounet）です。\nタッチバー付きのMacBook Proが届いたわけなんですが、ちょっと使ってて、やはりファンクションキーを押そうとしてしまうので、なんとかならないかなと思って環境設定と格闘していたらありました。\nアプリを指定する必要はあるようですが、指定したアプリを操作しているときはファンクションキーが表示されるようにできるようです。\n設定の場所は以下の通り。 システム環境設定 -\u0026gt; キーボード -\u0026gt; ショートカット -\u0026gt; ファンクションキー\nこの画面を表示して、下の + ボタンをクリックするとアプリを選択できるので、ファンクションキーを表示しておきたいアプリを入れれば、そのアプリではいつもファンクションキーが表示されるようになります。\nいつも、fnキーを押さないでファンクションキーが有効になるようにしていたのですが、今回はその設定がなかったので非常にがっくりしていました。\nしかし、なんとか別の方法ですが設定が残っていたので救われました。\n流石にキーボードはもう少し慣れが必要そうですが、ファンクションキーが表示されているだけでも良しとしましょう。\n","date":"2016-11-20T00:17:05+09:00","permalink":"https://www.nqou.net/2016/11/20/001705/","title":"あって良かったTouch Barにファンクションキーを表示させる方法"},{"content":"おはようございます。 若林（@nqounet）です。\n開発環境の更新は、新しい方法を発見した時にその場で変更してみて、気に入ったらそのまま使い続けたりしています。\nただ、本番環境はなかなかそういうわけにはいかないので、新しい方法を発見してもなかなか試せないですよね。\n今さっきも、思い出して検索してみたけど、相当検索してようやく発見できたので、もう忘れないように書いておくことにしました。\nサーバーのセットアップ、しかも本番用となると、なかなか機会がありません。\nPerlの利点として、ほとんどのサーバーに入っている、という事がありましたが、最近は事情が違うと思います。\nちょっとしたアプリを作る場合でも、本番環境と開発環境とは同じような状態にしたいので、plenv（perl-build）などを使ってアプリのためにPerlをビルドして使用するのが望ましいと思います。\n実際のところ、本番環境を構築する時は、開発環境と同じようにplenvを入れて、同じバージョンのPerlを作成して動作させる、ということをやっていました。\nしかし、世の中にはもっと便利なものが存在しているのでした。\ntagomoris/xbuild: Language runtimes installer for production environment 本番環境でいろいろな言語をインストールするためのソフトウェアです。\nbashのスクリプトなので「git clone」するだけで使用可能。お手軽ですね。\nなお、plenvを使用せずにperl-buildだけでビルドするのはわりと定番らしいのですが、私は最近まで知りませんでした。\n本番環境でのperl/ruby/nodeのセットアップ - たごもりすメモ ちなみに、この記事はブックマーク済みでしたが、この記事を探すつもりで「はてブ」を検索したんですが、出てこなかったんですよね。\nやはり、自分でメモするのが一番ってことで。\n","date":"2016-10-29T15:43:43+09:00","permalink":"https://www.nqou.net/2016/10/29/154343/","title":"本番環境にPerlを入れる便利な方法を忘れるので書いておく"},{"content":"おはようございます。 若林（@nqounet）です。\nmemcached を使って排他制御したい事ってありますよね？ ないですか？\n私は、つい最近そういうことがあったので KeyedMutex::Memcached を使ってみました。\nあらすじ 掲示板時代からそうですが、更新処理が複数同時に実行された場合、排他制御（ロック）をしていないとデータが壊れます。\nファイルのロックについていろいろ考えていた時期もありました。\nデータベースを使っている場合、排他制御はあまり意識しなくても壊れなかった（むしろロックされすぎてエラーになったり）のですが、ある時を境によく壊れるようになりました。\nセッション管理に memcached を使っていたので、それを使って排他制御ができないかな〜と CPAN を見ていたところ、使えそうなモジュールがありました。\nIPC::Lock::Memcached - memcached based locking - metacpan.org KeyedMutex::Memcached - An interprocess keyed mutex using memcached - metacpan.org その中で IPC::Lock::Memcached は少し古いのと、インストールの失敗数がそこそこあるので回避し、KeyedMutex::Memcached を使うことにしました。\nKeyedMutex::Memcached を使ってみる 使い方を見て、ほぼそのまま使えました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 use KeyedMutex::Memcached; my $key = \u0026#39;query:XXXXXX\u0026#39;; my $cache = Cache::Memcached::Fast-\u0026gt;new( ... ); my $mutex = KeyedMutex::Memcached-\u0026gt;new( cache =\u0026gt; $cache ); until ( my $value = $cache-\u0026gt;get($key) ) { { if ( my $lock = $mutex-\u0026gt;lock( $key, 1 ) ) { #locked read from DB $value = get_from_db($key); $cache-\u0026gt;set($key, $value); last; } }; } new するときに Cache::Memcached::Fast のインスタンスを渡せるので、既に利用しているインスタンスを再利用することができるのが良いですね。\nlock の第二引数は use_raii のフラグですが、これを使うと $lock がなくなった時にロックをはずしてくれます。 よくわからない場合は、黙って上のコードのように書くと良いと思います。 （use_raiiをしなかった場合は、if文の中で$mutex-\u0026gt;release としてロックをはずす必要があるので、上のコードのように書いておくのが間違いないでしょう。この機構は Scope::Guard を利用しているのですが、こういうのは便利だなと思いました）\n本来の使い方としては、上記のようにキャッシュをセットする時のロックとして使用するのが良いのでしょうが、重い処理を何度も動作しないように使ったりもできるようです。\nシステムへの組み込み方 今回は、更新するためのオブジェクトの中に、ロックを取得する機能をつけて、そこで使用しました。\nイメージは以下の様な感じです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package Entry; use Moo; has id =\u0026gt; (is =\u0026gt; \u0026#39;rw\u0026#39;, predicate =\u0026gt; 1); has mutex =\u0026gt; (is =\u0026gt; \u0026#39;lazy\u0026#39;); sub _build_mutex { my $cache = Cache::Memcached::Fast-\u0026gt;new( ... ); return KeyedMutex::Memcached-\u0026gt;new( cache =\u0026gt; $cache ); } sub create_mutex { my $self = shift; return 1 unless $self-\u0026gt;has_id; my $key = join \u0026#39;:\u0026#39;, \u0026#39;entry\u0026#39;, $self-\u0026gt;id; return $self-\u0026gt;mutex-\u0026gt;lock($key, 1); } ロックをかけたいところで if (my $mutex = $entry-\u0026gt;create_mutex) { ... } という感じで使えるかなと。\nIDがない場合はロック不要（insertするのでDBが適切に処理してくれる）とみなして何もせずに真を返しています。\nRAIIを使うと、明示的にロックをはずす必要がなくなるので、ロックの実体がなくてもロックを取得したものとして動作させることができます。\n仕組み ソースを見ると、 memcached の add が成功したかどうかでロックが取得できたかどうかを判定しています。\n排他制御を確実に行うには、「ロック操作ができるかどうかの判定」と「ロック操作」が同時にできる必要があります。add はそれが可能なのです。\nファイルシステムを使ったロックの場合、mkdirやrenameを使うと思いますが、それにはちゃんとした理由があるのでした。\n実は車輪の再発明しかけた 実は、CPANで探す前に簡単に書いてみたのです。\nとりあえず排他制御として使えそうな物（ただしキーの指定ができない）ができたのですが、そこまで書いた時点で「さすがに誰か書いてるんじゃないか」と思って調べたら、わりとすぐに見つかったと。\nまとめ CPAN は偉大です。 最初から探しておけばよかった。\n参考になる資料 KeyedMutex::Memcached - An interprocess keyed mutex using memcached - metacpan.org KeyedMutex::Memcached ってモジュールをリリースして何も言ってなかった件 - Yet Another Hackadelic Scope::Guard - lexically-scoped resource management - metacpan.org ","date":"2016-08-03T08:09:32+09:00","permalink":"https://www.nqou.net/2016/08/03/080932/","title":"排他制御をKeyedMutex::Memcachedでやった件"},{"content":"おはようございます！ 若林（@nqounet）です。\n興奮冷めやらぬ感じですが、感想ブログを書きますよ。\n「ブログを書くまでが Kansai.pm 」を実践します。\n迷子 会場はナレッジサロンだったのですが、初めての方には結構迷う場所のようです。\nそういう私も、最初は迷ってスタッフさん用の入り口のほうから無理やり入れていただいた口です。\n案内に気をつけていたつもりですが、2,3人のかたは迷ってしまっていました。\nこの辺り、ナレッジサロンでセミナーなりカンファレンスなりを開催している方に対策を聴いてみたいところですね。\n本編 開始は10分ほど遅くなりましたが、発表者が全員揃ったので本編に突入です。\nオープニングで使ったスライドの原本はこちらです。\nmeetups/20160320-kansai-pm-opening.md at master · nqounet/meetups 前日に、「どんな話が聴きたいですか」というアンケートの結果を公開したら、皆さんがいい感じにトークに取り入れてくれたので最高でした。これは次回もやりたいですね。\nというか、このオープニングで追加した項目にまで対応してくれた @__papix__ 氏は、むしろちゃんとトークを聴いたほうが良いと思いますw\nところで、スライドを作るのが面倒なので、私はいつも「App::revealup」を使っています。Markdownで書いたテキストをいい感じにスライドにしてくれるツールです。\n元々Markdownからスライドにしてくれるツールを自作したりしていたのですが、こっちのほうが便利なので乗り換えました。\nApp::revealup - HTTP Server application for viewing Markdown formatted text as slides - metacpan.org 私の使い方が悪いだけかもしれませんが、最新版だとCSSが微妙なので、 carton でバージョンを 0.19 に固定して使っています。\n1 requires \u0026#39;App::revealup\u0026#39;, \u0026#39;==0.19\u0026#39;; Markdownは、幾つかの書き方を覚えるだけでもかなり捗りますので、IT系じゃない方でもパソコンを使う方全般におすすめです。\n見出し（H[1-6]）とリスト（UL, LI）と整形済みテキスト（PRE）に対応する書き方はすぐに覚えられるので是非お試しください。\n以下のページがそこそこいい感じにまとまっています。\nMarkDownの書き方 ‹ 技術の犬小屋 Markdownのエディタは、MacならMouがオススメです。2年以上前からいろんな人に推奨しています。\nこれがないと何もできないと感じたソフトウェア for MacOSX | IT Office Nishimiyahara Windowsは、2年以上前に探したきりですが、いくつかオススメはありました。今はどうかわかりませんが。\nWindowsにも使えるMarkdownエディタがあった | IT Office Nishimiyahara スライドを作成するときは、自分にあったツールを使えば発表のハードルが低くもなりますので、是非お試しください。\n閑話休題。\n日数や秒数は計算するのは面倒なので、当然Perlで計算しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env perl use utf8; use strict; use warnings; use feature \u0026#39;say\u0026#39;; use open qw/:encoding(utf8) :std/; use Data::Printer {deparse =\u0026gt; 1}; use Time::Moment; my $kansaipm15 = Time::Moment-\u0026gt;from_string(\u0026#39;20130223T00Z\u0026#39;); my $kansaipm16 = Time::Moment-\u0026gt;from_string(\u0026#39;20160320T00Z\u0026#39;); say $kansaipm16-\u0026gt;delta_years($kansaipm15); say $kansaipm16-\u0026gt;delta_days($kansaipm15); say $kansaipm16-\u0026gt;delta_hours($kansaipm15); say $kansaipm16-\u0026gt;delta_seconds($kansaipm15); @karupanerura さんのトークにもありましたが、 Time::Moment は非常に高速です。\nfrom_string は確かに汎用的ではないのですが、 Moment.js との親和性は高いので、モダンなウェブアプリならこれ一択でしょう。\nJavaScriptで時間を扱うならMoment.js | IT Office Nishimiyahara 今見ていたら、トーク内で紹介されていた issue がクローズしていたので、今後が楽しみですね。\nI would like to document Time::Strptime as a companion module to Time::Moment · Issue #1 · karupanerura/Time-Strptime @azumakuniyuki さんの、 Perl から Ruby に移植するデモ（？）が、かなり大雑把で良かったです。\n||= は確かにハマるような気がしました。\n関係ないですが、「しました」と入力する時によく「姉妹sた」ってなるのですが、Perl と Ruby の姉妹ってところを思い出してうっかり笑ってしまいました。\n@sago35tk さんの、同じものを作るのが何故良いのか、というところは思い出してみると本当にそのとおりでした。感想戦というんでしょうか、何故そうしたのかというのをお互いに話すことで得るものがあります。ペアプログラミングと似たような効果もありそうですね。\n最後のまとめに、業界の苦労や勉強会に参加する意義がいい感じにまとまっています。「楽しく失敗体験できる」というのは本当に涙が出そうです。成功体験も大事ですが、楽しい失敗体験も大事ですね。\n@xtetsuji さんの、トークを聴いていて、どのCMSを使うのかはやっぱり用途次第だな、と思いました。\nKansai.pmのウェブサイト は、Rijiを使っていますが、これはライターにはある程度のスキルが必要になりますが、オフラインでも記事（下書き的意味ではなく）を書くことができるし、Markdownで書けるし、gitで管理できるのでライターの概念がありながらもユーザー管理はないし、HTMLファイルを生成するのでサーバーを選ばない（githubでもOK）などの特長があります。\nどれを選べば一番みんながハッピーなのかを考えて選択するのが肝心だなぁ、と思いました。\nKansai.pmのウェブサイトをRijiで作った話、または最近のpm.orgの管理方法 | IT Office Nishimiyahara @__papix__ さんは主催者泣かせですね。発表時間はなるべく守ってください。\nまあ、アンケートの結果について沢山話してくれていたので、参加者の皆さんには参考にしていただけたのではないかと思います。\n過去に書いたコードは資産、というのは完全に同意です。そして、その資産から新しい資産が生まれる。\nライブコーディングも、ペアプログラミングと同じように、他の人のプログラミングスタイルとか、成果物からは見えない部分を見ることができる（シェルの使い方とか）のでいいと思います。\n呪文のように唱えていた「subako」を呼び出していたのは、たぶん peco を使っていると思うのですが、こういう系の知識ってなかなか得られないんですよね。調べる方法がまずわからないし、そもそもそういう事ができる、ということを知る機会もないと思いますが、そういった部分をざっくり質問したりできるのが、勉強会の良い所だなと思います。\nそれと、値を表示する時に使っていた DDP は Data::Printer というモジュールで、かなりオススメしています。\nPerlで自走するエンジニアに必要なたった1つのモジュール | IT Office Nishimiyahara この記事には、少しですが peco についても書いているので参考に読んでみてください。1年半ほど前に書いたものですが、まだ使える記事だと思います。\nそんなこんなで、結局時間一杯までライブコーディングだったので、懇親会の準備などがバタバタになり、懇親会に参加されない方にはちょっと申し訳ない感じの締め方になってしまったのが心残りです。\n会場のナレッジサロンは、1人だと2時間までしか確保できないので、@tomcha_ さんが追加で2時間確保してくれました。\n打ち合わせもしていないのに、参加者の会場の出入りやOAタップの確保など、的確に動いていただいて本当に助かりました。ありがとうございました。\n懇親会、LT 会場が4時間確保できたので、ナレッジサロンのパーティプランを試してみました。\nできることは知っていて、開催されていることも知っていたのですが、実際に頼んだのは初めてです。\n準備も手際よく、料理も美味しいし、素晴らしいですね。\n会場の片付けも、通常は机の配置を戻したりする必要があるのですが、そのへんもやっていただけるので時間いっぱいまで懇親会を楽しむことができました。頼んで正解でした。\n人数が予定よりも3人増えた（12人想定が15人）こともあって、料理が30分も経たずになくなってしまいましたが、料理は増やせない（実際は通常メニューは頼めるのですが）とはいえ、人数の変更が柔軟なところは助かりました。\nLT募集ページには誰も登録していなかったのですが、結局5名がLTっぽい感じで発表しました。\nLTというか、タイムキーパーもいない、ドラもない、ツッコミありの、とても自由な発表でした。\n勉強会の懇親会らしいことができるのが本当に良いですね。\n会場が確保できれば、次回もこの感じでやりたいです。\n二次会 二次会は総勢12名の大所帯でしたが、ダメ元で突撃した鶏の唐揚げが美味しい店を確保できて良かったです。\n確保に走ってくれた @stc1988 さん、ありがとうございました。\n全部で唐揚げいくつ頼んだんだろうか？\n#kansaipm 二次会 (@ 勝男 in Kita, Ōsaka w/ @__papix__ @nqounet) https://t.co/rH5eCaqlNF pic.twitter.com/fetRnwo1YH\n\u0026mdash; OGATA Tetsuji (@xtetsuji) March 20, 2016 二次会とはいえ、かなり飲み食いしたと思うのですが、一人あたり２０００円でお釣りが来る、本当に良い店です。\nそういえば、この店は私がメイヤーらしいです。\nNobutaka | 勝男 まとめ まとめられないのですが、無事開催できて本当に良かったです。\n次回は８月にやります、とか口走ったようなので、それに向けて邁進したいと思います。\n8月に第17回ミーティングやりますよ！！！！！\nそれまでにネタを仕込んでおいてくださいね〜！ #kansaipm\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) March 20, 2016 その際は、是非ご参加のほど、よろしくお願い申し上げます。\n","date":"2016-03-21T11:44:16+09:00","permalink":"https://www.nqou.net/2016/03/21/114416/","title":"Kansai.pm第16回ミーティングを開催してきました"},{"content":"おはようございます。 若林（@nqounet）です。\nPerl入学式のウェブアプリ編では、ファイルのアップロードについては説明していません。\n理由は単純で、ファイルの扱い方を説明するには時間が足りないからです…。\nとはいえ、画像を表示できるようにしたいというリクエストは多いので、その辺について書いてみたいと思います。\nMojolicious::Lite を使うとファイル1つで完結できるので簡単なのですが、そのために色々と無茶なことをしているので CGI で使いたいというような事情がない限りは Mojolicious を使うほうが良いと思います。\n完成品は github に置いています。\n複数のファイルがあり、かつ、ディレクトリの構成も重要なので、リポジトリとして用意しています。\n適宜お使いください。\nなお、画像（に限らずファイルをアップロードできるような）掲示板では、本来はファイルの形式を制限するなど、セキュリティについて考える必要がありますが、今回はその部分については考慮していません。あくまでサンプルコードとして扱ってください。\n以下、ポイントを含めて解説してみます。\nまず、画像（に限らずファイル）をアップロードするにはどのようにすればよいでしょうか。\nファイルをアップロードする場合には、ポイントが3つあります。これらはすべて HTML がポイントになります。\nひとつ目は、HTMLのinput要素のtype属性を file にすること、ふたつ目はform要素のmethod属性を POST にすること、最後は、form要素のenctype属性を multipart/form-data にすることです。\nMojolicious の場合は、 file_field を使うと、 \u0026lt;input type=\u0026quot;file\u0026quot; ...\u0026gt; が生成できます。\nmethod については、Perl入学式でも学んでいるとおり、 form_for で method =\u0026gt; 'POST' を指定します。\n同様に、 enctype についても、 form_for に enctype =\u0026gt; 'multipart/form-data' を追加すれば可能です。\nテンプレートのフォーム部分を抜き出すと以下の様な感じです。\n1 2 3 4 5 6 7 8 \u0026lt;div\u0026gt; %= form_for \u0026#39;/\u0026#39;, method =\u0026gt; \u0026#39;POST\u0026#39;, enctype =\u0026gt; \u0026#39;multipart/form-data\u0026#39;, begin タイトル：\u0026lt;%= text_field \u0026#39;subject\u0026#39; %\u0026gt; 画像ファイル：\u0026lt;%= file_field \u0026#39;file\u0026#39; %\u0026gt; 概要：\u0026lt;%= text_field \u0026#39;description\u0026#39; %\u0026gt; \u0026lt;%= submit_button \u0026#39;投稿する\u0026#39; %\u0026gt; % end \u0026lt;/div\u0026gt; これで、ファイルをアップロードすることができるようになりました。\nファイルがアップロードできるようになったので、次はアップロードされたファイルを保存します。\nファイルを保存するポイントは、2つです。\n一つは、データをどうやって取得するか。もう一つは、取得したデータをどこに保存するかです。\nMojolicious を使う場合、データを取得するのは簡単です。\nデータを取得するには、これまで学んだ方法と同じで param を使用します。テンプレートで file_field には file という名前をつけているので、そのデータを取得する場合は $self-\u0026gt;param('file') とすればよいです。\n1 2 3 my $subject = $self-\u0026gt;param(\u0026#39;subject\u0026#39;); my $description = $self-\u0026gt;param(\u0026#39;description\u0026#39;); my $file = $self-\u0026gt;param(\u0026#39;file\u0026#39;); これまでと違うのは、取得したデータは、データそのものではなくオブジェクト（Mojo::Uploadのインスタンス）になっている、ということです。\nその点だけ注意すれば、他のパラメータと同じように扱うことができます。\nデータを取得できたので、あとは保存です。\n保存するには、取得したオブジェクトの move_toメソッドを使います。\n保存する場所は、（次の「表示する」にも関わってくるのですが）ウェブに公開されている場所になっている必要があります。\nMojolicious では、公開するディレクトリとして最初から /public というディレクトリが使用できます。\nなので、本来はその中に upload のようなディレクトリを作成して、そこで管理すると良いと思います。\nただ、個人の好みかもしれませんが、サーバー上で保存するデータはなるべく固めておきたいので、サーバー上で書き込むためのディレクトリ（/var）を作成し、その中の upload というディレクトリを公開する場所にします。\nMojolicious では、公開するディレクトリは $app-\u0026gt;static-\u0026gt;paths で管理しているので、そこに新しくディレクトリを追加します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package MyApp; use Mojo::Base \u0026#39;Mojolicious\u0026#39;; has upload_dir =\u0026gt; sub { shift-\u0026gt;home . \u0026#39;/var/upload\u0026#39; }; has data_dir =\u0026gt; sub { shift-\u0026gt;home . \u0026#39;/var/data\u0026#39; }; sub startup { my $app = shift; push @{$app-\u0026gt;static-\u0026gt;paths}, $app-\u0026gt;upload_dir; my $r = $app-\u0026gt;routes; $r-\u0026gt;get(\u0026#39;/\u0026#39;)-\u0026gt;to(\u0026#39;index#get\u0026#39;); $r-\u0026gt;post(\u0026#39;/\u0026#39;)-\u0026gt;to(\u0026#39;index#post\u0026#39;); } 1; 保存する場所が決まったので、あとはファイル名です。\nファイル名をそのまま使用して保存すると、同じ名称の別のファイルがアップロードされると、新しいファイルで上書きされてしまいますので、サーバー側で名前を変更して管理するのが良いと思いますが、その場合でも拡張子には注意が必要です。\n今回は、そのあたりを雑に解決する案として、アップロードごとにディレクトリを追加して、ファイル名はそのまま使用することにします。\n1 2 3 4 my $prefix = Mojo::Util::md5_sum(Mojo::Util::steady_time()); my $path = path($self-\u0026gt;app-\u0026gt;upload_dir, \u0026#39;images\u0026#39;, $prefix, $file-\u0026gt;filename); $path-\u0026gt;parent-\u0026gt;mkpath; $file-\u0026gt;move_to($path); Mojo::Utilの、 md5_sum と steady_time を組み合わせてランダムな文字列を作成してディレクトリ名にしています。\nファイルを保存する時に注意しなければいけないのが、親ディレクトリがないと move_to が失敗するところです。\nディレクトリの操作は Path::Tiny を使用しています（pathという関数が使えるようになっています）ので、 move_to をする前に、 $path-\u0026gt;parent-\u0026gt;mkpath のようにして親ディレクトリを作成しています。\nオブジェクト（Mojo::Uploadのインスタンス）の使い方は、ドキュメントを確認してください。\n（日本語）Mojo::Upload · yuki-kimoto/mojolicious-guides-japanese Wiki （英語）Mojo::Upload - Upload その他、Mojo::Util, Path::Tiny については最後にまとめてリンクしておきます。\nさて、ようやく画像が保存ができたので、画像を記事として表示するために他の情報もまとめて保存します。\n画像を表示するには、 HTML のimg要素を使用しますので、情報としてはsrc属性に入る文字列があれば良さそうです。\n今回は、画像以外に、画像のタイトル（subject）と概要（description）も投稿できるようにしているので、それらをまとめてデータとして追記します。\nsrc属性には「公開ディレクトリをルートとした絶対パス」を指定するのが良いでしょう。\nまずは、先ほど保存したファイルの、公開ディレクトリからの相対パスを求めます。\nPath::Tiny には、簡単に相対パスを求めるメソッド（relative）があるのでそれを使うと簡単です。\n1 my $src = $path-\u0026gt;relative($self-\u0026gt;app-\u0026gt;upload_dir)-\u0026gt;absolute(\u0026#39;/\u0026#39;); relative のあとの absolute は、絶対パスを求めるメソッドなのですが、引数を指定すると、指定した引数が現在の絶対パスであるとして設定されます。\nこの一連の動作で、 公開ディレクトリをルートとした絶対パスが求められます。\n絶対パスにすることがとても重要で、これは後に出てくる url_for と組み合わせることで威力を発揮します。\nPerlにかぎらず、プログラミングでは、データをどのように扱うのかが重要です。\n今回は、3つのデータ（subject, src, description）を1つの記事（entry）として管理したいので、ハッシュか配列ですが、この場合はハッシュを使用するのが（テンプレートを書く時にも）便利です。\nハッシュだと、値を項目名で指定できるので、適切に項目名を考えておけば後でテンプレートを見ても何が書いてあるのかが見やすくなりますし、投稿日時や投稿者名などのデータを追加した場合でも、修正が比較的簡単です。\nもし配列を使用した場合は、何番目に何が書いてあるのかを考えながらテンプレートを書く必要があります。データが増えると番号と項目名の対応表が欲しくなるでしょう。\nたくさんの記事を扱うためには、 entry についてもハッシュか配列にしたほうが良いです。\n今回は単純なループとして処理したいので、配列を選択します。\nということで、全体的な構造としては、記事の集まりは配列、一つの記事はハッシュで表現することにします。\n1 2 3 4 5 6 7 my $entry = +{ subject =\u0026gt; $subject, src =\u0026gt; $src-\u0026gt;stringify, description =\u0026gt; $description, }; my $model = $self-\u0026gt;model; $model-\u0026gt;add($entry); ここで $model というのは、記事を扱いやすくするためのオブジェクトです。このオブジェクトに対して add メソッドで新しい記事を追加すると、最新の記事として追加するように作っています。\n実装としては、 load して unshift して save するだけの構造です。\n1 2 3 4 5 6 7 8 sub add { my $self = shift; my $entry = shift; my $entries = $self-\u0026gt;load; unshift @{$entries}, $entry; $self-\u0026gt;save($entries); } load はデータをファイルから読み込むメソッド、 save は引数をファイルに書き込むメソッドです。\nここでは、 $entries がデータ全体（配列のリファレンス）になっているので、そのデータに unshift で $entry を追加しています。\n今回は、データが単純な配列とハッシュの組み合わせなので、 Mojo::JSON を使用して、変数の中身をそのままファイルに書き込んでいます。\nデータも保存できましたので、実際に画像を含めた記事全体を表示します。\n表示は HTML なので、テンプレートを使用します。\nここでポイントになるのは、画像の URL （src要素）です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;ul\u0026gt; % for my $entry (@{$entries}) { \u0026lt;li\u0026gt; \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;\u0026lt;%= $entry-\u0026gt;{subject} %\u0026gt;\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; \u0026lt;img src=\u0026#34;\u0026lt;%= url_for($entry-\u0026gt;{src}) %\u0026gt;\u0026#34; width=\u0026#34;100\u0026#34;\u0026gt; \u0026lt;%= $entry-\u0026gt;{description} %\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/li\u0026gt; % } \u0026lt;/ul\u0026gt; $entries は、記事全体（配列のリファレンス）なので、 for を使用してすべての記事を表示します。\nここで $entry は一つの記事を示すハッシュのリファレンスです。\nこのハッシュは、 subject, src, description の3つの項目で値を持っています。\nsrcについては、 URL を扱うので url_for を使用しています。\nmorbo コマンドで起動した場合、通常は localhost:3000 のルートで起動しますが、 Mojolicious で作成するアプリは、幾つものアプリを組み合わせて一つの大きなシステムとして稼働させることができます。\nmain.pl は、画像掲示板を /uploader/ というディレクトリで使用できるようにしたものです。\nmorbo main.pl で起動しても、 morbo script/my_app で起動しても画像がちゃんと表示されるためには、このように url_for と絶対パスを組み合わせる必要があります。\nなお、 form_for や、コントローラーで使用している redirect_to は url_for を介していませんが、こちらはフレームワークが自動で url_for に相当することを実行しているので使用する必要はありません。もちろん、使用しても正常に動作します。\nテンプレートで URL を直接使用する場合には、必ず url_for を使用しましょう。\n少々長くなりましたが、 Mojolicious で作った「ファイルをアップロードできる掲示板」を解説してみました。\n途中でも書きましたが、本来ファイルのアップロードはセキュリティに気をつける必要がありますので、今回のコードについては、あくまでサンプルコードとして扱ってください。\n","date":"2016-02-27T16:45:02+09:00","permalink":"https://www.nqou.net/2016/02/27/164502/","title":"Mojolicious でファイルがアップロードできる掲示板を作る"},{"content":"おはようございます。 若林（@nqounet）です。\nこの前の水曜日に、すいもく会を開催しました。\nあまりもくもくしてなかった気はしますが、もくもく会です。\nすいもく会 #2 - すいもく会 | Doorkeeper 最終的には参加者は5人 今回は初参加の方も含めて、参加者は5人となりました。\n前半は軽めの自己紹介から、ゲームの話や人工知能の話、教育の話などに花が咲き、もくもくではなく賑やかな会になりました。\n後半は、全員がPerlの関係者（？）だったので、Perlなどのプログラミングの話題で賑やかな会になりました。\n…あまりもくもくしてなかった気はします。\n懇親会も 9時すぎまでもくもくしたあとは、有志で懇親会へ。\n懇親会！ #すいもく会 (@ 勝男) https://t.co/wddI17nfgw pic.twitter.com/ZTMQymudcz\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) February 24, 2016 店は煙草の煙でもくもくでした。\n第3回のご案内 第3回は次の水曜日（3月2日）に開催しますので、興味がありましたらご参加ください。\nすいもく会 #3 - すいもく会 | Doorkeeper ","date":"2016-02-26T08:25:52+09:00","permalink":"https://www.nqou.net/2016/02/26/082552/","title":"すいもく会 #2 を開催しました"},{"content":"おはようございます。 若林（@nqounet）です。\n先日、よなべPerlのゲスト講師として招かれましたので、Mooを使ったオブジェクト指向について喋ってきました。\nよなべPerl ／ 「一歩すすんだオブジェクト指向アプローチ Moo」 on Zusaar よなべPerlとは よなべPerlは、@hakata_oyukiさんが主催している、主にウェブアプリの開発に関するプログラミングの勉強会です。\nよなべPerl 未経験者からIT企業への就労、フリーランス希望の方まで対象にし現実的なアドバイスをしながら、webアプリケーション開発を通じてプログラミングスキルアップをしてゆきます。 よなべPerlとは : よなべPerl\nMoo とは Moo は、Perlでオブジェクト指向プログラミングをするときには、とても便利なモジュールです。\nMoo is an extremely light-weight Object Orientation system. It allows one to concisely define objects and roles with a convenient syntax that avoids the details of Perl\u0026rsquo;s object system. Moo contains a subset of Moose and is optimised for rapid startup. Moo - Minimalist Object Orientation (with Moose compatibility) - metacpan.org\nオブジェクト指向プログラミングで欠かせない継承だけでなく、委譲についても Moose や Mouse と同じような記述で、簡単に実装ができるようになります。\n動作も軽いので、コマンドラインツールにも適しています。\nMoo の簡単な使い方 MyApp.pm というモジュールに foo というアクセサを定義するには以下のようにします。\n1 2 3 4 5 6 package MyApp; use Moo; has foo =\u0026gt; (is =\u0026gt; \u0026#39;rw\u0026#39;); 1; このように定義した foo は以下のように使うことができます。\n1 2 3 4 5 6 7 use strict; use warnings; use MyApp; my $app = MyApp-\u0026gt;new; $app-\u0026gt;foo(\u0026#39;bar\u0026#39;); print $app-\u0026gt;foo; 簡単でしょ？\n勉強会の内容 今回の勉強会は、仕事でもお世話になっている、福岡のフィールズさんの事務所で開催しました。\n株式会社フィールズ｜福岡でWebシステムの提案、開発、保守を行っています 内容としては、 Moo::Role を使った「委譲」をメインにしました。\n資料はこちらです。\nmeetups/20160218-yonabe-perl.md at master · nqounet/meetups meetups/examples/20160218-yonabe-perl at master · nqounet/meetups 継承だけでは表現（実装）が難しいクラスの関係を、委譲を使ってどのように実装するのかということを、実際に委譲（というか Moo::Role ）を使って作成したフレームワークを題材に喋りました。\nフレームワーク自体は継承だけでも可能な構造になってしまったので、委譲の必然性には欠けてしまったのですが、実装例としては参考にはしていただけるのではないかなと思います。\nこれからプログラミングを勉強する方は、オブジェクト指向プログラミングを避けて通るのは逆に難しいと思いますので、 Perl で実装するなら Moo(::Role) を使って書いてみるのはいかがでしょうか？\n","date":"2016-02-21T15:09:20+09:00","permalink":"https://www.nqou.net/2016/02/21/150920/","title":"よなべPerl で Moo について喋ってきました"},{"content":"おはようございます。 若林（@nqounet）です。\n2月18日（木）の19時から、Mooを使ったPerl5のオブジェクト指向プログラミングについて喋ってきます。\nよなべPerl ／ 「一歩すすんだオブジェクト指向アプローチ Moo」 on Zusaar Perlのモダンなオブジェクト指向 いつまでモダンと言っていいのかよくわかりませんが、少なくともblessを直接書くようなことはやめましょう的な話を、去年の9月に、同じ勉強会で喋ってきました。\nよなべPerl 「近代的なオブジェクト指向的アプローチ Moo」 on Zusaar 今回はその続編的な位置づけになります。\n主なキーワードとしては、「継承」と「委譲」になると思います。\nよなべPerl ／ 「一歩すすんだオブジェクト指向アプローチ Moo」 on Zusaar 皆さまのご参加をお待ちしております。\n","date":"2016-02-08T22:33:33+09:00","permalink":"https://www.nqou.net/2016/02/08/223333/","title":"福岡でPerlの講座を開催します"},{"content":"おはようございます。 若林（@nqounet）です。\nナレッジサロンの会員になってから、かれこれ1年近く経つのですが、今でも月に数回利用する程度なのでもっと活用したいと思っています。\nということで、「すいもく会」というのを始めます。\nこちらで参加者を募集しています。\nすいもく会 #1 - すいもく会 | Doorkeeper 一人だと怠ける そもそも、ナレッジサロンには行っても行かなくても（自分以外には）誰にも影響がないので、ほとんどの場合は行かない、というふうになります。\n自宅で致命的に仕事ができなければそうでもないでしょうが、そこまででもない場合は、外出すること自体がハードルになるのでなかなか外出するまでにいたりません。\nなので何かイベントをやればいいのだ、ということで何か開催しようと考えました。\nただ、イベント自体もちゃんと何かしようとすると大変なので、各個人で課題を消化するようなもくもく会がこの場合だと最適解だなと。\nちょっと後ろ向きですが、そもそももくもく会自体がそういう趣旨だろうということで良しとしましょう。\nすいもく会 #1 - すいもく会 | Doorkeeper ","date":"2016-02-08T00:04:01+09:00","permalink":"https://www.nqou.net/2016/02/08/000401/","title":"すいもく会（水曜日にもくもくする会）始めます"},{"content":"おはようございます。 若林（@nqounet）です。\n昨晩、グランフロント大阪のナレッジサロンにて、Perl鍋を開催してきました。\n「Perl鍋」は、Perlでなにか作る勉強会、です。\n#Perl鍋 #12 - connpass 実際に、なにか作ってなかったとしても、です。\n雑談からのプチ講座 というわけで、今回は私も含め4名での開催となりました。\n軽く自己紹介してからの雑談の中で、「Perlでのテスト駆動開発」についての話題になり、それではということでプチ講座をしていただきました。\nプチ講座が始まりました #Perl鍋 pic.twitter.com/ExD0bDHhyj— Nobutaka Wakabayashi (@nqounet) 2016, 2月 4\n話していただいたのは、@sago35tkさん。\n受講生はその他3人です。\nPerl入学式でやっている内容は、一つのファイルですべてが完結するのですが、その調子でプログラミングを続けていると、ちょっと規模が大きくなってくると、すぐに行き詰まってきます。\nなので、何かを作るときは、まずはディレクトリを作って、その中に必要なファイルを作成していく、という手法が取られます。\nテストは「t」に、実行用のモジュールは「lib」に置きます。\nPerlの場合は、こういう法則に従ってファイルを配置していくと、既存のツールの恩恵が受けられるので、そういったルールを覚えて作ると何かと便利です。\nMinillaもそういったツールの一つで、ひな形の作成からテスト、さらには作ったモジュールをCPANへアップロードする（PAUSE のアカウントが必要です）ことも簡単にできるようになります。\nMinilla - CPAN module authoring tool - metacpan.org ある程度のルールを覚えるだけで便利なツールが使えるようになるので、いろいろと便利ですよ。\n資料はgithubにアップロードしていただきました。\n#Perl鍋 でTDD(テスト駆動開発) の話をした際のファイルを置きました。https://t.co/2cVjKAIhm2— takasago ( @sago35tk) 2016, 2月 4\nディレクトリごとソース管理すると、更新履歴も確認できて良いことだらけです。\nソースコード管理は、今ならgitを覚えるのが最も良いと思います。\nもし、ソースコードをzipアーカイブにして日付で管理したりしているとしたら、ほんの少しコマンドを覚えるだけで毎日の仕事が簡単になりますよ。\n次回のPerl鍋 次回は4月の木曜日に開催する予定です。\n今回も第1木曜日ということで、第2か第3木曜日開催の法則が有形無実な感じなので、どこかの木曜日に開催したいと思っています。\n3月は年度末で忙しそうということもありますが、Kansai.pmを開催します ので、そちらをメインにしたいと思っています。\nでは、次回の告知をお楽しみに！\n参考になる資料 PAUSE: menu Perl鍋 #Perl鍋 - connpass ","date":"2016-02-05T08:12:27+09:00","permalink":"https://www.nqou.net/2016/02/05/081227/","title":"#Perl鍋 第12回を開催してきました"},{"content":"おはようございます。 若林（@nqounet）です。\nこの前の土曜日は、Perl入学式でした。\nPerl入学式 in大阪 第5回 〜Webアプリ編〜 - Perl入学式 in大阪 | Doorkeeper 今回は私が講師をしました。\nPerl入学式とは Perl入学式は、「プログラミング未経験者」から「Perl初心者」を対象としたPerlのワークショップです。\n手厚いサポートが特長で、わからないことがあればサポーターがだいたい解決まで導いてくれます。\n詳しくは公式サイトをご覧ください。\nPerl入学式 | Perl Entrance Webアプリ編について 例年は、Webアプリ編は第6回目に実施するのですが、今回は実験的に5回目で実施しました。\nウェブアプリケーションフレームワーク（WAF）として、Mojoliciousを触ったのですが、これまでの内容とはガラッと変わるので、戸惑いも多かったのではないでしょうか？\nMojoliciousも機能がたくさんあるので、一度にすべて覚えることは不可能ですし、覚える必要もないと思います。\n大事なのは、必要になった時に調べられるようになることです。\n第4回までは、基本としてさらっておく必要があることばかりですが、後半の2回は、これからどのようにして学んでいくか、という方向性も示すことができればなと。\nそういうことを考えながら、今回もいろいろと余談も交えて話ができたのではないかと思います。\n最後の改造で、ちゃんと完成しなかったコードを完成させて資料のリポジトリにアップロードしています。\nworkshop-2015-05/BBS at master · perl-entrance-org/workshop-2015-05 懇親会！ Perl入学式の醍醐味は懇親会と言っても過言ではありません。\n懇親会に参加しないで帰るのは、例えるなら、ラーメンを麺と具材だけ食べるようなものです。\nスープも飲み過ぎは体に毒ですが、スープも味わってこそのラーメンです。\n懇親会では、本編では質問しにくいこと、例えばあまり本編には関係なさそうなことだったり、進行の邪魔になりそうなことだったり、を遠慮なく聞くことができます。\n私達サポーターも、ただ集まって飲むというだけでなく、本編の内容について吟味したり、意見の交換をしたりといった反省会のような部分もあります。\nそうした積み重ねが、今のPerl入学式を作っています。\nまた、Perl入学式を完走した人が、次のステップとしてなにかしたい時にはどうすれば、というような話題から、なにわPerlやPerl鍋のような勉強会が生まれたりしています。\nなにわPerl | Doorkeeper #Perl鍋 - connpass 直近では、2月4日にPerl鍋があります。\n#Perl鍋 #12 - connpass 短い時間ではありますが、参加者の歩んできた環境によって困ったことがあったりして、いろいろと面白い話を聞くことができたりします。\nただ単に勉強するだけでなく、いろいろなシチュエーションでの使われ方を知ることができますよ。\n","date":"2016-02-02T08:40:59+09:00","permalink":"https://www.nqou.net/2016/02/02/084059/","title":"Perl入学式（Webアプリ編）で講師をしてきました"},{"content":"おはようございます。 若林（@nqounet）です。\nKansai.pmのウェブサイトがシンプルにリニューアルしました。\nKansai Perl Mongers Website リニューアルに至った恥ずかしい経緯 私が現在代表をしている Kansai.pm のウェブサイトは、もともとFSWikiというシステムで作られていました。\nFrontPage - FreeStyleWiki CGIで動作しているのが古さを感じさせるので、リニューアルしようという話がかなり前からあったのですが、当時はPerl製の使いやすいシステムもなく、なかなかその機会がありませんでした。\nしかし、先日、ちょうど新しいサイトを立ち上げようとしたときに参照したら、なんとサーバーにアクセスできなくなっていました。\n原因はよくわかりませんでしたが、この際、ちゃんと把握できるようにしようと思ったのです。\n最近の使いやすそうなウェブ構築システム もともとのシステムの要件としては、複数人で管理できることが最優先でした。できればPerl製であればなお良し、という感じです。\n当時はあまりなかったのですが、最近はなかなか良い物があります。\nPerl入学式でも使用していて、Gotanda.pmでも活用されている、Rijiです。\nSongmu/p5-Riji gitで管理する事ができるのと、github pagesとの相性が良いのが決め手です。\n仕組みもシンプルだし、Markdownで記事を書くことができるのもいいですね。\nウェブサイトの管理方法 Rijiはローカル環境で、静的ファイルで構成されたウェブサイトを生成することが可能です。\ngithub pagesと相性が良いのはそのためです。\nただ、出力したファイルを同じリポジトリで管理すると、元になっているMarkdownファイルなど（ウェブのソースコード）もウェブサイト上に存在してしまいますので若干微妙かなと思っています。（Perl入学式のサイトがこの方法です）\nGotanda.pmの管理方法は、生成されたディレクトリをgit-pushdirというツールを使って、ウェブサイトのリポジトリにpushするようです。（使ったことがないので想像ですが。）\nkazuho/git-pushdir ただ、生成されたファイルもソースコードと同じリポジトリで管理されており、管理が二重になるのが若干微妙かなと思っています。\nKansai.pmでは、git submoduleを使用して、生成されたファイルをsubmodule内に生成して管理しています。\n若干コマンドが面倒（特にcloneしてからのsubmodule管理）なので、そこはDaikuでまとめてしまいました。\nkansai-pm/website まだ、複数人での運用をしていないので何かしら問題はあるかもしれませんが、今のところうまく動いています。\n最近のpm.orgのDNS管理方法 さて、ウェブサイトの方は解決したので、問題はDNSの方です。\nとりあえずメーリングリストでざっくり訊いてみると、最近はgithubでDNSの管理もやっているようでした。\nperlorg/www.pm.org 英語が苦手なので、変更が一度で済むように連絡先などの情報も書き換えてプルリクエストを送りました。\nAlter DNS for kansai.pm.org by nqounet · Pull Request #76 · perlorg/www.pm.org 反映が結構早かったので驚きました。言葉が少なくても、だいたい汲みとってくれる文化がありがたいです。githubで管理している甲斐がありますね。\n","date":"2016-01-07T07:35:26+09:00","permalink":"https://www.nqou.net/2016/01/07/073526/","title":"Kansai.pmのウェブサイトをRijiで作った話、または最近のpm.orgの管理方法"},{"content":"おはようございます。 若林（@nqounet）です。\nJSON::RPC::Specをアップデートしましたのでお知らせいたします。\nJSON::RPC::Specとは ひとことで言うと、JSON-RPCの仕様のJSON文字列を解釈して結果を返すモジュールです。\n詳しくは過去のリリースの時に書いたエントリーをご覧ください。\n全くの偶然なのですが、仕事でJSON-RPCの仕様で通信を行う機会がありました。\nただし、通信を暗号化する必要があったり、既存のアプリが持っているデータも使いたいので、アプリの中に組み込めるこのモジュールを使っています。\nただ、実際に使ってみると、要求された仕様で動くように書いていくのは結構大変でした。\n特に、任意のエラーを出すことを想定していなかったので、微妙なハックで対応したのですが、とりあえず喉元過ぎれば熱さを忘れるとかいうやつです。\nで、それ以外に、どう頑張っても無理そうな事があったので、今回はそれを実現するためにアップデートしました。\nアップデート内容の概要 JSON文字列を解釈（parse または parse_without_encode）するとき、その文字列以外にも変数を渡せるようにしました。\nその変数は、ディスパッチャを定義（register）で定義する関数で受け取ることができます。\n詳細 このモジュールは使うタイミングによってメソッドが分かれています。\nひとつ目はディスパッチャの定義（register）、ふたつ目がJSON文字列を解釈する関数（parse または parse_without_encode）です。\nひとつ目のregisterは、methodによって動作を変えることを想定していて、Router::Simpleの機能を使って各クラス、あるいは関数へ処理を振り分ける定義をします。\n1 2 3 4 5 6 # method matching via Router::Simple $rpc-\u0026gt;register(\u0026#39;myapp.{action}\u0026#39; =\u0026gt; sub { my ($params, $match) = @_; my $action = $match-\u0026gt;{action}; return MyApp-\u0026gt;new-\u0026gt;$action($params); }); モジュールのregisterの説明部分にはこういう書き方をしています。\nこうした場合に以下のようなJSON文字列をparseすると、\n1 {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;myapp.foo\u0026#34;,\u0026#34;params\u0026#34;:{\u0026#34;key\u0026#34;:\u0026#34;value\u0026#34;},\u0026#34;id\u0026#34;:\u0026#34;1\u0026#34;} MyApp.pmに書いてある foo 関数に対して　+{key =\u0026gt; \u0026lsquo;value\u0026rsquo;} というハッシュを渡す、というふうになります。\nregisterの第一引数にマッチした内容が $match に渡されるので、methodが「myapp.bar」であれば bar 関数に渡す、という感じです。\nそして、ふたつ目のparseは実際のJSON文字列を渡すことで、実際に定義通りに動作する部分です。\nこの時に渡したい変数があっても、うまく渡す方法が思いつきませんでした。\nなので、無理矢理押し込めました。\nサンプル 少ししっかり目のサンプルを書いてみました。\nhttps://github.com/nqounet/p5-json-rpc-spec/tree/master/examples/extra_args\nmain.plを実行した時、parseの時に、以下のようにして変数を渡すと、\n1 2 # https://github.com/nqounet/p5-json-rpc-spec/blob/657ede22dd44be863281e8775602ce7c1e8d20c2/examples/extra_args/main.pl#L25 my $result = $app-\u0026gt;jsonrpc-\u0026gt;parse($json, $extra_args); ディスパッチ先（例としては、MyApp::Fooのbar関数）で受け取ることができます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # https://github.com/nqounet/p5-json-rpc-spec/blob/657ede22dd44be863281e8775602ce7c1e8d20c2/examples/extra_args/lib/MyApp/Foo.pm#L10-L22 sub bar { my $self = shift; my $params = shift; my $extra_args = +[@_]; +{ controller =\u0026gt; $self-\u0026gt;controller, action =\u0026gt; $self-\u0026gt;action, params =\u0026gt; $params, extra_args =\u0026gt; $extra_args, }; } Mojolicious::Lite のように1枚のファイルに書く場合は不要なのですが、ちゃんとクラスに分けて書こうとすると変数がなかなか渡しづらいので、こういう場面で使えるように考えました。\n実際に使おうとしている場面 Mojolicious でシステムを作っているのですが、そのシステムにJSON-RPCの方式で外部からアクセスできるようにしていたのです。\nregister は アプリ（Mojoliciousを継承しているモジュール） の startup のタイミングで定義しており、実際に処理したいJSON文字列は、コントローラー（Mojolicious::Controllerを継承しているモジュール）に実装しています。\nこの時、ディスパッチ先でコントローラーが持っているデータを使いたいと思ったら、なかなか難しいことに気づきました。\nparseする時にコントローラーを渡すのが最も簡単だったので、今回は素直にこういう実装にしました。\nJSON-RPCをアプリに組み込むならJSON::RPC::Spec JSON::RPC::Specは、バッチについても対応しています。\nつまり、完全にJSON-RPCに対応していますので、アプリでJSON-RPCをやるならJSON::RPC::Specが良いと思います。\n","date":"2015-11-16T08:36:46+09:00","permalink":"https://www.nqou.net/2015/11/16/083646/","title":"JSON::RPC::Spec v1.0.5 をリリースしました"},{"content":"おはようございます。 若林（@nqounet）です。\n先日、Perl鍋を開催してきました。\n「Perl鍋」は、毎月第3木曜日（第2の場合もあります）の19時から開催している「Perlで何か作る勉強会」です。\nPerlがある程度使えるようになっても、使わなければせっかくの知識を忘れてしまいます。\nこの勉強会を活用してプログラミングをより深く学んでいきましょう。\n実際のところ、何か作る、と言っても困ってしまう場合はあります。\n私は、「Mooで覚えるオブジェクト指向プログラミング」という連載を温めているのですが、2ヶ月間手を付けていないのでそれを進めようと思って望みました。\nどうすれば「オブジェクト指向プログラミング」への道が開けるのか、それの何が美味しいのか、というようなことを、知らない人に伝えるにはどのようにすればよいのか、というようなことについて意見を交わしました。\n実際に記事は書けませんでしたが、会話の中でヒントはたくさん得られた気がするので、それを活かしていきたいです。\nまた、Perlを使うシーンは参加者それぞれで、私にとっても新しい発見が得られました。\n一つ紹介すると、「use utf8」の環境では、正規表現の「\\d」は、全角数字にもマッチする、ということを知りませんでした。\n1 2 3 4 5 6 7 my $str = q{１２３}; # 全角数字 if ($str =~ /\\A\\d+\\z/ms) { say \u0026#39;\\d マッチ\u0026#39;; } if ($str =~ /\\A[0-9]+\\z/ms) { say \u0026#39;[0-9] マッチ\u0026#39;; } 個人的には、全角半角問わず「数字が書いてある」ことの検証が簡単になりそうなので、非常に嬉しい情報でした。\n他には、オススメモジュールとして「Path::Tiny」「Time::Moment」を挙げておきました。\n他愛のない話も多かったですが、会話の中から思ってもみない知見が得られるので、やはりこういう機会は貴重だなと思いました。\n懇親会も、なかなか濃い情報が沢山でした。\nバックグラウンドが違うと、困っているシーンも違っていて、一般的な解決方法では解決できない事もたくさんあることがよくわかります。\n気がつけば終電間近になっており、いつものように時間は不公平だと感じながらお開きといたしました。\n次回のPerl鍋は、10月15日（木）19時から開催いたします。\nご参加をお待ちしております。\n","date":"2015-09-18T12:44:08+09:00","permalink":"https://www.nqou.net/2015/09/18/124408/","title":"#Perl鍋 #8 を開催してきました"},{"content":"おはようございます。 若林（@nqounet）です。\n仕事の関係で福岡にしばらく滞在していたのですが、その間に「よなべPerl」という勉強会で講師をしてきました。\nよなべPerlとその主催者の紹介 「よなべPerl」は@hakata_oyuki さんが主催する勉強会です。\n未経験者からIT企業への就労、フリーランス希望の方まで対象にし現実的なアドバイスをしながら、webアプリケーション開発を通じてプログラミングスキルアップをしてゆきます。 よなべPerlとは : よなべPerl\n先日の勉強会については、既にレポートが書かれているのでそちらもご覧ください。\nよなべPerl 「近代的なオブジェクト指向的アプローチ Moo」 [2015-09-10] レポート : よなべPerl 私もそうですが、@hakata_oyukiさんも、もともとIT系の会社に勤めていたわけではなく、独学でプログラミングを勉強してきた方で、同じ道を志す若者にたいして教育の場所を作りたい、といつも熱く語っています。\n今回は、Perlでのオブジェクト指向プログラミングを、Mooというモジュールを用いて勉強しました。\n独学の壁 独学の難点は、壁にぶち当たった時にどうすればよいのかわからなくなることだと思います。\nオブジェクト指向を解説する例えとして人間や動物が使われることが多いと思います。おそらく、継承やクラス、インスタンスの概念についてはなんとなくわかった気になれると思います。\nしかし、それだけで掲示板のスクリプトをオブジェクト指向で書くことは難しいと思います。\n私がオブジェクト指向を学んでいた時は、何をオブジェクトにするのか、まるでわかりませんでした。掲示板の中にオブジェクトの概念を入れる方法がわからなかったんですね。\nオブジェクト指向のアプローチは、手順通りに作るスクリプトとはまるで違うので、どのように作るか、どのように使うかがわかりづらい。\nこういった時に、その壁を乗り越える方法を独学で導き出すのは相当大変だろうと思います。\nそんな壁でも、ちょっとしたアドバイスで乗り越え方がわかったりしますので、今回の勉強会がそのきっかけになれていれば嬉しいです。\n内容の振り返り Perlの場合は、その書き方もわかりづらかった。\nオブジェクト指向自体が抽象化できていなかったんですね。\n今回は、（希望もあったので）blessを使った従来のクラスの作成方法もやりましたが、Mooを使ったほうが圧倒的に作りやすいことを理解してもらえたようです。\n圧倒的に作りやすい、ということが実感できるのは良かったのですが、やはり時間を考えると省いても良かったかなと思っています。\nおかげで後半は座学中心になってしまい、かなり難易度が高くなってしまったと思いますが、何かしらの感触は得ていただけたようなのでホッとしています。\nまとめ 同じことがより簡単にできるようになるので、これからPerlでオブジェクト指向プログラミングを勉強するなら、blessについては全力でスルーしてMooを使いましょう。\nクラスを定義する時に使えるモジュールはMooだけではありませんが、用途に応じてちゃんと選べるようになるまではMoo一択で良いと思います。\nみなさんもMooを使ってオブジェクト指向プログラミングを楽しみましょう。\n","date":"2015-09-17T07:22:09+09:00","permalink":"https://www.nqou.net/2015/09/17/072209/","title":"よなべPerlで講師をしてきました"},{"content":"おはようございます。 若林（@nqounet）です。\nYAPC::Asia Tokyo 2015に行ってきましたので、色々と振り返ってみたいと思います。\n自宅に返ってきてからは、のんびりとイカタイムを楽しんでいたのですが、こんなツイートを見かけてしまいました。\nおまいら！ #yapcasia に来たおまいら！ 本当にもうブログかきおわったんか？！ 熱が冷めないうちに書かないともう二度と書くチャンスないぞ！\n\u0026mdash; Daisuke Maki (@lestrrat) August 24, 2015 確かに忘れそうだったので、今年もYAPCをちゃんと終わらせようと思います。\nちなみに、splatoonの腕前とかはこんな感じです。（見えるのかわかりませんが）\nnqounet@splatoon\nイカ、よろしく〜〜〜。\nDay -1 自分自身では意識してなかったのですが、妙にテンションが高いと妻に指摘されました。\nDay 0 道順が不安だったのでざっと道順を動画で確認したつもりでしたが、何故か「西」という言葉に惑わされて建物に入ってから5分ほど道に迷ってしまいました。\n今年も個人スポンサーで申し込んだので、ピンクのストラップのホルダーが入場券代わり。\nさて、前夜祭は呑みながらセッションを聴いたりできる、ゆるい感じが特徴で、今年もゆるい感じではあったのですが、トークはなかなかガチな内容で結構メモってしまいました。\nただ、呑みながらなのでよく覚えてはいません。\n@uzulla さんのPHP話は、その場のノリが重要（ほとんど理解してない）でしたし、その次の@5kozawa さんは、その流れを完全に変える自然言語処理のガチな話（半分以上分かってない）で、最後に聴いた@tagomoris さんの話も、沢山頷きながら聴いていたのですが、すでに酔っていたようでメモを読み返しても、全部英語で書く、とか、プラガブルな機構、とか、ナニコレ状態で涙目です。\nでも、久しぶりに会った人にご挨拶したりして、YAPCに来たんだな〜と、いい感じになってきました。\nDay 1 若干寝坊気味だったのですが、なんとかギリギリオープニングに間に合いました。\nいよいよ高まってきました。\n最初のトークはPerlを生み出したラリー・ウォール氏。\n英語も断片的には理解できているつもりですが、同時通訳を聴いていると全然足りてない感じです。\nPerl6は、これまでは「使うことはないだろうなぁ」と思っていましたが、トークを聴いて逆に使ってみたいと思いました。\n単純ですねw\n懇親会良かった #yapcasia pic.twitter.com/9JHe7iuXVl\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) August 22, 2015 懇親会で一緒に写真を撮ってもらったのは良い記念になります。\nクリスマスが待ち遠しいです。\n他には、@kazuho さんのHTTP/2（むしろH2O?）の話を聴いて近い将来に備えたり、現状の課題でもあるリモートワークの話（@cwest ）を聴いたりしました。\n日本では、一時期（東日本大震災のあとしばらく？）交通機関の影響を考えてリモートワークを実施していた会社もあったように記憶しているのですが、最近はあまり聞かない（あるいはその手の記事をキャッチアップできていないだけかも）ので、リモートワークの知見が得られたのは収穫です。\n聴こうと思っていたトークで、立ち見もできないほどに混雑していて門前払いされたりしたのは残念ですが、その辺は動画を待ちたいと思います。\n懇親会は人多すぎで、ついつい小さくまとまってしまったのですが、それでも関西からの参加者にKansai.pmとかPerl鍋とかの話をしたりしているうちにお開きになりました。\nあっという間に3時間弱が経っていて驚きでした。\nDay 2 この日も、人気のトークは中に入れないレベルだったので、ほとんどメインの国際会議場と無限コーヒーのコンボで過ごしました。\nしかし、よく考えて見れば、Dockerの話やリファクタリングの話は同時通訳がなければ微妙なニュアンスなどはわからなかったと思います。\n結果的には、メインのホールにいたおかげで開発に関するいろいろな知識が得られたと思います。\n小さい部屋（と言っても200人は入れそう）で聴いたのは、@koemuさんの業務改善の話です。\n基本的には、インフラをプログラミングしたかったのです。\nこの業務改善の話は、内容としてはエンジニア向けではありますが、組織についてのノウハウでした。\n私が以前いた会社（不動産業の会社）でも同じように問題はあって、私は、失敗談を自分自身の出来事に重ねつつ聴いていました。\n今はある程度年を重ねてきましたが、今、同じような状況になっていたら、もしかするとうまく立ち回れるかもしれません。\n最後の質問の内容を聴いていると、質問者の方々も苦労していそうな感じでした。\nどのようにして上司の信頼を得て、そして上司を動かせるようになるのか。\n一応Perlのカンファレンスだったように思うのですが、このような組織についての知見が得られるとは思いませんでした。\nこの後、LTへ向かうときに、@issm さんと会い、LTの後に@wakegisky さんと合流して、YAPCには参加していなかったNagoya.pmの@clairvy さんや@iwata1985さんと、東京駅の近くで呑みました。\n@wakegisky とはホテルが近かったので、途中まで一緒に帰ったのですが、YAPCなくなるの寂しいですね〜、とか、Kansai.pmにも来てくださいね〜、とか、Perlの話で盛り上がりました。\nDay3 この日は大阪に帰る日だったのですが、yapcasia.orgのお知らせを見るとMicrosoftさんで実施されるハッカソンがありました。\nしかも、午前中にトークがあるということで、貴重な話も聞くことが出来ました。\nelectron使ってみたい。\n飛行機の時間があったので、途中で抜けてきました\nまとめ YAPCのPはProgrammingのP！\nPerlにかぎらず、Programming言語全体のカンファレンスだったようです。\nお約束「以降Perlの話は出てきません」 #yapcasiaA\n\u0026mdash; Nobutaka WAKABAYASHI (@nqounet) August 21, 2015 ","date":"2015-08-25T06:27:43+09:00","permalink":"https://www.nqou.net/2015/08/25/062743/","title":"YAPC::Asia Tokyo とPerlと私 #yapcasia"},{"content":"@nqounetです。\nYAPC::Asiaも近いということで、2年以上ぶりに小規模ではありますがKansai.pmを開催してきました。\nuse Kansai::Tiny v0.0.1 - Kansai::Tiny.pm | Doorkeeper 開催のご報告 東京から、Perl入学式の校長である @__papix__ 氏が来阪するということで、急遽開催を決定したのですが、そこそこ盛り上がったのでホッとしています。\n会場のナレッジサロンは、会員になっていると10人までゲストを呼べるので、それを利用しました。\n人数は少ないにしても、自由に使える会場があるのはフットワークが軽くなってよいですね。\n一応発表もしたので、（資料はこちらです。→ https://github.com/nqounet/meetups/blob/master/talks/20150808-kansai-tiny-pm.md ）内容については改めて書くつもりです。\n","date":"2015-08-09T17:35:36+09:00","permalink":"https://www.nqou.net/2015/08/09/173536/","title":"Kansai.pmの小規模版、Kansai::Tiny.pmを開催してきました"},{"content":"@nqounetです。\n何故か変にはまってしまったことがあったので、またうっかりしないようにメモしておきます。\n配列を返すメソッドを呼ぶ時に、安全策のつもりでこんな感じで書いてました。\n1 my @array = $self-\u0026gt;array || (); $self-\u0026gt;array が失敗した時に空の配列にしたかったのですが、これが罠でした。\n以下のコードを実行してみるとどのようになるでしょうか？\n1 2 3 4 5 6 7 sub array { my @array = (1, 2, 3); return @array; } my @array = array() || (); print \u0026#34;@array\u0026#34;; 実行すると、画面に表示されるのは 3 になります。\n1 2 3 4 5 6 7 sub array { my @array = (1, 2, 3); return @array; } my @array = array(); print \u0026#34;@array\u0026#34;; 安易に補完せず、このように書くと 1 2 3 という表示になります。\n配列を期待しているところでは、返り値だけでなく、返り値がなかった時の対策についてもちゃんと考えておきましょう。\n","date":"2015-07-24T11:36:02+09:00","permalink":"https://www.nqou.net/2015/07/24/113602/","title":"Perlで返り値を安易に補完しない方が良かった話"},{"content":"@nqounetです。\n博多の人気ラーメン店「博多一双」に行ってきました。\n人気店はダテじゃないなという出来事もあったので、紹介したいと思います。\nロケーション 博多駅の筑紫口から、都ホテルの南の筋を南東へ向かって歩いて5分ほどのところにその店はあります。\nさらっと紹介 2013年,2014年の「食べログ ベストラーメン」に選ばれたりしているようです。\n日曜日のお昼時ということもありましたが、生憎の雨にもかかわらず行列が減らないお店でした。\nお店が見えるかなり手前から、豚骨の匂いがただよってきます。\n最初に食券（自動券売機が店内にあります）を買ってください、とデカデカと看板があるのですが、わりと守っていない人が多いです。（行列でその看板が隠れてしまうのが原因でしょう）\nなので、先に買ってから並ぶと余計に待つことになります。特に一人の場合は。\n知らない顔をして並んでおいて、食券を先に買ってください、という案内があってから買いに行くほうが良いと思います。\n食券を持って待っていると、店員さんが麺の硬さを訊いてきます。（多くの場合は、この時に食券を買いに行くことになるでしょう）\nそうすると、店内に案内されると既に水が置いてあって、席についてしばらくするとラーメンが提供されます。\nスープはかなり深みがありました。\n外で待っているときは、気持ち悪いくらいに豚骨臭がするのですが、スープはかなりあっさりしているように感じます。\nしかし、後から豊かな風味が、鼻の奥の方に感じられました。飲み込んだスープが食道に張り付いているかのように、長く味わいが続きます。\n普段はスープは一口くらいですが、思わず三口ほど飲んでいました。\n麺の硬さは、私には硬めで調度良かったです。熱さはあまり感じなかったのですが、後で気がついたのですが口の中が火傷していました。\nこの店に入る直前には、そんなにお腹が減ってない（朝食べてから2時間も経ってない）のに、思わず「替玉」と言っていました。\n人気店の秘密（？）その1 私は先に食券を買ったのですが、どうやらその後に並んでいた人がいたようで、後から食券を買いに行っていました。\n私は食券を持っていたのですが、その時、私に対して、元の場所まで戻って大丈夫ですよ、と声をかけてきました。\n人気店の秘密（？）その2 帰っていくお客さんの中に、傘を持って行かれた方がいました。\n話を聞いていると、買ったばかりのビニール傘のようでした。\nすると、店員さんが店用の傘と思われる傘を奥の方から持ってきて、これを持っていってください、と渡していました。\n人気店の秘密（？）その3 店内に入って席につく前に、トイレに行った方がいました。\n着席のタイミングに合わせて麺を茹でているので、わりとすぐに提供されるので、トイレに行っている最中に提供されていました。\nその方はしばらく入っていたようで、席に戻ってきた時に店員さんが、（冷めた）ラーメンを作り直しますね、と言ってラーメンを下げていきました。\n感想 スープは泡立っているのですが、あっさりしているのに深い。\n替玉の後は、ラーメンダレを入れたり、にんにくを入れたり、辛子高菜を入れたりしたので、最後のスープはまた味が違っていたのですが、最初に飲んだスープは本当に美味しかった。\n博多のとんこつらーめん｜博多一双｜博多駅徒歩5分 私の位置からは厨房がよく見えたのですが、連携プレイが素晴らしかったです。\n新しいお客さんが店内に入ってくると麺を茹で始め、茹で上がるころにはスープが入った丼が用意されており、華麗な湯切りから麺が丼に入ると同時に麺をスープに馴染ませ、具材を手早く盛りつけて出来上がり。\n特に湯切りは見てて楽しい。麺が宙に浮いているのにあまり麺を見ていない（店内をよく見ていました）のがすごいですね。\n博多に行ったらまた行きたいと思っています。\n","date":"2015-07-06T07:35:35+09:00","permalink":"https://www.nqou.net/2015/07/06/073535/","title":"博多一双に行ってきました"},{"content":"@nqounetです。\nmysqlで運用しているサービスで、1日に2,3回ほどDeadlockによってエラーが発生するという問題がありました。\nその問題が解決したのでメモを残しておきます。\n最初にまとめ mysqlのInnoDBでdeleteするのは、削除対象のレコードがある場合のみにする必要がある。\ndelete時に対象レコードがない場合、ギャップロックがかかりinsertが通らなくなる。\n実装のちょっとした手抜きが頭を悩ます、という良い（悪い？）例になった。\n参考 【MySQL】InnoDBのロック関連まとめ - Qiita まずかった実装 モデルケースとしてはupdateをdelete-\u0026gt;insertにしていた感じの部分。\nイメージはこんな感じ。\n1 2 3 sub update { shift-\u0026gt;delete（条件）-\u0026gt;insert（新しい行）; } 書き込む行数が変わる場合があるので毎回deleteしてからinsertしていた。\n最初はinsertとupdate（delete-\u0026gt;insert）を別々で使っていたんだけど、前処理を共通化して、insertのみの場合でもupdateするようにした。\n何が問題だったか ここで結果的に問題になったのが、最初に作成する時。\n最初に作成する場合はdelete対象がない。\nそのためinsertを通さないロックがかかってしまい、たまたまinsertのプロセスとかぶった場合にDeadlockが発生していた。\nとりあえずの解決策 最初に作成する場合はdeleteしない、という方法もあったのですが、より汎用化するため、deleteの処理を変えることにしました。\n1 2 3 4 5 6 sub delete { my @rows = shift-\u0026gt;select(条件); for my $row (@rows) { $row-\u0026gt;delete; } } 一見、冗長な気がするのですが、一旦条件に合う行を抽出してから削除することで適切にロックがかかるようになり、Deadlockによるエラーが再現しないようになりました。\nあとからこの部分を見た時、冗長だなーと思って単純なdeleteに戻しそうなので注意する必要がありますね。\n","date":"2015-07-04T15:27:07+09:00","permalink":"https://www.nqou.net/2015/07/04/152707/","title":"mysqlのロック方法について一つ賢くなった"},{"content":"@nqounetです。\n2年ぶりに #Perl鍋 というPerlの勉強会を開催しました。\nPerl鍋は、会場をグランフロント大阪の北館にあるナレッジサロンに変更して、再度始動しました。\n今回は私も含め2名でした。 @tomcha_さん、ありがとうございました。\n@tomcha_さんは、Perl入学式のサポーターでもあり、なにわPerlを主催されています。\n主催者として会場に苦労するのは一緒なので、ナレッジサロンを売り込んでおきました。…雑談程度ですが。\n内容は、雑談とコーディングが半分半分という感じでした。\n自分自身の気付きとしては、気がついた時には知っていた、というか、できるようになっていた、ということが沢山ある、ということでした。\n新しいことでも、何度も何度も意識して反復して書いていることで、気が付くと自然に書けるようになっている、ということが雑談の中から感じられたことが何よりも成果でした。\n皮肉にも、その実感は自分自身が否定してきた（地味な反復作業が大嫌い）ことなので、これまではこのような気づきを無視してきたかもしれません。\n簡単なこと、地味なことでも、何度も繰り返してこそ本当の意味で身につき、それまでと違った角度から解釈できるようになるのだろう、と思います。\nさて、時間中には Slack にメッセージを投稿するプログラムを作っていました。\nターミナル向けに文字コードを自動変換するようにしていたのをすっかり忘れていて、最初のうちは文字化けに苦労してしまいました。\nなんでも自動化するのは良し悪しですね。\n結構便利だなと思ってモジュールっぽくしたら、実は既に存在していたというオチでした。\nコマンドラインツールまで付いているというね。\nまあ、簡単な再発明も学びにはなります。\n今回はHTTPのクライアントにHTTP::Tinyを使ってみたかったのと、Mooの理解をさらに深めたいと思って書いてみたのですが、Mooも奥深いですね。\nPerl鍋は、2年半ほど前に、Perl入学式の次のステップの勉強会として始めた勉強会です。\n5回ほど開催したころ、会場にしていた新大阪コワーキングを閉めたので、それ以降2年ほど期間が空いてしまいました。\nこれから毎月第2か第3の木曜日の夜に開催する予定ですので、予定を開けておいてください。\nPerl入学式は、プログラミング未経験者でも参加できる（ついていける）勉強会、というのが売りのひとつの勉強会です。\n開始した頃はコアメンバー（サポーター）のボランティアと若干の参加費で活動していましたが、今はJPAというバックボーンと、（まだ少ないですが）スポンサーとなってくれている企業や個人のおかげで、参加費については無料で成り立っています。\n今年度からは第4期となり、さらにサポーターも増えたので、ますます手厚いサポートができるようになりました。\nほんの僅かかもしれませんが、プログラマ人口の増加に寄与している勉強会だと思っています。\n仕事としてのプログラミングと、趣味のプログラミングは色々違うところもあるのですが、共通するのは経験が大切だということです。\n関西のPerl界隈は、Perl入学式でプログラミングの基礎を作り、Perl鍋やなにわPerlでその基礎知識を更に発展させつつ、Kansai.pmで、他の（職業｜趣味）プログラマーと情報交換しましょう。\n最後に、2年半前の決意表明を。\nでは、また来月、Perl鍋でお会いしましょう。\n","date":"2015-06-14T15:30:07+09:00","permalink":"https://www.nqou.net/2015/06/14/153007/","title":"第6回 #Perl鍋 を開催してきました"},{"content":"@nqounetです。\n大阪駅直結の大丸梅田店に、噂の「ずんだシェイク」が飲めるところがある、ということで行ってきました。\n訪問 大阪駅の1Fの中央改札を出て南（地図が苦手な方は、改札を出て右）の方へ行き、エスカレーターを降りると両側の店が大丸梅田店です。\n「ずんだシェイク」が飲める「ずんだ茶寮」は右手の方にあります。\n右手の方を気にしながら歩いて行くと、ちょっとした案内板があるので、そこを進むと目的地「ずんだ茶寮」です。\n全体で10人ほどが待っていたようですが、皆さんお土産を選んでいるのか、それとも決めかねているのかわかりませんが、店員さんが呼んでも誰も進まないので、さっとシェイクを注文をしました。\nどうやら、商品待ちとシェイク待ちっぽくなっている感じですが、そのへんはまだうまく機能してない感じですね。\n「ずんだシェイク」は少し時間がかかるようなので、その間に「ずんだ餅」を買おうと思って持ち歩ける時間を訊いてみると、次のような感じでした。\nずんだ餅は冷凍してあり、今の季節は常温解凍で3時間後が食べごろ 保冷剤入の保冷バッグがプラス108円で、その状態だと7時間後が食べごろ 売り切れるか心配だったのですが、訊いてみると一応大丈夫そうだったので、結局19時頃にまた来て買うことにしました。\nというようなところで、シェイクが出来上がったようです。\n実食 ずんだは、この食感がいいですね。\n細かくなっていても歯ごたえが感じられるというか、柔らかいのにザラザラな感じ。\nバニラの激甘な感じと、ずんだの控えめな甘さがちょうどいい感じに混ざって、最初はかなり冷たくて甘さ控えめに感じるのですが、徐々に手の熱で程よい冷たさになると、本来の甘さが現れてきます。\nしかし、その頃にはもうなくなっているのが凄いところです。\nずんだシェイクは288円（税込み）で、他の製品に比べてもお安いので、ずんだ体験にはちょうど良いと思いますよ。\n再訪問 …というわけで、19時過ぎにやってきて、ずんだロールとずんだ餅（6個入り）を買って帰りましたとさ。\nちなみに、ずんだロールは1188円、ずんだ餅（6個入り）は865円（税込み）です。\n","date":"2015-06-11T11:03:41+09:00","permalink":"https://www.nqou.net/2015/06/11/110341/","title":"噂のずんだシェイクを飲みました"},{"content":"@nqounetです。\nかなり久しぶりにgitolite を触る機会があったのですが、うっかり管理者用の鍵をなくしてしまった（環境が変わっていたのに鍵を移植していなかった）ので、gitolite -adminのpushができずかなり焦ってしまいました。\n落ち着いて対処すれば大したことではないので、記録を残しておきます。\n管理者用に鍵のペアを作成 まずは、新しく鍵のペアを作ります。\n普段使っている鍵を用いると何かと不便なので、管理者（ここではadmin）用に新しい鍵を作成します。\nローカル環境で、ssh-keygenコマンドを使うのが良いでしょう。\n1 $ ssh-keygen -t rsa -f ~/.ssh/gitolite-admin これで、~/.ssh/gitolite-adminと~/.ssh/gitolite-admin.pubというファイルが出来ます。\n公開鍵をサーバーへ転送 gitoliteが動作しているサーバーの作業用ユーザーを使って、できたファイルをサーバーに転送します。\ngitoliteが動作しているユーザーでログイン出来る場合は直接転送してもよいですが、おそらくそのような運用はしていないと思いますので、面倒ですが一旦作業用ユーザーを介することになるでしょう。\n1 $ scp ~/.ssh/gitolite-admin.pub user@host:./admin.pub この時に、ファイル名をadmin.pubに変更しておくと後で名前を変更する手間が省けます。\n公開鍵をgitolite用のユーザーに渡す 転送が終わったら、sshでログインします。\nログインしたら、先ほどの公開鍵をgitolite用のユーザー（ここではgitolite）のホームディレクトリに移動します。ファイルの所有者を変更しておく必要もあります。\n1 2 $ sudo mv admin.pub /home/gitolite $ sudo chown gitolite:gitolite /home/gitolite/admin.pub これでようやく準備が出来ました。\nユーザーを切り替えてgitoliteコマンド gitoliteユーザーに切り替えて、adminの公開鍵を更新するコマンドを実行します。\n1 2 $ sudo su - gitolite $ /path/to/gitolite setup -pk admin.pub gitoliteコマンドのsetupは、初期化だけでなく公開鍵の更新も行うことができます。\nこの時に気をつけるのは、公開鍵の名前がgitoliteでのユーザー名になることです。\ngitoliteでは、gitolite-adminリポジトリのkeydirにユーザー用の公開鍵を入れておくのですが、setup -pk 公開鍵 とすることで、keydirに公開鍵を転送してcommitした事になります。\nそのため、上記コマンドでadmin.pubを入れ替えることができる、というわけです。\ngitoliteは慣れれば簡単 gitoliteは、次の2点さえ忘れなければ、仕組みも単純なので、プライベートなソースコード管理には最適です。\n管理ユーザーと一般ユーザーの鍵を別にしておく 公開鍵の名前がユーザー名になる 大人の事情で、bitbucketやgithubなどのサービスが使えない場合は是非お試しください。\n参考になる資料 sitaramc/gitolite ユカイ、ツーカイ、カイハツ環境！（26）：Git管理の神ツール「Gitolite」なら、ここまでできる！ (1/2) - ＠IT gitoliteインストール時のうっかりハマりパターン | IT Office Nishimiyahara ","date":"2015-06-06T14:13:59+09:00","permalink":"https://www.nqou.net/2015/06/06/141359/","title":"gitoliteで管理者の鍵をなくした時の対策"},{"content":"@nqounetです。\nPerlで、Redisを使ったメッセージキューシステムのResqueというモジュールを使ってみたのでメモしておきます。\n前置き 沢山のリクエストを処理するようなウェブアプリでは、少し時間のかかる処理をジョブキューやメッセージキューというようなキューシステムを使って処理することが多くなるでしょう。\n個人的にはQudoが好きでよく使っているのですが、NoSQLを使ったものはないのだろうかと探してみたら、Resqueというモジュールを見つけたので使ってみました。\nファイル群 キューシステムは、シンプルにしてもファイル数が多くなるので、慣れないうちは理解するのが大変だと思いますが、コレも慣れです。\n1 2 3 4 5 6 7 ├── client.pl ├── cpanfile ├── lib │ └── MyTask │ └── Echo.pm ├── main.pl └── worker.pl それぞれの役目 cpanfile cpanfileには、モジュールの依存情報、平たく言うと使っているモジュールを書いておきます。\nこのファイルを作っておくと、モジュールのインストールが簡単です。\ncartonを使わない場合でも、cpanm --installdeps .のようにすると、依存モジュールをインストールしてくれます。\n1 2 3 4 5 requires \u0026#39;Log::Minimal\u0026#39;; requires \u0026#39;Path::Tiny\u0026#39;; requires \u0026#39;Proclet\u0026#39;; requires \u0026#39;Resque\u0026#39;; requires \u0026#39;Test::RedisServer\u0026#39;; client.pl client.plは、キューを作成する、平たく言うと仕事を取ってくる役目を担います。\n会社で言うと、営業の方ですかね。仕事を取ってきて、キューに入れるところまでが役目です。\n書いていてちょっと気になったのは、argsが配列のリファレンスしか受け付けないことです。\nこういう時は、なんとなくハッシュリファレンスを渡したくなるのですが、受け付けてくれません。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env perl use utf8; use strict; use warnings; use Resque; use Log::Minimal; my $resque = Resque-\u0026gt;new; my $count = 10; while ($count--) { $resque-\u0026gt;push( echo =\u0026gt; +{ class =\u0026gt; \u0026#39;MyTask::Echo\u0026#39;, args =\u0026gt; +[+{count =\u0026gt; $count}] } ); infof($count); sleep 2; } worker.pl worker.plは、キューを処理する、平たく言うと実際に仕事を片付けるのを担当します。\nキューに仕事がある限り、順番に処理するのが役目です。\nuse lib 'lib';しているのはちゃんと理由があります。\nworker.plは、ワーカーのクラスを自動的にロードして使ってくれるのですが、今回のディレクトリの構成では、libの中にワーカーのクラス（MyTask::Echo ）があるので、予めライブラリがlibにあることを書いておきます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env perl use utf8; use strict; use warnings; use Resque; use Log::Minimal; use lib \u0026#39;lib\u0026#39;; my $worker = Resque-\u0026gt;new-\u0026gt;worker; $worker-\u0026gt;add_queue(\u0026#39;echo\u0026#39;); infof(\u0026#39;### start worker\u0026#39;); $worker-\u0026gt;work; infof(\u0026#39;### stop worker\u0026#39;); lib/MyTask/Echo.pm Echo.pmは、実際の処理の内容です。\nclient.plで、指定しているMyTask::Echoは、このファイルの事を指しています。\nworker.plは、このファイルのような仕事の手順書があれば、どのような処理でも実行できます。\nなお、performは、worker.plが呼び出す関数名です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 package MyTask::Echo; use utf8; use strict; use warnings; use Log::Minimal; sub perform { my $job = shift; debugf(\u0026#39;dequeue: %s\u0026#39;, ddf($job-\u0026gt;args)); infof($job-\u0026gt;args-\u0026gt;[0]{count}); } 1; main.pl Procletを使って、client.plとworker.plとRedisを同時に動かします。\nworker.plを複数動作させたい場合は、Procletのworkerの数を変更するだけなので、いろいろ簡単に試せて便利ですね。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env perl use utf8; use strict; use warnings; use Path::Tiny qw(path tempdir); use Test::RedisServer; use Proclet; my $redis = Test::RedisServer-\u0026gt;new( auto_start =\u0026gt; 0, tmpdir =\u0026gt; tempdir(), ); $ENV{REDIS_SERVER} = $redis-\u0026gt;connect_info; my $proclet = Proclet-\u0026gt;new(color =\u0026gt; 1); $proclet-\u0026gt;service( code =\u0026gt; sub { $redis-\u0026gt;exec; }, worker =\u0026gt; 1, tag =\u0026gt; \u0026#39;redis\u0026#39; ); $proclet-\u0026gt;service( code =\u0026gt; [qw{carton exec -- perl worker.pl}], worker =\u0026gt; 5, tag =\u0026gt; \u0026#39;worker\u0026#39; ); $proclet-\u0026gt;service( code =\u0026gt; [qw{carton exec -- perl client.pl}], worker =\u0026gt; 1, tag =\u0026gt; \u0026#39;client\u0026#39; ); $proclet-\u0026gt;run; 使い方 当然ですが、Resqueを試すにはRedisをインストールしておく必要があります。\nMacでhomebrewを使っている方は、ターミナルからbrew install redisと入力するだけです。\nその他の方は、Redisを入れるか、homebrewを入れるか、Macを買うかしてください。\n全部コピペしたら、cpanfileのあるディレクトリで、carton installと入力してください。\n必要なモジュールがインストールされます。\ncartonが無い場合は、その前にcpanm Cartonと入力してください。\ncpanmが無い場合は、その前にcurl -L https://cpanmin.us | perl - App::cpanminusと入力してください。\nモジュールのインストールが終わったら、carton exec -- perl main.plと入力してみましょう。\n勝手に色々動き始めます。\nジョブキューが初めての方は、main.plに書いてあるworkerやclientのworkerを増減してみたり、client.plのsleep を消したり、数値を変更したり、色々試してみてください。\n1 2 3 $ brew install redis $ carton install $ carton exec -- perl main.pl 使ってみての感想 RDBMSの場合、少なくともテーブル、場合によってはユーザーやデータベースなどを作る必要があり、ちょっと触ってみるにしても結構面倒なところがあります。\nQudoは、そういう部分のヘルパーもあり、楽チンではあるのですが。\nRedis＋Resqueの場合は、そのあたりが何も必要ないので、とても簡単です。\nちょっと使ってみたり、ジョブキューに触れて見るにはちょうど良いと思います。\n参考資料 Resque - Redis-backed library for creating background jobs, placing them on multiple queues, and processing them later. - metacpan.org Resque で学ぶジョブキューイング - Perl Advent Calendar Japan 2012 Casual Track Qudo - simple and extensible job queue manager - metacpan.org 第10回　ジョブキューで後回し大作戦―TheSchwartz，Qudo，Q4M（1）：Perl Hackers Hub｜gihyo.jp … 技術評論社 ","date":"2015-05-14T09:58:42+09:00","permalink":"https://www.nqou.net/2015/05/14/095842/","title":"Resqueでメッセージキューをやってみた"},{"content":"@nqounetです。\nMojoliciousのプロダクション用サーバーのhypnotoadを使ってHerokuで動作させる方法を考えてみます。\nまず、Herokuで起動するためのPORTを設定する必要があります。\n起動スクリプトの中で$PORTとなっているのは、環境変数なので、Perlでは$ENV{PORT}で取得できます。\nhypnotoadの設定 hypnotoadは設定ファイルに設定内容を書きますが、その中で環境変数を書いておくこともできます。\nconfig.plの例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { hypnotoad =\u0026gt; { accepts =\u0026gt; 1000, backlog =\u0026gt; 10, clients =\u0026gt; 10, graceful_timeout =\u0026gt; 20, heartbeat_interval =\u0026gt; 5, heartbeat_timeout =\u0026gt; 20, listen =\u0026gt; [qq{http://*:$ENV{PORT}}], proxy =\u0026gt; 1, requests =\u0026gt; 25, upgrade_timeout =\u0026gt; 60, workers =\u0026gt; 4, }, }; ただ、このようにした場合、どのような環境でもPORTの設定が必要になるので、実際にはMOJO_MODE ごとの設定ファイル（例えばconfig.production.confのような）にするのが良いでしょう。\nperl app.pl で起動する 前回も書いたとおり、Procfileには1つだけ書くようにしたいので、Procletを使用して見掛け上を1つのアプリにします。\napp.plの例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env perl use utf8; use strict; use warnings; use Proclet; use Furl; require EV; require IO::Socket::Socks; require IO::Socket::SSL; my $proclet = Proclet-\u0026gt;new; $proclet-\u0026gt;service( code =\u0026gt; [\u0026#39;hypnotoad\u0026#39;, \u0026#39;-f\u0026#39;, \u0026#39;script/app\u0026#39;], tag =\u0026gt; \u0026#39;web\u0026#39;, ); $proclet-\u0026gt;service( code =\u0026gt; [\u0026#39;perl\u0026#39;, \u0026#39;script/worker\u0026#39;], tag =\u0026gt; \u0026#39;worker\u0026#39;, ); $proclet-\u0026gt;service( code =\u0026gt; sub { my $keepalive_url = $ENV{APP_KEEPALIVE_URL} or die \u0026#39;set env APP_KEEPALIVE_URL.\u0026#39;; Furl-\u0026gt;new-\u0026gt;get($keepalive_url); }, tag =\u0026gt; \u0026#39;keepalive\u0026#39;, every =\u0026gt; \u0026#39;*/30 * * * *\u0026#39;, ); $proclet-\u0026gt;run; Procfileの例\n1 web: carton exec -- perl app.pl ポイントとしては、hypnotoadをフォアグラウンドで動作させることです。\nhypnotoadをそのまま実行すると、アプリをデーモンにしてしまうのですが、そうするとProcletで管理できなくなります。\nworkerがある場合は、workerも同じようにserviceとして登録します。\nさらに、サービスがスリープしないように、30分毎に自分自身にアクセスするようにすると便利だと思います。\nAPP_KEEPALIVE_URLは、こちら のHUBOT_HEROKU_KEEPALIVE_URLを読み替えて設定してください。\nhubot-scripts/hubot-heroku-keepalive ","date":"2015-05-09T09:49:41+09:00","permalink":"https://www.nqou.net/2015/05/09/094941/","title":"Herokuでhypnotoadを使ってMojoliciousを起動する"},{"content":"@nqounetです。\n前回に続いてHerokuネタです。\nこの前Mojolicious::Liteで作ったアプリをHerokuで動かす 記事を書いた時、あとでProcletの話を書こうと思っていたのですが、すでに書かれているのをZenbackが見つけてくれました。\nHeroku上でProcletを使っていろいろ動かすと便利 - blog.nomadscafe.jp Herokuでは、Dynoという単位で料金を管理しているのですが、Procfileで起動するアプリを増やすと、追加でDynoが必要になります。（何もしていないと、アプリは1つしか動きません）\nそこで登場するのがProcletなんですね。\nProclet - minimalistic Supervisor - metacpan.org Procletを使うと、見掛け上は単体のアプリ扱いになるので、アプリに対して定期的にアクセスするワーカーも起動させておくことができます。\n何故そんなワーカーが必要なのか Herokuは長期間アクセスがないとサービスがスリープしてしまいます。\nワーカーを1時間毎にすると一晩くらいは平気のようですが、気が付くとスリープしているので、やはり30分毎が良さそうですね。\n常用していて依存情報がないモジュールに注意 Herokuを使うと、依存しているのにうっかりcpanfileから抜けてしまうモジュールがあることがよくわかります。\nhttpsでのアクセスが必要な場合はIO::Socket::SSLが必要ですし、MySQLを使いたい場合はDBD::mysqlが必要なのですが、ついつい忘れがちです。\nIO::Socket::SSL - metacpan.org DBD::mysql - MySQL driver for the Perl5 Database Interface (DBI) - metacpan.org 最近は、cpanfileを作成する時にはscan-prereqs-cpanfileを使って楽をしているのでなおさらかもしれません。\nscan-prereqs-cpanfile - Scan prerequisite modules and generate CPANfile - metacpan.org Herokuの無料範囲はProcletで広がる メモリなどの制限はあるものの、Procletを使うと沢山のアプリを起動させておくことができます。\nMySQLやPostgresのようなRDBMSだけでなく、RedisやMemcached、MongoDBなどもある程度まで無料で使えるので、ちょっとした実験アプリを置いておくにはピッタリですね。\nProcletがあれば、ローカル環境でもアレコレ起動するのをまとめておくこともできるので便利ですので、試してみるとよいでしょう。\n","date":"2015-04-13T11:25:30+09:00","permalink":"https://www.nqou.net/2015/04/13/112530/","title":"HerokuではProcletを使うとお得"},{"content":"@nqounetです。\nMojolicious::Liteに限らず、PerlのアプリはHerokuで簡単に動かせる、ということなので試してみました。\nまとめ 1 2 3 4 5 6 7 8 9 10 11 mkdir myapp \u0026amp;\u0026amp; cd myapp git init mojo generate lite_app myapp.pl heroku create --buildpack https://github.com/pnu/heroku-buildpack-perl.git touch app.psgi echo \u0026#39;requires \u0026#34;Mojolicious\u0026#34;;\u0026#39; \u0026gt; cpanfile echo \u0026#39;web: starman --preload-app --port $PORT myapp.pl psgi\u0026#39; \u0026gt; Procfile git add . git commit -m \u0026#39;go to heroku\u0026#39; git push heroku master heroku open heroku buildpack Herokuではbuildpackという仕組みで、Perl製のウェブアプリも動かすことができます。\nPerl5のPSGIアプリ用buildpackのまとめ - Qiita 上で紹介した記事が推奨している https://github.com/pnu/heroku-buildpack-perl は使いやすいです。\ncpanfile 依存モジュールを、cpanfileに書いておくと自動的にインストールされます。\n1 requires \u0026#39;Mojolicious\u0026#39;; app.psgi vs Procfile 上記のbuildpackでは、基本的にはPSGIの規格に沿ったapp.psgiを用意する必要があるのですが、適切にProcfileを書けばapp.psgiは空でも問題ありません。（app.psgiという名前のファイルが存在すればbuildpackが有効になります）\nその辺を利用して、Mojolicious::Liteで作成したアプリを（とりあえず）PSGIとして動かすようにProcfileに書いておきます。\n上記のbuildpackでは、標準でstarmanがインストールされるので、それを利用します。\n1 web: starman --preload-app --port $PORT myapp.pl psgi hypnotoadで動かしたい Mojoliciousのhypnotoadでも動作させられるのですが、portの設定をファイルに書く必要がある（コマンドのオプションでは指定できないっぽい）ので、ちょっと面倒です。\nどうしてもhypnotoadで動かしたい場合は適宜お調べください。\nProcfileの応用 app.psgiよりもProcfileが優先されるので、応用すればapp.plで起動するようなアプリを動かすことも可能ですよ。\n1 web: perl app.pl cpanモジュールを使う手もある？ 実は、Mojolicious::Command::deploy::herokuを使うと簡単に動かせるらしいのですが…。\nDeploy Perl Mojolicious web apps to Heroku\n二段階認証に対応していないのか、私の環境ではうまく動作しませんでした。\n","date":"2015-04-08T11:40:23+09:00","permalink":"https://www.nqou.net/2015/04/08/114023/","title":"Mojolicious::Liteで作ったアプリをHerokuで動かす"},{"content":"@nqounetです。\n第7回では、フォームに値を残しておく方法を学びました。\nところで、HTTPにはGETメソッドとPOSTメソッドがありますが、投稿フォームにはPOSTメソッドのほうが向いています。\nHTMLでは簡単な変更ですが、もちろんhelperを使っていても簡単に変更できます。\nサンプルコード全体 Mojoliciousのバージョンは6.01で確認しています。\nファイル名はなんでも良いですが、ひとまずmyapp.plと考えてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; post \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;stash(hello =\u0026gt; qq{Hello $user!}); $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; app-\u0026gt;start; __DATA__ @@ index.html.ep %= form_for \u0026#39;/\u0026#39;, method =\u0026gt; \u0026#39;post\u0026#39;, begin %= text_field \u0026#39;user\u0026#39; %= submit_button \u0026#39;Submit!\u0026#39; % end \u0026lt;%= $hello %\u0026gt; 解説 Line 4 - 7 1 2 3 4 get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; getの部分がとてもシンプルになりました。\nこれまで、getでフォームを受け取っていましたが、その部分がなくなりました。\nLine 9 - 14 1 2 3 4 5 6 post \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;stash(hello =\u0026gt; qq{Hello $user!}); $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; 新たにpostが出てきました。\n書いている内容で実質変更になっているのは、getがpostに変わっただけで、それ以外の部分は前回のgetと全く同じです。\nこのようにして、POSTメソッドで/にアクセスした時に実行されるコントローラーを書くことができます。\nCGIの時代にPerlを書いたことがある方は、query_stringや標準入力といった言葉を聞いたことがあると思います。\nしかし、Mojolicious（だけではなく、最近のフレームワーク）では、GETでもPOSTでも同じ書き方でパラメータから値を取得できます。\nLine 27 - 30 1 2 3 4 %= form_for \u0026#39;/\u0026#39;, method =\u0026gt; \u0026#39;post\u0026#39;, begin %= text_field \u0026#39;user\u0026#39; %= submit_button \u0026#39;Submit!\u0026#39; % end helperのform_forを使ってPOSTメソッドに変更する場合は、method =\u0026gt; 'post'をbeginの前に追記するだけでOKです。\nHTTPのPOSTメソッドは、GETメソッドよりも送信可能なデータ量が多くなります（GETでは2KBから4KB程度ですが、POSTはほぼ無制限です）が、URLにパラメータが含まれません。\n例えば地図を検索して、その場所をメールやLINEで知らせたい、というような用途が考えられる場合はGETメソッドが良いでしょう。\n多機能だけど必要なところだけ使えばOK Mojoliciousでは、HTTPのメソッドを意識することなくパラメータを取得できますので、用途に応じてGETとPOSTを使い分ける事が重要です。\n皆さんも美味しいところだけをうまく使ってサクッとウェブアプリを作ってみましょう。\n","date":"2015-03-07T07:12:19+09:00","permalink":"https://www.nqou.net/2015/03/07/071219/","title":"Mojolicious::LiteでPOSTメソッドを使う"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;stash(hello =\u0026gt; qq{Hello $user!}); $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; app-\u0026gt;start; __DATA__ @@ index.html.ep \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; %= form_for \u0026#39;/\u0026#39;, begin %= text_field \u0026#39;user\u0026#39; %= submit_button \u0026#39;Submit!\u0026#39; % end \u0026lt;p\u0026gt;\u0026lt;%= $hello %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 %= form_for \u0026#39;/\u0026#39;, begin %= text_field \u0026#39;user\u0026#39; %= submit_button \u0026#39;Submit!\u0026#39; % end ","date":"2015-03-05T07:33:44+09:00","permalink":"https://www.nqou.net/2015/03/05/073344/","title":"Mojolicious::Liteでテキストボックスに値を入れておく"},{"content":"@nqounetです。\nこの前の土曜日に、Perlの勉強会であるPerl入学式のWebアプリ編の講師役をしてきました。\n#Perl入学式 in大阪 第6回 Webアプリ編 on Zusaar Perl入学式では久しぶりの講師役 色々と思うところがあって、なかなかまとまらないのですが、とにかく前で話をするのはいつまで経っても慣れないなぁ、というのが正直なところです。\nある程度着地点の見当をつけて話し始めるのですが、途中で着地点を見失って話をぶった切ったり、方向転換の末、収集がつかなくなってごまかしたり、色々とご迷惑をお掛けしたことと思います。\n教えるという立場は、本当に大変ですね。\nウェブとPerl PerlというとCGIを思い浮かべる方も多いと思いますが、モダンなPerlでは、Perlのスクリプトからアプリケーション・サーバーを立ち上げる事ができます。\nPerl入学式で扱うウェブアプリケーションフレームワークのMojoliciousにもその機能があります。\nCGIを手元で動かそうとした場合、まずはApacheなどのウェブサーバーをインストールして、CGIの実行環境を整える必要がありました。\nしかし、Mojoliciousはコマンド一つで、スクリプトをウェブアプリとして動作させることができます。\nこの辺は説明するには内容が高度過ぎる（かつ、説明できる自信がない）ので、スクリプトを編集すればブラウザの表示が変わる、というのを実際に体験してもらいました。\nサポーターのありがたみ 話す立場としても、サポーターから「こうしたほうがわかりやすいんじゃないか」というアドバイスを受けられるのは良いですね。\n資料を書いているときはなるべく多角的に見ているつもりですが、やはり一人では限界があります。\nサポーターからの意見や、参加者からの質問によって、資料や講義の内容もどんどん良くなっていますね。\nこのようなサイクルが続いていけば、ますます素晴らしい入門講座になっていくと思います。\n2015年度の予定はまだ決まっていませんが、ますますパワーアップしていくPerl入学式にご期待ください。\n","date":"2015-03-03T10:07:03+09:00","permalink":"https://www.nqou.net/2015/03/03/100703/","title":"#Perl入学式 で講師役をしてきました"},{"content":"@nqounetです。\n今日の知見です。\nそんなことも知らなかったのか、と思われるかもしれませんが、知りませんでした。\nどうせすぐに忘れるので、忘れる前に備忘録。\n諦めないで Test::mysqldでは、base_dirを指定しない場合は、File::Tempのtempdirで一時的なディレクトリを作って、そこにデータ置き場を作ります。\nFile::TempのtempdirはFile::Specのtmpdirを利用して作成されますが、その作成場所は環境変数のTMPDIR で指定することができます。\nソースコードを読んでいて発見したのですが、後でドキュメントを確認するとちゃんと書いてありました…。\n実行前に設定する テストを実行するときにだけに設定できれば良いので、envを使って設定し実行します。\n1 $ env TMPDIR=./tmp prove -vlr t テストの前に読み書きの高速なRAMドライブを作成しておいて、TMPDIRでそのディレクトリを指定する、というような使い方ができますね。\n","date":"2015-02-19T08:11:42+09:00","permalink":"https://www.nqou.net/2015/02/19/081142/","title":"Test::mysqldのbase_dirは環境変数TMPDIRで指定することもできる"},{"content":"@nqounetです。\n第5回はフォームを使えるようにしました が、何度も入力する場合にはブラウザの「戻る」ボタンを使う必要がありました。\n今回は戻らなくても表示されるようにしてみましょう。\nサンプルコード全体 Mojoliciousのバージョンは5.77で確認しています。\nファイル名はなんでも良いですが、ひとまずmyapp.plと考えてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;stash(hello =\u0026gt; qq{Hello $user!}); $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; app-\u0026gt;start; __DATA__ @@ index.html.ep \u0026lt;form action=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;user\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;%= $hello %\u0026gt; 解説 Line 4 - 9 1 2 3 4 5 6 get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;stash(hello =\u0026gt; qq{Hello $user!}); $c-\u0026gt;render(template =\u0026gt; \u0026#39;index\u0026#39;); }; 前回では、テンプレートを使う時に、文字列を渡しましたが、コードリファレンスの中でテンプレートを指定することもできます。\nrenderメソッドにtemplateとセットで文字列を渡すと、そのテンプレートが使用できます。\nstashというメソッドは、テンプレートに値を渡したい時に使用できます。\nstashメソッドに、テンプレートで使用する名前（今回はhello）と、値（今回はqq{Hello $user!} ）を渡すと、テンプレートでは、スカラー変数として使うことができます。\nLine 26 1 \u0026lt;%= $hello %\u0026gt; stashで渡した値を実際に使用しているのがこちらです。\nstashで渡した名前のスカラ変数を、``と%\u0026gt;で括ると、スカラ変数の値を表示することができます。\nstashで使える名前 stashで使える名前にはいくつか制限があります。\n予め他の用途で使っている名前があり、これらを使うと想定外の挙動をしますので使ってはいけません。\n1 2 3 action, app, cb, controller, data, extends, format, handler, json, layout, namespace, path, status, template, text, variant 私もうっかりするとdataやstatusを使ってしまってハマることがあります。気をつけましょう。\nそれと、（使うことはないと思いますが）mojo.で始まる名前も使えません。\nビューとコントローラー これまでテンプレート、という表現をしていますが、フレームワークでは、このテンプレートを含めた表示する部分のことを「ビュー（view）」と呼んでいます。\nそして、コードリファレンスの部分についても呼び方があり、こちらは「コントローラー（controller）」と呼びます。\nstashを使うと、コントローラーからビューに値を渡すことができます。\nビューから考えると、ビューで使いたい値は、コントローラーからstashを使って渡す必要があります。\n多機能だけど必要なところだけ使えばOK コレまでは、テキストとして直接出力していましたが、stashを使ってコントローラーからビューへ値が渡せるようになりましたので、ビューを使ったHTMLで表示することができるようになりました。\n皆さんも美味しいところだけをうまく使ってサクッとウェブアプリを作ってみましょう。\nところで、今月末（2015年2月28日）の土曜日にPerl入学式の第6回（今期の最終回）を開催します。\n内容としては、何かしらのウェブアプリ（予定では1行掲示板）を作成します。\n大阪の講師は私が担当する予定です。\nあなたがまだ知らないPerlをお見せします。\nPerl入学式 公式サイト Perl入学式 in大阪 第6回 Webアプリ編 on Zusaar ← お申し込みはこちらから。 お申し込みをお待ちしております。\n","date":"2015-02-12T08:12:57+09:00","permalink":"https://www.nqou.net/2015/02/12/081257/","title":"Mojolicious::Liteでテンプレートに値を渡す"},{"content":"@nqounetです。\n少し前にAmon2で、それなりのアプリを書きました。\nその時、確かconfig周りを結構調べて、コードをしっかりと書いたはずだったのですが、そのコードを読んでいて、config はどうやって呼んでるんだっけ？、と思って調べてしまったので、また忘れた時のために書いておきます。\nconfigはフレームワークがうまくやってくれる アプリ（仮にMyApp.pmとする）にはload_configしか書いてなかったので、configは何処から来てるんだ、というところからAmon2のソースを読んでみた。\nというのも、Amon2は継承して使うフレームワークなので、アプリに書いてないメソッドはAmon2.pmを読めば書いてあるからです。\n結果としては、MyApp.pmにload_configというメソッドを書いて値を返すようにしておくと、その結果をconfigとして保持するようになっていた。\nconfigを直接書くよりは、Amon2の仕組みをちゃんと使っておくほうが良さそうだ。\nというわけで、load_configしか書いていなかったのでした。\n先にググれば良かった 調べてみると、上に書いたようなことが丁寧に解説してあるページが見つかった。\n【Amon2のオレオレTips】Configのカスタマイズ したい追記あり | hirobanex.net …まあ、よくあることです。\nconfigの呼び出し方 コントローラー（MyApp::Webのインスタンス）からconfigで呼び出せます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ... any \u0026#39;/\u0026#39; =\u0026gt; sub { my ($c) = @_; my $config = $c-\u0026gt;config; my $counter = $c-\u0026gt;session-\u0026gt;get(\u0026#39;counter\u0026#39;) || $config-\u0026gt;{initial_counter}; $counter++; $c-\u0026gt;session-\u0026gt;set(\u0026#39;counter\u0026#39; =\u0026gt; $counter); return $c-\u0026gt;render(\u0026#39;index.tx\u0026#39;, { counter =\u0026gt; $counter, }); }; ... フレームワークは先人の知恵のかたまりなので、うまく利用しましょう。\n","date":"2015-02-08T08:13:58+09:00","permalink":"https://www.nqou.net/2015/02/08/081358/","title":"Amon2のconfigについてまた調べてしまったので記録する"},{"content":"@nqounetです。\n先ほど書いていたひな形ですが、songmuさんから「それだとwarningsが有効にならないyo!」という突っ込みがありまして、よく確認してみるとたしかに有効になっていませんでした。\nこれではバグの温床になってしまいますので、いきなりですが改訂版を出します。\nPerlスクリプトのひな形（2015年改訂版） 1 2 3 4 5 6 7 #!/usr/bin/env perl use utf8; use strict; use warnings; use feature \u0026#39;say\u0026#39;; use open qw/:encoding(utf8) :std/; use Data::Printer {deparse =\u0026gt; 1}; なんだか色々変わった気がしますが、ひな形の基本的な方針は以下のように考えていて、その点は変わっていません。\nエディタの文字コードはUTF-8しか認めない 何かあったらエラーや警告を出してくれる sayが使える（print \u0026quot;\\n\u0026quot;は面倒） 変数の中身が簡単に確認できる 前回のひな形にuse warnings;を追加すれば目的は叶いますし、common::senseを使う方法もあります。\n大事なのは、strict、warningsです。\nプログラミングをすることは、エラーと向き合うことでもあります。\n文法の間違いは簡単に発見できる方が、余計な心配をしなくてすむので内容に注力できますよ。\n","date":"2015-02-07T14:27:27+09:00","permalink":"https://www.nqou.net/2015/02/07/142727/","title":"（2015年改訂版）最近使っているPerlスクリプトのひな形"},{"content":"（追記: 2015/02/07 ）\nこのひな形ではwarningsが有効になっていなかったためwarningsが有効な改訂版を書きましたので、そちらもご確認ください。\n（追記ここまで）\n@nqounetです。\nPerl入学式などで、サンプルコードなどを書く時に、ちょっとしたひな形を用意しておくと便利なので、スニペットとして用意しています。\nたまたま記事を掘り返していたら、6年近く前の記事が出てきて、さすがにこれは最近じゃない、ということで更新版を書きます。\nちなみにこの記事です。\n最近使っているPerlスクリプトのひな形 | IT Office Nishimiyahara 最近のPerlスクリプトのひな形 普段使用しているのはMacなので、その辺は大目に見てください。\n1 2 3 4 5 6 #!/usr/bin/env perl use utf8; use v5.12; use open qw/:encoding(utf-8) :std/; use DDP {deparse =\u0026gt; 1}; Perl入学式などで動くサンプルコードを書くときなどによく使っています。\nworkshop-2014-05/code/osaka-nqounet at master · perl-entrance-org/workshop-2014-05 解説 use utf8; このファイルがUTF-8で書かれている事が条件ですが、このファイルに書かれている文字をPerlの内部文字列として扱うためのプラグマです。\nこれがあることによって、ファイル内に書いた日本語なども内部文字列として扱うことができます。\n最もわかりやすいのは、このプラグマの有無でlengthの結果が変わってしまうところでしょうか。\n1 2 3 4 $ perl -Mutf8 -le \u0026#39;print length \u0026#34;あいうえお\u0026#34;;\u0026#39; 5 $ perl -le \u0026#39;print length \u0026#34;あいうえお\u0026#34;;\u0026#39; 15 use utf8している場合は5文字、してない場合は15文字として扱われています。\nコードの中に日本語がない場合でも、日本語のようなマルチバイト文字を扱うのであれば、常に書いている状態を意識しておくと、思わぬ文字化けに遭遇した場合でも対応が簡単になります。\nuse v5.12; Perlのバージョン5.12以上でのみ実行できるようにします。\nuse v5.12は、use 5.012と指定しても同じです。\nPerlは5.6からバージョンの表記方法が変わりましたが、新しい表記を利用する場合は最初にvを使用します。\nまた、v5.10以上を指定することで、sayなどが使えるようになります。また、v5.12以上を指定すれば、strict、~~warnings~~が自動的に有効になります。（v5.10でも有効になっていると思っていましたが、v5.12からです。）\n後方互換性を確保するため、（基本的には）新しい機能は明示的に宣言しないとエラーになるようになっています。\nuse open qw/:encoding(utf-8) :std/; Perlの内部文字列は、そのまま出力すると警告を受けますので、通常は出力の際にencodeする必要があります。\nまた、入力時はdecodeして、Perlの内部文字列にするのが基本です。\n常に意識するのは良いことなのですが、ちょっとしたスクリプトを書くには面倒に感じることも多いです。\nそこで、これを書いておきます。\nこうしておくとターミナルとの入出力時にdecode、encodeの処理をうまい具合にやってくれます。\nなお、この書き方でうまく処理できるのは標準入出力と標準エラー出力だけなので、ファイルの読み書きなどは明示的にdecode、encodeが必要です。\nuse DDP {deparse =\u0026gt; 1}; これを書いておくと、変数を簡単に出力できるpという関数が使えるようになります。\n以前にも紹介したことがありますが、理屈はともかく、使って便利なものは使ったほうが良いと思います。\nPerlで自走するエンジニアに必要なたった1つのモジュール | IT Office Nishimiyahara 標準モジュールとしてData::Dumperが入っているので、そちらを使うことが多いと思いますが、見やすさが断然違います。\nさらに文字数も違いますので、より便利だと思います。\nたまたま掘り返した記事 解説はもっと簡単に書くつもりだったのですが、小難しくなってしまいました。\nところで、このサイトの「こちらの記事も読まれています」の機能についてですが、実はただのランダム表示です。\nですが、時々ハッとするというか、ピンポイントの記事が出ることも多いので不思議なものです。\n","date":"2015-02-07T08:10:45+09:00","permalink":"https://www.nqou.net/2015/02/07/081045/","title":"（2015年版）最近使っているPerlスクリプトのひな形"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; \u0026#39;index\u0026#39;; get \u0026#39;/foo\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;render(text =\u0026gt; qq{Hello $user!}); }; app-\u0026gt;start; __DATA__ @@ index.html.ep \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;/foo\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;user\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 #!/usr/bin/env perl use Mojolicious::Lite; 1 get \u0026#39;/\u0026#39; =\u0026gt; \u0026#39;index\u0026#39;; 1 2 3 4 5 get \u0026#39;/foo\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;render(text =\u0026gt; qq{Hello $user!}); }; 1 app-\u0026gt;start; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 __DATA__ @@ index.html.ep \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;/foo\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;user\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2015-02-05T08:50:40+09:00","permalink":"https://www.nqou.net/2015/02/05/085040/","title":"Mojolicious::Liteでフォームを使う"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; $c-\u0026gt;redirect_to(\u0026#39;/foo?user=nqounet\u0026#39;); }; get \u0026#39;/foo\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;render(text =\u0026gt; qq{Hello $user!}); }; app-\u0026gt;start; 1 2 #!/usr/bin/env perl use Mojolicious::Lite; 1 2 3 4 get \u0026#39;/\u0026#39; =\u0026gt; sub { my $c = shift; $c-\u0026gt;redirect_to(\u0026#39;/foo?user=nqounet\u0026#39;); }; 1 2 3 4 5 get \u0026#39;/foo\u0026#39; =\u0026gt; sub { my $c = shift; my $user = $c-\u0026gt;param(\u0026#39;user\u0026#39;); $c-\u0026gt;render(text =\u0026gt; qq{Hello $user!}); }; 1 app-\u0026gt;start; ","date":"2015-02-04T07:57:56+09:00","permalink":"https://www.nqou.net/2015/02/04/075756/","title":"Mojolicious::Liteでパラメータを読み取る"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { shift-\u0026gt;render(text =\u0026gt; q{Hello World!}); }; get \u0026#39;/foo\u0026#39; =\u0026gt; sub { my $c = shift; $c-\u0026gt;render(text =\u0026gt; q{Foo!}); }; app-\u0026gt;start; 1 2 3 4 5 6 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { shift-\u0026gt;render(text =\u0026gt; q{Hello World!}); }; 1 2 3 4 get \u0026#39;/foo\u0026#39; =\u0026gt; sub { my $c = shift; $c-\u0026gt;render(text =\u0026gt; q{Foo!}); }; 1 app-\u0026gt;start; ","date":"2015-02-03T07:38:28+09:00","permalink":"https://www.nqou.net/2015/02/03/073828/","title":"Mojolicious::Liteでルーティングしてみる"},{"content":" 1 2 3 4 5 6 7 8 #!/usr/bin/env perl use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { shift-\u0026gt;render(text =\u0026gt; q{ハローワールド！}); }; app-\u0026gt;start; 1 2 #!/usr/bin/env perl use Mojolicious::Lite; 1 2 3 get \u0026#39;/\u0026#39; =\u0026gt; sub { shift-\u0026gt;render(text =\u0026gt; q{ハローワールド！}); }; 1 get(\u0026#39;/\u0026#39;, sub { ... }); 1 2 my $c = shift; $c-\u0026gt;render(text =\u0026gt; q{ハローワールド！}); 1 app-\u0026gt;start; ","date":"2015-02-02T07:54:35+09:00","permalink":"https://www.nqou.net/2015/02/02/075435/","title":"Mojolicious::Liteでハローワールド"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env perl use utf8; use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; sub { shift-\u0026gt;redirect_to(\u0026#39;/everything/54?name=hoge\u0026#39;); }; get \u0026#39;/everything/:stuff\u0026#39; =\u0026gt; [stuff =\u0026gt; qr/\\d+/] =\u0026gt; {stuff =\u0026gt; 23} =\u0026gt; sub { shift-\u0026gt;render(\u0026#39;welcome\u0026#39;); }; app-\u0026gt;log-\u0026gt;level(\u0026#39;error\u0026#39;); app-\u0026gt;start; __DATA__ @@ welcome.html.ep Stuff is \u0026lt;%= $stuff %\u0026gt;. クエリーnameの値は「\u0026lt;%= param \u0026#39;name\u0026#39; %\u0026gt;」です。 1 2 3 #!/usr/bin/env perl use utf8; use Mojolicious::Lite; 1 get \u0026#39;/\u0026#39; =\u0026gt; sub { shift-\u0026gt;redirect_to(\u0026#39;/everything/54?name=hoge\u0026#39;); }; 1 2 3 get \u0026#39;/everything/:stuff\u0026#39; =\u0026gt; [stuff =\u0026gt; qr/\\d+/] =\u0026gt; {stuff =\u0026gt; 23} =\u0026gt; sub { shift-\u0026gt;render(\u0026#39;welcome\u0026#39;); }; 1 2 app-\u0026gt;log-\u0026gt;level(\u0026#39;error\u0026#39;); app-\u0026gt;start; 1 2 3 4 __DATA__ @@ welcome.html.ep Stuff is \u0026lt;%= $stuff %\u0026gt;. クエリーnameの値は「\u0026lt;%= param \u0026#39;name\u0026#39; %\u0026gt;」です。 ","date":"2015-01-31T08:24:26+09:00","permalink":"https://www.nqou.net/2015/01/31/082426/","title":"Mojolicious::Liteのプレースホルダとパラメータ"},{"content":" 1 2 # Mojolicious::Liteの場合 app-\u0026gt;log-\u0026gt;handle(\\*STDERR) if app-\u0026gt;mode eq \u0026#39;development\u0026#39;; ","date":"2015-01-26T08:21:43+09:00","permalink":"https://www.nqou.net/2015/01/26/082143/","title":"Mojoliciousでlogディレクトリを作っても画面でログを確認する方法"},{"content":" 1 2 brew update brew reinstall --with-opus 1 brew info ffmpeg ","date":"2015-01-20T14:58:37+09:00","permalink":"https://www.nqou.net/2015/01/20/145837/","title":"Homebrewでインストールしたffmpegに機能を追加する方法"},{"content":" ","date":"2015-01-17T22:49:56+09:00","permalink":"https://www.nqou.net/2015/01/17/224956/","title":"二軒目の様子 #Perl入学式"},{"content":" ","date":"2015-01-17T18:19:22+09:00","permalink":"https://www.nqou.net/2015/01/17/181922/","title":"たたき風"},{"content":" ","date":"2015-01-17T16:56:14+09:00","permalink":"https://www.nqou.net/2015/01/17/165614/","title":"インストール待ちな感じ"},{"content":" ","date":"2015-01-17T16:15:49+09:00","permalink":"https://www.nqou.net/2015/01/17/161549/","title":"美味しかったですよ"},{"content":" ","date":"2015-01-17T15:44:03+09:00","permalink":"https://www.nqou.net/2015/01/17/154403/","title":"今日飲んだコーヒー"},{"content":" ","date":"2015-01-17T15:09:45+09:00","permalink":"https://www.nqou.net/2015/01/17/150945/","title":"January 17, 2015 at 12:51PM に撮影"},{"content":" ","date":"2015-01-01T19:49:06+09:00","permalink":"https://www.nqou.net/2015/01/01/194906/","title":"あけましておめでとうございます"},{"content":" 1 package Nukadoko; ","date":"2014-12-17T00:47:13+09:00","permalink":"https://www.nqou.net/2014/12/17/004713/","title":"勝手に添削 〜ぬか漬け管理アプリ編〜"},{"content":" 1 cpanm Daiku 1 curl -L https://cpanmin.us | perl - App::cpanminus 1 2 3 4 desc \u0026#39;install perl modules\u0026#39;; task install =\u0026gt; sub { sh q(cpanm --with-all-features --installdeps .); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace migrate =\u0026gt; sub { desc \u0026#39;development database\u0026#39;; task development =\u0026gt; sub { $ENV{PLACK_ENV} = \u0026#39;development\u0026#39;; require MyApp::CLI::Migrate; MyApp::CLI::Migrate-\u0026gt;new-\u0026gt;run; }; desc \u0026#39;staging database\u0026#39;; task staging =\u0026gt; sub { $ENV{PLACK_ENV} = \u0026#39;staging\u0026#39;; require MyApp::CLI::Migrate; MyApp::CLI::Migrate-\u0026gt;new-\u0026gt;run; }; }; ","date":"2014-12-15T08:45:51+09:00","permalink":"https://www.nqou.net/2014/12/15/084551/","title":"最近お気に入りのPerlモジュール（Daiku編）"},{"content":" ","date":"2014-12-14T14:51:55+09:00","permalink":"https://www.nqou.net/2014/12/14/145155/","title":"なにわPerlに行ってきた #naniwaperl"},{"content":" 1 use JSON::MaybeXS qw(JSON); ","date":"2014-12-10T08:38:02+09:00","permalink":"https://www.nqou.net/2014/12/10/083802/","title":"最近お気に入りのJSON変換モジュール"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 # Amon2のコントローラーと思ってください # 簡素化のため色々と省いています sub contents { my ($class, $c, $args) = @_; my $id = $args-\u0026gt;{id}; my $row = $c-\u0026gt;db-\u0026gt;single(\u0026#39;movies\u0026#39;, {id =\u0026gt; $id}); my $path = path($row-\u0026gt;content_path); return $c-\u0026gt;res_404 unless $path-\u0026gt;is_file; my $refs = Plack::App::File::Range-\u0026gt;new-\u0026gt;serve_path($c-\u0026gt;req-\u0026gt;env, $path-\u0026gt;stringify); return $c-\u0026gt;create_response(@$refs); } ","date":"2014-12-09T08:53:54+09:00","permalink":"https://www.nqou.net/2014/12/09/085354/","title":"HTTPのRangeに対応するCPANモジュール"},{"content":" ","date":"2014-12-08T08:12:12+09:00","permalink":"https://www.nqou.net/2014/12/08/081212/","title":"ようやくWordPressのOGP周辺のプラグインが決まった"},{"content":" ","date":"2014-12-07T08:21:25+09:00","permalink":"https://www.nqou.net/2014/12/07/082125/","title":"プログラムのコードをいい感じの画像にするウェブアプリ"},{"content":" 1 2 3 4 5 6 7 \u0026lt;a href=\u0026#34;#/hello\u0026#34;\u0026gt;ハローワールド\u0026lt;/a\u0026gt; \u0026lt;script src=\u0026#34;router.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var router = new Router; router.add(\u0026#39;#/hello\u0026#39;, hello); function hello(){alert(\u0026#39;Hello, World!\u0026#39;)} \u0026lt;/script\u0026gt; 1 2 3 4 5 6 7 8 9 10 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#/show/page1\u0026#34;\u0026gt;1ページ目\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#/show/page2\u0026#34;\u0026gt;2ページ目\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#/show/page3\u0026#34;\u0026gt;3ページ目\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div id=\u0026#34;page1\u0026#34; class=\u0026#34;js-page\u0026#34;\u0026gt;1ページ目の中身\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;page2\u0026#34; class=\u0026#34;js-page\u0026#34;\u0026gt;2ページ目の中身\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;page3\u0026#34; class=\u0026#34;js-page\u0026#34;\u0026gt;3ページ目の中身\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;router.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 1 2 3 4 5 6 var router = new Router; router.add(\u0026#39;#/show/:id\u0026#39;, function(req) { var id = req.get(\u0026#39;id\u0026#39;); $(\u0026#39;.js-page\u0026#39;).hide(); $(\u0026#39;#\u0026#39; + id).show(); }); 1 2 3 4 5 6 router.add(\u0026#39;#/hello\u0026#39;, function() { alert(\u0026#39;Hello\u0026#39;); }) .errors(404, function(err, href) { alert(\u0026#39;not found\u0026#39;) }); 1 2 3 4 5 6 7 8 9 router .add(\u0026#39;#/login\u0026#39;, routeLogin) .add(\u0026#39;#/index\u0026#39;, routeIndex) .add(\u0026#39;#/logout\u0026#39;, function(){ session.expire(); router.redirect(\u0026#39;#/login\u0026#39;); }); router.run(\u0026#39;#/login\u0026#39;); ","date":"2014-12-06T08:40:44+09:00","permalink":"https://www.nqou.net/2014/12/06/084044/","title":"シングルページアプリには欠かせないJavaScriptのライブラリ"},{"content":" ","date":"2014-12-05T22:37:52+09:00","permalink":"https://www.nqou.net/2014/12/05/223752/","title":"GitHubのお気に入りを管理するウェブアプリ"},{"content":" ","date":"2014-11-18T08:32:01+09:00","permalink":"https://www.nqou.net/2014/11/18/083201/","title":"記事を書いてもブログ村に反映されません"},{"content":" 1 $ npm install -g yo generator-hubot 1 $ ndenv rehash 1 2 3 $ mkdir -p /path/to/my-hubot $ cd /path/to/my-hubot $ yo hubot 1 2 3 4 ? Owner: (nqounet) ? Bot name: (slackbot) ? Description: (A simple helpful robot for your Company) ? Bot adapter: (slack) 1 2 3 4 5 $ git init $ git add -A $ git commit -m \u0026#39;initial commit\u0026#39; $ git remote add origin http://github.com/nqounet/slackbot-test.git $ git push -u origin master 1 2 3 4 5 6 7 8 9 $ heroku login $ heroku create $ heroku rename nqounet-slackbot-test $ heroku config:add TZ=Asia/Tokyo $ heroku config:add HUBOT_SLACK_TEAM=nqounet $ heroku config:add HUBOT_SLACK_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXX $ heroku config:add HEROKU_URL=https://nqounet-slackbot-test.herokuapp.com/ $ heroku addons:add redistogo $ git push heroku master ","date":"2014-10-31T08:14:25+09:00","permalink":"https://www.nqou.net/2014/10/31/081425/","title":"Hubotをyoで作ってherokuにデプロイする"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env perl use utf8; use v5.12; use AnyEvent::Twitter::Stream; use Encode; use Furl; use Config::Pit; my $config = pit_get( \u0026#39;nqounet@twitter.com\u0026#39;, require =\u0026gt; { consumer_key =\u0026gt; \u0026#39;consumer_key\u0026#39;, consumer_secret =\u0026gt; \u0026#39;consumer_secret\u0026#39;, token =\u0026gt; \u0026#39;access_token\u0026#39;, token_secret =\u0026gt; \u0026#39;access_token_secret\u0026#39;, } ); my $furl = Furl-\u0026gt;new; my $done = AE::cv; my $listener = AnyEvent::Twitter::Stream-\u0026gt;new( method =\u0026gt; \u0026#39;filter\u0026#39;, track =\u0026gt; \u0026#39;Perl入学式\u0026#39;, on_tweet =\u0026gt; sub { my $tweet = shift; $furl-\u0026gt;post( \u0026#39;https://idobata.io/hook/generic/xxxxxxxxxxxxxxx\u0026#39;, [\u0026#39;Content-Type\u0026#39; =\u0026gt; \u0026#39;application/x-www-form-urlencoded\u0026#39;], [source =\u0026gt; encode_utf8(qq{$tweet-\u0026gt;{user}{name} : $tweet-\u0026gt;{text}})] ); }, %{$config} ); $done-\u0026gt;recv; 1 2 use App::Daemon qw(daemonize); daemonize(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env perl use utf8; use v5.12; use Proclet; use Path::Tiny qw(path cwd); use File::RotateLogs; use App::Daemon qw(daemonize); daemonize(); my $logfile = join \u0026#39;/\u0026#39;, cwd-\u0026gt;absolute, \u0026#39;log\u0026#39;, \u0026#39;app.log\u0026#39;; path($logfile)-\u0026gt;parent-\u0026gt;mkpath; my $logger = File::RotateLogs-\u0026gt;new( logfile =\u0026gt; qq{$logfile-%Y%m%d}, linkname =\u0026gt; $logfile, rotationtime =\u0026gt; 86400, maxage =\u0026gt; 86400 * 14, ); my $proclet = Proclet-\u0026gt;new(logger =\u0026gt; sub { $logger-\u0026gt;print(@_); }); $proclet-\u0026gt;service( code =\u0026gt; [qw(perl main.pl)], tag =\u0026gt; \u0026#39;bot\u0026#39;, ); $proclet-\u0026gt;run; 1 2 3 4 5 6 7 8 9 10 11 12 requires \u0026#39;perl\u0026#39;, \u0026#39;5.012001\u0026#39;; requires \u0026#39;AnyEvent::Twitter::Stream\u0026#39;; requires \u0026#39;Furl\u0026#39;; requires \u0026#39;Config::Pit\u0026#39;; requires \u0026#39;Net::OAuth\u0026#39;; requires \u0026#39;Net::SSLeay\u0026#39;; requires \u0026#39;IO::Socket::SSL\u0026#39;; requires \u0026#39;App::Daemon\u0026#39;; requires \u0026#39;Proclet\u0026#39;; requires \u0026#39;Path::Tiny\u0026#39;; requires \u0026#39;File::RotateLogs\u0026#39;; requires \u0026#39;Data::Printer\u0026#39;; ","date":"2014-09-15T22:48:26+09:00","permalink":"https://www.nqou.net/2014/09/15/224826/","title":"Perl入学式に関するツイートをIdobataに通知するボットを作った"},{"content":" 1 2 3 use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; {text =\u0026gt; \u0026#39;Hello World!\u0026#39;}; app-\u0026gt;start; 1 2 3 4 5 6 7 #!/usr/bin/env perl use strict; use warnings; if ($ENV{\u0026#39;REQUEST_METHOD\u0026#39;} eq \u0026#39;GET\u0026#39; and $ENV{\u0026#39;PATH_INFO\u0026#39;} eq \u0026#39;/\u0026#39; or $ENV{\u0026#39;PATH_INFO\u0026#39;} eq \u0026#39;\u0026#39;) { print \u0026#34;Content-Type: text/plain\\n\\n\u0026#34;; print \u0026#39;Hello World!\u0026#39;; } 1 2 3 4 5 6 7 for my $key (keys %ENV) { print \u0026#34;$key = $ENV{$key}\\n\u0026#34;; } # または while (my ($key, $value) = each %ENV) { print \u0026#34;$key = $value\\n\u0026#34;; } 1 2 3 4 #!/usr/bin/env perl use utf8; use 5.012; say \u0026#39;Hello, world!\u0026#39;; ","date":"2014-09-11T08:20:56+09:00","permalink":"https://www.nqou.net/2014/09/11/082056/","title":"厳密なCGIは難しいのでフレームワークを覚えましょう"},{"content":" 1 2 3 use Mojolicious::Lite; get \u0026#39;/\u0026#39; =\u0026gt; {text =\u0026gt; \u0026#39;Hello World!\u0026#39;}; app-\u0026gt;start; 1 2 3 4 5 #!/usr/bin/env perl use strict; use warnings; print \u0026#34;Content-Type: text/plain\\n\\n\u0026#34;; print \u0026#39;Hello World!\u0026#39;; ","date":"2014-09-09T08:42:02+09:00","permalink":"https://www.nqou.net/2014/09/09/084202/","title":"#Perl入学式 in大阪 第3回をサポートしてきました"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env perl use utf8; use 5.012001; use DDP {deparse =\u0026gt; 1}; my @list = (); while (my $in = \u0026lt;\u0026gt;) { chomp $in; if ($in == 1) { print \u0026#39;\u0026gt;\u0026gt;\u0026gt; \u0026#39;; my $msg = \u0026lt;\u0026gt;; unshift @list, $msg; } if ($in == 2) { print @list; } if ($in == 9) { exit; } } ","date":"2014-08-31T21:25:27+09:00","permalink":"https://www.nqou.net/2014/08/31/212527/","title":"Perl入学式について振り返ってみた"},{"content":" ","date":"2014-08-31T11:47:42+09:00","permalink":"https://www.nqou.net/2014/08/31/114742/","title":"YAPC::Asia Tokyo 2014 2日目に行ってきました #yapcasia"},{"content":" 1 $ say Ya -o ya ","date":"2014-08-30T02:21:46+09:00","permalink":"https://www.nqou.net/2014/08/30/022146/","title":"YAPC::Asia Tokyo 2014 1日目に行ってきました #yapcasia"},{"content":" ","date":"2014-08-30T00:04:22+09:00","permalink":"https://www.nqou.net/2014/08/30/000422/","title":"YAPC::Asia 0日目に行ってきました #yapcasia"},{"content":" 1 $ cpanm Alien::ZMQ 1 $ cpanm ZMQ::LibZMQ3 1 $ PERL_ZMQ_BACKEND=ZMQ::LibZMQ3 cpanm ZMQ 1 $ PERL_ZMQ_BACKEND=ZMQ::LibZMQ3 cpanm Alien::ZMQ ZMQ::LibZMQ3 ZMQ 1 2 3 4 5 # sub.pl 16行目付近 recv() -\u0026gt; recvmsg() my $msg = $sub-\u0026gt;recvmsg(); # pub.pl 21行目付近 send() -\u0026gt; sendmsg() $pub-\u0026gt;sendmsg($update); ","date":"2014-08-28T16:34:44+09:00","permalink":"https://www.nqou.net/2014/08/28/163444/","title":"MacOSXにZMQをインストールしてpub/subを試してみました"},{"content":" 1 2 3 4 5 6 7 8 use strict; use Test::More 0.98; like \u0026#39;a\u0026#39;, qr/a/, q{ like }; eval {die \u0026#39;a\u0026#39;}; like $@, qr/a/, q{ like eval }; done_testing; 1 2 3 4 5 6 7 8 use strict; use Test::More 0.98; use Test::Exception; like \u0026#39;a\u0026#39; , qr/a/, q{ like }; throws_ok {die \u0026#39;a\u0026#39;} qr/a/, q{ throws_ok }; done_testing; 1 2 3 4 5 6 7 8 use strict; use Test::More 0.98; use Test::Fatal; like \u0026#39;a\u0026#39; , qr/a/, q{ like }; like exception {die \u0026#39;a\u0026#39;}, qr/a/, q{ like exception }; done_testing; 1 is exception {\u0026#39;a\u0026#39;}, undef, q{ live }; ","date":"2014-08-28T09:07:12+09:00","permalink":"https://www.nqou.net/2014/08/28/090712/","title":"例外をテストするならTest::Fatalが書きやすい"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function show (args) { console.debug(args); } var str = \u0026#39;string\u0026#39;; show(str); // 配列 var array = [0, 1, 2]; // 配列の書き方で代入 show(array); // オブジェクト var obj = {key1: \u0026#39;value1\u0026#39;, key2: \u0026#39;value2\u0026#39;}; // オブジェクトの書き方で代入 show(obj); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 use DDP {deparse =\u0026gt; 1}; sub show { my $args = shift; p $args; } my $str = \u0026#39;string\u0026#39;; show($str); my @array = (0, 1, 2); show(\\@array); my %obj = (key1 =\u0026gt; \u0026#39;value1\u0026#39;, key2 =\u0026gt; \u0026#39;value2\u0026#39;); show(\\%obj); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 use DDP {deparse =\u0026gt; 1}; sub show { my $args = shift; p $args; } my $str = \u0026#39;string\u0026#39;; show($str); my $array = [0, 1, 2]; show($array); my $obj = {key1 =\u0026gt; \u0026#39;value1\u0026#39;, key2 =\u0026gt; \u0026#39;value2\u0026#39;}; show($obj); ","date":"2014-08-16T16:46:30+09:00","permalink":"https://www.nqou.net/2014/08/16/164630/","title":"例えば最初からリファレンスで覚えるPerl"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 use JSON::RPC::Spec; my $rpc = JSON::RPC::Spec-\u0026gt;new; $rpc-\u0026gt;register( \u0026#39;echo.{action}\u0026#39; =\u0026gt; sub { my ($params, $matched) = @_; return $matched-\u0026gt;{action}; } ); say $rpc-\u0026gt;parse( \u0026#39;{\u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;echo.hoge\u0026#34;, \u0026#34;params\u0026#34;: [1, 2, 3, 4, 5], \u0026#34;id\u0026#34;: 1}\u0026#39; ); # -\u0026gt; {\u0026#34;id\u0026#34;:1,\u0026#34;result\u0026#34;:\u0026#34;hoge\u0026#34;,\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;} 1 2 3 4 my $router = Router::Simple-\u0026gt;new; $router-\u0026gt;connect( \u0026#39;echo.{action}\u0026#39; =\u0026gt; { handler =\u0026gt; MyApp::Echo-\u0026gt;new ); ","date":"2014-08-14T22:18:29+09:00","permalink":"https://www.nqou.net/2014/08/14/221829/","title":"JSON::RPC::Specをバージョンアップしました"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 use Plack::App::JSONRPC; use Plack::Builder; my $jsonrpc = Plack::App::JSONRPC-\u0026gt;new( methods =\u0026gt; { echo =\u0026gt; sub { $_[0] }, empty =\u0026gt; sub {\u0026#39;\u0026#39;} } ); my $app = sub { [200, [\u0026#39;Content-Type\u0026#39; =\u0026gt; \u0026#39;text/plain\u0026#39;], [\u0026#39;Hello\u0026#39;]]; }; builder { mount \u0026#39;/jsonrpc\u0026#39;, $jsonrpc-\u0026gt;to_app; mount \u0026#39;/\u0026#39; =\u0026gt; $app; }; ","date":"2014-08-14T19:22:29+09:00","permalink":"https://www.nqou.net/2014/08/14/192229/","title":"簡素なJSON-RPCサーバーを作ってみた"},{"content":" 1 2 3 4 5 use JSON::RPC::Lite; method \u0026#39;echo\u0026#39; =\u0026gt; sub { $_[0] }; as_psgi_app; ","date":"2014-08-14T18:24:40+09:00","permalink":"https://www.nqou.net/2014/08/14/182440/","title":"JSON::RPC::Liteを書きなおしました"},{"content":" 1 2 3 4 5 6 7 use JSON::RPC::Spec; my $rpc = JSON::RPC::Spec-\u0026gt;new; $rpc-\u0026gt;register(echo =\u0026gt; sub { $_[0] }); print $rpc-\u0026gt;parse( \u0026#39;{\u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;echo\u0026#34;, \u0026#34;params\u0026#34;: \u0026#34;Hello, World!\u0026#34;, \u0026#34;id\u0026#34;: 1}\u0026#39; ); # -\u0026gt; {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;result\u0026#34;:\u0026#34;Hello, World!\u0026#34;,\u0026#34;id\u0026#34;:1} ","date":"2014-08-14T12:26:38+09:00","permalink":"https://www.nqou.net/2014/08/14/122638/","title":"CPAN Authorになりました"},{"content":" 1 2 3 4 5 6 7 8 use JSON::RPC::Lite; method \u0026#39;echo\u0026#39; =\u0026gt; sub { my ($param) = @_; return $param; }; as_psgi_app; 1 $ plackup app.psgi 1 {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;echo\u0026#34;,\u0026#34;params\u0026#34;:\u0026#34;Hello!\u0026#34;,\u0026#34;id\u0026#34;:1} 1 {\u0026#34;id\u0026#34;:1,\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;result\u0026#34;:\u0026#34;Hello!\u0026#34;} ","date":"2014-08-09T10:14:54+09:00","permalink":"https://www.nqou.net/2014/08/09/101454/","title":"JSON::RPC::Liteというモジュールを書きました"},{"content":" 1 \u0026lt;div style=\u0026#34;{{style}}\u0026#34;\u0026gt;中身\u0026lt;/div\u0026gt; 1 {style: \u0026#39;top:\u0026#39; + top + \u0026#39;px;left:\u0026#39; + left \u0026#39;px;width:\u0026#39; + width + \u0026#39;px;height:\u0026#39; + height \u0026#39;px\u0026#39;} 1 2 var $el = $(\u0026#39;\u0026lt;div\u0026gt;中身\u0026lt;/div\u0026gt;\u0026#39;); $el.css({top: top, left: left}).width(width).height(height); ","date":"2014-07-20T16:45:22+09:00","permalink":"https://www.nqou.net/2014/07/20/164522/","title":"インターネットエクスプローラーの重要性について考えさせられた"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env perl use utf8; use 5.012; use DDP {deparse =\u0026gt; 1}; my $string = \u0026#39;Perl入学式\u0026#39;; my @foo = (\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;); p $string; p @foo; 1 cpanm Data::Printer 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env perl use utf8; use 5.012; use Test::More; my $num = \u0026#39;42string\u0026#39;; ok($num == 42); ok($num eq \u0026#39;string\u0026#39;); done_testing; 1 cpanm Data::Printer Test::More 1 2 3 use Test::More; ok(\u0026#39;ok\u0026#39;); done_testing; 1 ls | peco | xargs cat ","date":"2014-07-19T13:34:00+09:00","permalink":"https://www.nqou.net/2014/07/19/133400/","title":"Perlで自走するエンジニアに必要なたった1つのモジュール"},{"content":" ","date":"2014-07-17T01:03:51+09:00","permalink":"https://www.nqou.net/2014/07/17/010351/","title":"Perl入学式とはなんだったのか"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env perl use strict; use warnings FATAL =\u0026gt; \u0026#39;all\u0026#39;; my $args = \u0026#39;hoge\u0026#39;; if ($args == 0) { print \u0026#34;$args is 0 !\\n\u0026#34;; } else { print \u0026#34;$args is not 0 !\\n\u0026#34;; } ","date":"2014-07-14T23:31:25+09:00","permalink":"https://www.nqou.net/2014/07/14/233125/","title":"Perlの勉強会 #Perl入学式in大阪 #2 をサポートしてきました"},{"content":" ","date":"2014-07-05T16:44:52+09:00","permalink":"https://www.nqou.net/2014/07/05/164452/","title":"YAPC::Asia Tokyoに応募しましたよ"},{"content":" 1 2 3 4 5 6 7 # phpenvのインストール git clone https://github.com/CHH/phpenv.git $HOME/src/phpenv PHPENV_ROOT=$HOME/.anyenv/envs/phpenv $HOME/src/phpenv/bin/phpenv-install.sh # php-buildのインストール git clone https://github.com/CHH/php-build.git $HOME/src/php-build PREFIX=$HOME/.anyenv/envs/phpenv $HOME/src/php-build/install.sh 1 2 3 # PHPのインストール sudo yum install -y re2c libxml2-devel openssl-devel libcurl-devel libjpeg-turbo-devel libpng-devel libmcrypt-devel readline-devel libtidy-devel libxslt-devel phpenv install 5.5.13 ","date":"2014-06-25T07:11:23+09:00","permalink":"https://www.nqou.net/2014/06/25/071123/","title":"anyenvのphpenvを入れ替える方法"},{"content":" 1 2 3 4 5 6 7 8 # ダウンロード curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar # 動作確認 php wp-cli.phar --info # 実行権限付与 chmod +x wp-cli.phar # Pathの通った場所へコマンドとして配置 mv wp-cli.phar ~/local/bin/wp ","date":"2014-06-24T06:55:52+09:00","permalink":"https://www.nqou.net/2014/06/24/065552/","title":"コマンドラインからWordpressが操作できる"},{"content":" 1 php --ini 1 mysql.default_socket = /var/run/mysqld/mysqld.sock ","date":"2014-06-23T06:52:48+09:00","permalink":"https://www.nqou.net/2014/06/23/065248/","title":"ubuntuにanyenvでphpenvをインストールしたけど失敗したので入れなおした"},{"content":"@nqounetです。\nこれを知った時、PHPってなんでもビルトインにするんだね。と思ったけど、とても便利なので良いと思います。\n本当ですよ。\nオプションをつけるだけでサーバ起動 PHP 5.4.0 から、CLI SAPI にはウェブサーバーの機能が組み込まれるようになりました。\nたったこれだけで、そのディレクトリをルートにしたサーバ（ http://localhost:8000/ ）が起動するんですよ。\n1 php -S localhost:8000 なにこれすごい。\nmysqlを設定しておけば、Wordpressもちゃんと動く。\n開発環境が断然良くなった。\nこんなに便利なんだったら、もっと大々的に謳ってくれればよいのに。\nウェブ開発にテストサーバは憑き物 さて、感動したことは言ったので、あとはグダグダです。\nウェブ開発に際しては、テストサーバを簡単に立てられるかどうかが勝負どころだと思います。\nPerlにもMojoliciousやPlackベースのフレームワークにはテストサーバが簡単に起動できる仕組みがあります。\nNode.jsも、Gruntなどのツールを使って簡単に開発用のサーバが立てられます。\nPHPでガッツリ開発したことはなかったのですが、今回はWordPressのテーマを作成することになったのです。\n今までは、既存のテーマ（PHPファイル群）をちょこちょこ修正というのがほとんどで、かつ、本番環境も自分自身で管理できるのが当たり前だったのですが、どちらも逆でした。\nテーマをデザイン（HTML+CSS）から作成する、ということと、本番サーバには触れない、という条件でした。\nこれまで、開発環境を自らの手で選択できるのが当然だったので、あまりの不自由さに悶絶しました。\nしかも、製作期間もあまりなく、とりあえず動けば良い、という感じだったので、ローカルマシン上に開発環境を作成する時間はもったいないと判断しました。\nなので、以下の様な流れでテーマ作成をしていきました。\n手元でHTMLからPHPファイルを作成 作成したファイル群をzipで圧縮 WordPressの管理画面からテーマをアップロードして有効化（すでに有効の場合は、一度別のテーマに変更後、テーマを削除してからアップロードして有効化） 動作確認 1から4の繰り返し この内、3が本当に手間で手間でしかたありませんでした。\nコレが手間なのでWordPressのテーマ編集から修正して動作確認をしたりするのですが、そうすると、コピペで同期を取る感じになるのです。\nこういう部分をコマンド一発で楽してきたツケか？と思うくらいに、単純ですがミスできない作業をひたすら繰り返しました。\nもし、テストサーバがこんなに簡単に起動できると知っていれば、さっさと環境構築して、手元で動作確認しながら開発が進められたと思います。\n実際には、anyenv→phpenvでのPHPインストールに躓いた（結局phpenvを差し替えた）り、mysqlのdefault_socketがデフォルトの場所にないためにデータベースに接続できないエラーが発生した（socketのパスをphp.iniに書くだけ、ということに気づくまでが大変だった）りしたので、テスト環境を作るのもやはり大変だったのですが。\nまあ、でも、苦労はしてみるもんですよ。\nこれで、直接テーマのディレクトリをgitで管理しながらの開発ができるようになりました。\n開発環境の構築は何度もやるものではないのでノウハウがなかなか蓄積できないんですよね。\nPerl入学式でも、何度もやっているのに、まだ環境構築でハマってしまうこともあるくらいですから。\n","date":"2014-06-21T13:46:56+09:00","permalink":"https://www.nqou.net/2014/06/21/134656/","title":"PHPでも簡単にテストサーバが起動できるなんて知らなかった"},{"content":" 1 ホーム ＞ カテゴリ ＞　項目 ","date":"2014-06-20T23:50:30+09:00","permalink":"https://www.nqou.net/2014/06/20/235030/","title":"パンくずリストプラグインはパンくず文字列の方にバグがあった"},{"content":" 1 2 3 4 5 6 7 var text = \u0026#39;hoge\u0026#39;; var $el = $(\u0026#39;\u0026lt;ul/\u0026gt;\u0026#39;).append( $(\u0026#39;\u0026lt;li/\u0026gt;\u0026#39;).append( $(\u0026#39;\u0026lt;p/\u0026gt;\u0026#39;).html(text) ) ); 1 2 3 4 5 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;p\u0026gt;hoge\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 1 2 3 var $ul = $(\u0026#39;\u0026lt;ul/\u0026gt;\u0026#39;); var $li = Mustache.render(\u0026#39;\u0026lt;li\u0026gt;\u0026lt;p\u0026gt;{{text}}\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;, {text: \u0026#39;hoge\u0026#39;}); $ul.append($li); 1 2 3 4 5 6 7 8 9 10 11 { list: [{ text: \u0026#39;hoge1\u0026#39; }, { text: \u0026#39;hoge2\u0026#39; }, { text: \u0026#39;hoge3\u0026#39; }, { text: \u0026#39;hoge4\u0026#39; }] } 1 2 3 4 5 6 {{#list}} \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;p\u0026gt;{{text}}\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{/list}} {{^list}}\u0026lt;p\u0026gt;値はありません\u0026lt;/p\u0026gt;{{/list}} 1 2 3 events.forEach(function(value){ $html.append(Mustache.render(template, value)); }); 1 2 3 4 Oboe(url) .node(\u0026#39;events.*\u0026#39;, function(value){ $html.append(Mustache.render(template, value)); }); ","date":"2014-06-17T01:05:12+09:00","permalink":"https://www.nqou.net/2014/06/17/010512/","title":"Zusaarのページを更新しました"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 sub startup { my $app = shift; $app-\u0026gt;log-\u0026gt;format(sub { my ($time, $level, @lines) = @_; my $time_string = localtime($time); my @caller = caller(4); my $caller = join \u0026#39; \u0026#39;, $caller[0], $caller[2]; return \u0026#34;[$time_string] [$level] [$caller] @lines\\n\u0026#34;; }); my $r = $app-\u0026gt;routes; $r-\u0026gt;get(\u0026#39;/\u0026#39;)-\u0026gt;to(\u0026#39;index#start\u0026#39;); } ","date":"2014-06-17T00:28:48+09:00","permalink":"https://www.nqou.net/2014/06/17/002848/","title":"Mojoliciousでログの書式を変更する"},{"content":" 1 2 3 4 5 6 7 sub startup { my $app = shift; $app-\u0026gt;renderer-\u0026gt;default_format(\u0026#39;json\u0026#39;); my $r = $app-\u0026gt;routes; $r = $r-\u0026gt;under(\u0026#39;/api/v1\u0026#39;); $r-\u0026gt;get(\u0026#39;/images\u0026#39;)-\u0026gt;to(\u0026#39;images#get\u0026#39;); } ","date":"2014-06-16T00:45:53+09:00","permalink":"https://www.nqou.net/2014/06/16/004553/","title":"OwlCarouselを使うと簡単にカルーセルが実装できた"},{"content":" ","date":"2014-06-07T07:36:58+09:00","permalink":"https://www.nqou.net/2014/06/07/073658/","title":"近頃気になっているCSSフレームワーク"},{"content":" ","date":"2014-06-06T07:21:33+09:00","permalink":"https://www.nqou.net/2014/06/06/072133/","title":"似たようなものばかりブクマしている"},{"content":" ","date":"2014-06-05T07:51:52+09:00","permalink":"https://www.nqou.net/2014/06/05/075152/","title":"下書きが多くなりすぎた"},{"content":" ","date":"2014-06-04T22:52:14+09:00","permalink":"https://www.nqou.net/2014/06/04/225214/","title":"Oboe.jsのサンプルを作った"},{"content":" 1 2 3 4 oboe(\u0026#39;http://registry.gulpjs.com/_search?fields=name,description\u0026amp;q=keywords:gulpplugin,gulpfriendly\u0026amp;size=10\u0026amp;start=0\u0026#39;) .node(\u0026#39;{name description}\u0026#39;, function(args){ console.log(\u0026#39;name, description:\u0026#39;, args.name, args.description); }); ","date":"2014-05-31T10:38:29+09:00","permalink":"https://www.nqou.net/2014/05/31/103829/","title":"JSONをストリーム受信できるOboe.jsがスゴイ"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 (function($, window, document, undefined){ \u0026#39;use strict\u0026#39;; var console, modules, vars, setVars = function(){ console = window.console; window.modules = modules = window.modules || {}; window.vars = vars = window.vars || {}; }, defined = function(args){ return args !== undefined; }, exec = function(controller, action, $el){ var func = modules[controller][action]; if (defined(func)) { func($el); } else { console.error(\u0026#39;function not defined. arguments:\u0026#39;, arguments); } }, execByElement = function(el, separator){ var sep = defined(separator) ? separator : \u0026#39;:\u0026#39;, $el = $(el), args = $el.data(\u0026#39;run\u0026#39;).split(sep); args.push($el); exec.apply(null, args); }, autoExec = function(el){ execByElement(el); }, clickExec = function(e){ execByElement(e.target); }, onDocumentLoaded = function(e){ console.debug(\u0026#39;onDocumentLoaded e:\u0026#39;, e); $(\u0026#39;.js-click-exec\u0026#39;).on(\u0026#39;click\u0026#39;, clickExec); $(\u0026#39;.js-auto-exec\u0026#39;).forEach(autoExec); $(\u0026#39;.js-vars\u0026#39;).forEach(function(el){ $.extend(vars, $(el).data()); }); console.debug(\u0026#39;vars:\u0026#39;, vars); }, onWindowLoaded = function(e){ console.debug(\u0026#39;onWindowLoaded e:\u0026#39;, e); console.debug(\u0026#39;window.modules:\u0026#39;, window.modules); console.debug(\u0026#39;window.vars:\u0026#39;, window.vars); }, showConsole = function($el){ console.debug(\u0026#39;showConsole $el:\u0026#39;, $el); var args = $el.data(); console.debug(\u0026#39;args:\u0026#39;, args); }, init = function(){ setVars(); modules.main = { thanks: showConsole, fine: showConsole }; $(document).on(\u0026#39;DOMContentLoaded\u0026#39;, onDocumentLoaded); $(window).on(\u0026#39;load\u0026#39;, onWindowLoaded); }; init(); })(window.jBone, window, document); 1 2 3 4 5 6 \u0026lt;button class=\u0026#34;js-click-exec\u0026#34; data-run=\u0026#34;main:fine\u0026#34;\u0026gt;main:fine\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;js-click-exec\u0026#34; data-run=\u0026#34;main:thanks\u0026#34; data-thanks=\u0026#34;bye\u0026#34;\u0026gt;main:thanks\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;js-vars\u0026#34; data-hoge=\u0026#34;hoge\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;js-auto-exec\u0026#34; data-run=\u0026#34;main:fine\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;js-vars\u0026#34; data-huge=\u0026#34;huge\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;js-vars\u0026#34; data-hige=\u0026#34;hige\u0026#34; data-hage=\u0026#34;hage\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; ","date":"2014-05-31T01:07:15+09:00","permalink":"https://www.nqou.net/2014/05/31/010715/","title":"jQueryでいいじゃないですか"},{"content":" 1 gzip_static on; 1 npm install -g grunt-contrib-compress 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 compress: { all: { options: { mode: \u0026#39;gzip\u0026#39;, level: 9 }, files: [{ expand: true, cwd: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, dest: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, src: [\u0026#39;**/*.js\u0026#39;], ext: \u0026#39;.js.gz\u0026#39;, extDot: \u0026#39;last\u0026#39; },{ expand: true, cwd: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, dest: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, src: [\u0026#39;**/*.css\u0026#39;], ext: \u0026#39;.css.gz\u0026#39;, extDot: \u0026#39;last\u0026#39; },{ expand: true, cwd: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, dest: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, src: [\u0026#39;**/*.html\u0026#39;], ext: \u0026#39;.html.gz\u0026#39;, extDot: \u0026#39;last\u0026#39; }] } }, 1 2 3 4 5 grunt.registerTask(\u0026#39;deploy\u0026#39;, [ \u0026#39;build\u0026#39;, \u0026#39;compress:all\u0026#39;, \u0026#39;rsync:prod\u0026#39; ]); ","date":"2014-05-29T07:11:16+09:00","permalink":"https://www.nqou.net/2014/05/29/071116/","title":"grunt-contrib-compress（とnginx）でトラフィックを軽くしよう"},{"content":" 1 npm WARN deprecated grunt-bower-install@1.6.0: use grunt-wiredep instead 1 2 npm uninstall -D grunt-bower-install npm install -D grunt-wiredep 1 Warning: Task \u0026#34;wiredep\u0026#34; failed. Use --force to continue. 1 2 3 4 5 6 wiredep: { app: { src: [\u0026#39;\u0026lt;%= config.app %\u0026gt;/index.html\u0026#39;], exclude: [] } }, ","date":"2014-05-28T00:25:21+09:00","permalink":"https://www.nqou.net/2014/05/28/002521/","title":"grunt-bower-installの代わりにgrunt-wiredepを使ってみた"},{"content":" 1 2 3 4 5 6 \u0026lt;div class=\u0026#34;jumbotron fade in\u0026#34;\u0026gt; \u0026lt;button data-dismiss=\u0026#34;alert\u0026#34;\u0026gt;\u0026amp;times;\u0026lt;/button\u0026gt; \u0026lt;h1\u0026gt;\u0026#39;Allo, \u0026#39;Allo!\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt;Always a pleasure scaffolding your apps.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a class=\u0026#34;btn btn-lg btn-success\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Splendid! \u0026lt;span class=\u0026#34;glyphicon glyphicon-ok\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ","date":"2014-05-24T01:22:14+09:00","permalink":"https://www.nqou.net/2014/05/24/012214/","title":"bootstrapを使っているならTwitter Bootstrap Notificationsも良いね"},{"content":" 1 var now = moment(); 1 var date = moment.unix(1318781876); 1 2 now.format(); // =\u0026gt; 2014-05-22T16:53:16+09:00 date.format(\u0026#39;YYYY/MM/DD\u0026#39;); // =\u0026gt; 2011/10/17 1 date.fromNow(); // =\u0026gt; 3 years ago 1 2 3 4 5 6 7 var now = moment(); console.debug(\u0026#39;now:\u0026#39;, now.format()); var date = moment.unix(1318781876); console.debug(\u0026#39;date:\u0026#39;, date.format(\u0026#39;YYYY/MM/DD\u0026#39;)); console.debug(\u0026#39;fromNow:\u0026#39;, date.fromNow()); 1 2 3 4 yo webapp bower install -S momentjs grunt bowerInstall grunt serve ","date":"2014-05-22T17:12:13+09:00","permalink":"https://www.nqou.net/2014/05/22/171213/","title":"JavaScriptで時間を扱うならMoment.js"},{"content":" ","date":"2014-05-22T10:43:26+09:00","permalink":"https://www.nqou.net/2014/05/22/104326/","title":"デスクトップ通知も簡単にできるpnotifyがスゴイ"},{"content":" ","date":"2014-05-22T00:49:34+09:00","permalink":"https://www.nqou.net/2014/05/22/004934/","title":"サンプルページが秀逸なお知らせ系ライブラリnotifyjs"},{"content":" ","date":"2014-05-22T00:28:34+09:00","permalink":"https://www.nqou.net/2014/05/22/002834/","title":"たったこれだけでcss gridができるの？"},{"content":" ","date":"2014-05-21T01:51:52+09:00","permalink":"https://www.nqou.net/2014/05/21/015152/","title":"nanobar.jsのサンプルページを作ってみた"},{"content":" ","date":"2014-05-20T23:33:41+09:00","permalink":"https://www.nqou.net/2014/05/20/233341/","title":"最近モバイルでよく見る感じのプログレスバーが超簡単に実装できるnanobar.jsが便利"},{"content":" ","date":"2014-05-18T23:14:36+09:00","permalink":"https://www.nqou.net/2014/05/18/231436/","title":"諦めが肝心"},{"content":" 1 2 3 4 5 6 7 dyld: lazy symbol binding failed: Symbol not found: ___strlcpy_chk Referenced from: /usr/local/git/bin/git Expected in: /usr/lib/libSystem.B.dylib dyld: Symbol not found: ___strlcpy_chk Referenced from: /usr/local/git/bin/git Expected in: /usr/lib/libSystem.B.dylib ","date":"2014-05-18T01:42:20+09:00","permalink":"https://www.nqou.net/2014/05/18/014220/","title":"2014年度 #Perl入学式 in大阪 第一回をサポートしてきました"},{"content":" 1 2 3 4 5 6 7 var router = { hello: function(req){ console.debug(\u0026#39;req:\u0026#39;, req); alert(\u0026#39;Hello Grapnel!\u0026#39;); } }; Grapnel.listen(router); 1 \u0026lt;a href=\u0026#34;#hello\u0026#34;\u0026gt;Hello Grapnel!\u0026lt;/a\u0026gt; ","date":"2014-05-16T23:14:31+09:00","permalink":"https://www.nqou.net/2014/05/16/231431/","title":"jGrowlのサンプルページを作ってみた"},{"content":" ","date":"2014-05-16T22:47:52+09:00","permalink":"https://www.nqou.net/2014/05/16/224752/","title":"小さくても秀逸なライブラリが沢山発見できるMicrojsにはとてもお世話になっています"},{"content":" ","date":"2014-05-16T22:42:49+09:00","permalink":"https://www.nqou.net/2014/05/16/224249/","title":"Bowerはウェブでの検索も簡単で格好良くて速い"},{"content":" ","date":"2014-05-16T07:16:28+09:00","permalink":"https://www.nqou.net/2014/05/16/071628/","title":"機能もスゴイけど見た目が凄すぎるparallax.jsのページに度肝を抜かれた"},{"content":" ","date":"2014-05-16T02:01:43+09:00","permalink":"https://www.nqou.net/2014/05/16/020143/","title":"CSSフレームワーク検索の決定版！ Plenty of Frameworks"},{"content":" ","date":"2014-05-15T08:01:07+09:00","permalink":"https://www.nqou.net/2014/05/15/080107/","title":"yeoman（webapp限定）はページ（HTMLファイル）を追加するのが面倒だよ"},{"content":" ","date":"2014-05-14T23:14:36+09:00","permalink":"https://www.nqou.net/2014/05/14/231436/","title":"jQueryMobileはiframeと相性が悪い"},{"content":" ","date":"2014-05-12T07:46:04+09:00","permalink":"https://www.nqou.net/2014/05/12/074604/","title":"nqou.netをバージョンアップ"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 useminPrepare: { options: { dest: \u0026#39;\u0026lt;%= config.dist %\u0026gt;\u0026#39;, flow: { steps: { js: [\u0026#39;concat\u0026#39;, \u0026#39;uglifyjs\u0026#39;], css: [\u0026#39;concat\u0026#39;, \u0026#39;cssmin\u0026#39;] }, post: { css: [{ name: \u0026#39;concat\u0026#39;, createConfig: function(context, block){ var generated = context.options.generated; var obj = {}; var uniq = generated.files.filter(function(x){ var flag = obj[x.dest]; obj[x.dest] = true; return !flag; }); generated.files = uniq; } },{ name: \u0026#39;cssmin\u0026#39;, createConfig: function(context, block){ var generated = context.options.generated; var obj = {}; var uniq = generated.files.filter(function(x){ var flag = obj[x.dest]; obj[x.dest] = true; return !flag; }); generated.files = uniq; } }] } } }, html: \u0026#39;\u0026lt;%= config.app %\u0026gt;/*.html\u0026#39; }, 1 html: \u0026#39;\u0026lt;%= config.app %\u0026gt;/usemin.html\u0026#39; ","date":"2014-05-12T00:13:05+09:00","permalink":"https://www.nqou.net/2014/05/12/001305/","title":"grunt-useminでファイルの重複処理が気になる年頃"},{"content":" ","date":"2014-05-04T05:02:02+09:00","permalink":"https://www.nqou.net/2014/05/04/050202/","title":"【復刻版】Blackbird.jsを使ってみた"},{"content":" 1 2 3 bower install -S loglevel npm install -D grunt-remove-logging grunt bowerInstall 1 2 3 4 5 6 7 8 9 removelogging: { options: { namespace: [\u0026#39;log\u0026#39;], methods: [\u0026#39;setLevel\u0026#39;, \u0026#39;trace\u0026#39;, \u0026#39;debug\u0026#39;] }, dist: { src: \u0026#34;.tmp/concat/scripts/*.js\u0026#34; } }, 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 grunt.registerTask(\u0026#39;build\u0026#39;, [ \u0026#39;clean:dist\u0026#39;, \u0026#39;useminPrepare\u0026#39;, \u0026#39;concurrent:dist\u0026#39;, \u0026#39;autoprefixer\u0026#39;, \u0026#39;concat\u0026#39;, \u0026#39;cssmin\u0026#39;, \u0026#39;removelogging\u0026#39;, \u0026#39;uglify\u0026#39;, \u0026#39;copy:dist\u0026#39;, \u0026#39;replace\u0026#39;, \u0026#39;modernizr\u0026#39;, \u0026#39;rev\u0026#39;, \u0026#39;usemin\u0026#39;, \u0026#39;htmlmin\u0026#39; ]); ","date":"2014-04-30T02:25:34+09:00","permalink":"https://www.nqou.net/2014/04/30/022534/","title":"buildした時に、不要なデバッグ出力を無くすgruntプラグイン"},{"content":" 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env perl use utf8; use 5.012; use JSON::XS qw(decode_json); use Path::Tiny qw(path); my $json = decode_json(path(\u0026#39;package.json\u0026#39;)-\u0026gt;slurp); my $modules = join(\u0026#39; \u0026#39;, keys $json-\u0026gt;{devDependencies}); system(qq{npm install -D $modules}); ","date":"2014-04-29T22:11:24+09:00","permalink":"https://www.nqou.net/2014/04/29/221124/","title":"開発時用のNodeモジュールをPerlでアップデートする"},{"content":" 1 2 3 4 5 6 7 8 9 10 replace: { siteInformation: { src: [\u0026#39;\u0026lt;%= config.dist %\u0026gt;/*.html\u0026#39;], dest: \u0026#39;\u0026lt;%= config.dist %\u0026gt;/\u0026#39;, replacements: [{ from: \u0026#39;\\{\\{pkg.version\\}\\}\u0026#39;, to: \u0026#39;v\u0026lt;%= pkg.version %\u0026gt;\u0026#39; }] } }, ","date":"2014-04-29T04:00:29+09:00","permalink":"https://www.nqou.net/2014/04/29/040029/","title":"grunt-text-replaceを使ってバージョンを表記するようにした"},{"content":" 1 grunt release ","date":"2014-04-28T03:40:22+09:00","permalink":"https://www.nqou.net/2014/04/28/034022/","title":"ウェブサイトもバージョン管理の時代"},{"content":" 1 npm install -D grunt-google-cdn google-cdn-data 1 2 3 4 5 6 7 8 cdnify: { options: { cdn: require(\u0026#39;google-cdn-data\u0026#39;) }, dist: { html: [\u0026#39;app/*.html\u0026#39;] } }, 1 grunt cdnify 1 grunt bowerInstall ","date":"2014-04-26T15:19:55+09:00","permalink":"https://www.nqou.net/2014/04/26/151955/","title":"grunt-google-cdnを使ってやると思ってた"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 (function($, global, undefined){ \u0026#39;use strict\u0026#39;; var lscache, Mustache, processing = {}, generateCacheKey = function(path){ return \u0026#39;fetched:\u0026#39; + path; }, fetchTemplate = function(path){ console.debug(\u0026#39;fetchTemplate\u0026#39;); var key = generateCacheKey(path); $.get(path, function(template){ console.debug(\u0026#39;run $.get\u0026#39;); lscache.set(key, template, 1); delete processing[key]; $(global).triggerHandler(key); // fetch完了イベントを発行 }); }, renderOnEvent = function(e){ console.debug(\u0026#39;renderOnEvent\u0026#39;); var args = Array.prototype.slice.apply(e.data); render.apply(this, args); }, render = function(path, args, cb){ console.debug(\u0026#39;render\u0026#39;); var key = generateCacheKey(path); var template = lscache.get(key); if (template) { return cb(Mustache.render(template, args)); } else { $(global).one(key, arguments, renderOnEvent);// fetch完了時のイベントを受信した時にもう一度実行する if (!processing[key]) { processing[key] = true; fetchTemplate(path);// keyになるfetchをしていない場合はfetchする } } }, setVars = function(){ // localize lscache = global.lscache || console.error(\u0026#39;not ready `lscache.js`. hint : `bower install lscache`.\u0026#39;); Mustache = global.Mustache || console.error(\u0026#39;not ready `mustache.js`. hint : `bower install mustache`.\u0026#39;); }, init = function(){ setVars(); return { \u0026#39;render\u0026#39;: render }; }; global.templates = init(); }(jQuery, this)); 1 2 3 4 5 // コールバックの場合 templates.render(\u0026#39;templates/sns.mst\u0026#39;, fbObj, function(content){ $this.append(content) }); // jQueryオブジェクトの場合は、引数の順序はこんな感じ？メソッド名も変えておかないとねぇ templates.renderTo($this, \u0026#39;templates/sns.mst\u0026#39;, fbObj); 1 $.templates(\u0026#39;templates/sns.mst\u0026#39;, fbObj).appendTo($this); ","date":"2014-04-26T01:11:10+09:00","permalink":"https://www.nqou.net/2014/04/26/011110/","title":"イベント駆動プログラミングはGOTO文を使っている気分になる"},{"content":" 1 2 3 4 5 use List::Util qw(sum); my $array = [1, 2, 3, 4, 5]; sub func { print sum(@_); } func(@$array); # ここで$arrayを展開している 1 2 3 4 var array = [1, 2, 3, 4, 5]; var func = function(a, b, c, d, e){ alert(a + b + c + d + e); }; func.apply(this, array); // 配列をそのまま渡しても動くという謎仕様 1 2 3 4 5 // 非同期通信 $.get(url, function(contents){ console.debug(\u0026#39;contents:\u0026#39;, contents); /* ゴニョゴニョ */ }); 1 var contents = getContentsByAjax(url); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026#39;use strict\u0026#39;; jQuery(function($, undefined){ var eventHoge = function(e){ var args = Array.prototype.slice.apply(e.data); hoge.apply(this, args); // hogeを呼び出し }, hoge = function(foo, bar){ console.debug(\u0026#39;hoge arguments:\u0026#39;, arguments); }, init = function(foo, bar){ console.debug(\u0026#39;init arguments:\u0026#39;, arguments); hoge(foo, bar); // hogeを呼び出し $(window).one(\u0026#39;hoge\u0026#39;, arguments, eventHoge); $(window).triggerHandler(\u0026#39;hoge\u0026#39;); }; init(\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;); }); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026#39;use strict\u0026#39;; jQuery(function($, undefined){ var DEBUG = 1, lscache, Mustache, $runButtons, generateKeyFromPath = function(path){ return \u0026#39;fetched:\u0026#39; + path; }, fetchTemplate = function(path, $cb){ var key = generateKeyFromPath(path); $.get(path, function(template){ console.debug(\u0026#39;run $.get\u0026#39;); lscache.set(key, template, 1); return $cb.fire(template); }); }, getTemplate = function(path, $cb){ var key = generateKeyFromPath(path); var template = lscache.get(key); if (template) { return $cb.fire(template); } else { fetchTemplate(path, $cb); } }, render = function(targetId, targetName){ var obj = { id: targetId, name: targetName }; var $cb = $.Callbacks(); $cb.add(function(template){ var rendered = Mustache.render(template, obj); $(\u0026#39;#\u0026#39; + targetId).html(rendered); }); getTemplate(\u0026#39;templates/init.mst\u0026#39;, $cb); }, changeName = function(e){ var $this = $(e.currentTarget); render($this.data(\u0026#39;id\u0026#39;), $this.html()); }, setVars = function(){ lscache = window.lscache; Mustache = window.Mustache; $runButtons = $(\u0026#39;button[data-run=changeName]\u0026#39;); }, initHandlers = function(){ $runButtons.on(\u0026#39;click\u0026#39;, changeName); }, init = function(){ setVars(); initHandlers(); if (DEBUG) { lscache.flush(); } }; init(); }); ","date":"2014-04-25T01:26:45+09:00","permalink":"https://www.nqou.net/2014/04/25/012645/","title":"JavaScriptで、配列を展開してメソッドに渡す方法"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 use Mojolicious::Lite; use Text::LTSV; get \u0026#39;/\u0026#39; =\u0026gt; sub { my $self = shift; my $p = Text::LTSV-\u0026gt;new; my $datafile = \u0026#39;hoge.ltsv\u0026#39;; my $data = $p-\u0026gt;parse_file($datafile) or die; $self-\u0026gt;stash(data =\u0026gt; $data); $self-\u0026gt;render(\u0026#39;index\u0026#39;); }; app-\u0026gt;start; __DATA__ @@ index.html.ep % for my $line (@{$data}) { \u0026lt;a href=\u0026#34;\u0026lt;%= $line-\u0026gt;{url} %\u0026gt;\u0026#34;\u0026gt;\u0026lt;%= $line-\u0026gt;{url} %\u0026gt;\u0026lt;/a\u0026gt; % } ","date":"2014-04-09T22:48:17+09:00","permalink":"https://www.nqou.net/2014/04/09/224817/","title":"Mojoliciousでうっかりハマった件"},{"content":" ","date":"2014-04-05T16:21:59+09:00","permalink":"https://www.nqou.net/2014/04/05/162159/","title":"Lucidchartを使ってみたらなかなか良かった件"},{"content":" ","date":"2014-04-03T08:13:22+09:00","permalink":"https://www.nqou.net/2014/04/03/081322/","title":"XMindの使い方"},{"content":" ","date":"2014-03-25T23:40:54+09:00","permalink":"https://www.nqou.net/2014/03/25/234054/","title":"bowerっていいわぁ"},{"content":" 1 2 3 4 # インストールできるバージョンを確認する ndenv install -l # 最新の安定版（2014-03-20時点）をインストールする ndenv install v0.10.26 1 2 3 4 # yeoman一式をインストール npm install -g yo grunt-cli bower # ついでに代表的なジェネレータをインストール npm install -g generator-webapp 1 2 3 4 # 適当にディレクトリを作ってジェネレータを起動 mkdir /path/to/website cd /path/to/website yo webapp 1 2 3 # テスト用サーバを起動 cd /path/to/website grunt serve 1 grunt 1 grunt build 1 2 # 公開用のコンテンツを確認するサーバを起動 grunt serve:dist 1 2 # grunt-rsyncをインストール npm install grunt-rsync --save-dev 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 rsync: { options: { args: [\u0026#39;--verbose\u0026#39;], exclude: [\u0026#39;.git*\u0026#39;, \u0026#39;*.scss\u0026#39;, \u0026#39;node_modules\u0026#39;], recursive: true }, prod: { options: { src: \u0026#39;\u0026lt;%= config.dist %\u0026gt;/\u0026#39;, dest: \u0026#39;/home/user/www/website\u0026#39;, host: \u0026#39;user@server.com\u0026#39;, syncDestIgnoreExcl: true } } } ","date":"2014-03-21T17:19:31+09:00","permalink":"https://www.nqou.net/2014/03/21/171931/","title":"Yeoman（yo + grunt + bower）を始めてみてわかったこと"},{"content":"（追記）\n最近はこの記事のとおりにしても動作しないようです。新しい記事を書いています。\nCUIモードで起動するには何をどうすればよいのか （追記ここまで）\nおはようございます。 若林（@nqounet）です。\nVirtualBoxとVagrantで快適な仮想環境を満喫しています。\n普段はVagrantを経由するのであまり関係ないのですが、LiveCD（DVD）から入れたものも時々使うことがあり、その場合に、多少でもメモリの節約になるかなと思って、CUIで起動するようにしたいと思って調べたので書き残しておきます。\n…と言っても、改めて書くほどのことはないのでリンクを。\n以下、概要です。\n起動方法を変更する場合は「/etc/default/grub」のGRUB_CMDLINE_LINUX_DEFAULTの項目を変更します。\n1 $ sudo vi /etc/default/grub おそらく「quiet splash」となっているのを「text」に変更する\n保存したあとgrubを更新する必要がある\n1 $ sudo update-grub Ctrl+Alt+F1、\u0026hellip; Ctrl+Alt+F6を入力するとttyが起動できる。\nGUIに戻る場合は「Alt+F7」とする。\nこういう風に切り替えができたことに驚きました。\nこれは、CUIで起動しなくても使える方法です。\n時々は便利だと思います。\n","date":"2014-03-19T08:09:44+09:00","permalink":"https://www.nqou.net/2014/03/19/080944/","title":"ubuntuをCUIで起動する"},{"content":" 1 2 $ sudo yum -y update $ sudo yum -y install zabbix zabbix-agent zabbix-server zabbix-server-mysql zabbix-web zabbix-web-mysql 1 2 3 # rpm -ivh http://repo.zabbix.com/zabbix/2.2/rhel/6/x86_64/zabbix-release-2.2-1.el6.noarch.rpm # yum install zabbix-server-mysql zabbix-web-mysql # yum install zabbix-agent ","date":"2014-03-18T01:23:18+09:00","permalink":"https://www.nqou.net/2014/03/18/012318/","title":"zabbixを動かしてみた"},{"content":" 1 # chown nginx.nginx /etc/zabbix/web ","date":"2014-03-16T02:17:10+09:00","permalink":"https://www.nqou.net/2014/03/16/021710/","title":"zabbixをyumでupdateした時に気をつけること"},{"content":" ","date":"2014-03-14T00:21:11+09:00","permalink":"https://www.nqou.net/2014/03/14/002111/","title":"そういえば、nqou.netもリニューアルしましたよ"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #!/usr/bin/env perl use utf8; use 5.012; use Encode; package Human; use Mojo::Base \u0026#39;Mojo::EventEmitter\u0026#39;; sub walk { my $self = shift; $self-\u0026gt;emit(message =\u0026gt; \u0026#39;歩いている。\u0026#39;); $self-\u0026gt;emit(\u0026#39;walk\u0026#39;); return; } sub get_poison { my $self = shift; $self-\u0026gt;emit(message =\u0026gt; \u0026#39;毒を受けた！\u0026#39;); $self-\u0026gt;on(walk =\u0026gt; sub { $self-\u0026gt;emit(message =\u0026gt; \u0026#34;毒のダメージ！\u0026#34;); }); } sub cure_poison { my $self = shift; $self-\u0026gt;emit(message =\u0026gt; \u0026#39;毒が治った！\u0026#39;); $self-\u0026gt;unsubscribe(\u0026#39;walk\u0026#39;); } package main; my $man = Human-\u0026gt;new; $man-\u0026gt;on(message =\u0026gt; sub { say Encode::encode_utf8($_[1]); }); $man-\u0026gt;walk for 1 ..2; $man-\u0026gt;get_poison; $man-\u0026gt;walk for 1 .. 2; $man-\u0026gt;cure_poison; $man-\u0026gt;walk for 1 .. 2; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #!/usr/bin/env perl use utf8; use 5.012; use Encode; package Logger; use Mojo::Base -base; sub log { shift; say Encode::encode_utf8(join \u0026#34;\\n\u0026#34;, @_); } package Human; use Mojo::Base -base; has is_poison =\u0026gt; 0; sub walk { my $self = shift; my @results = (\u0026#39;歩いている。\u0026#39;); if ($self-\u0026gt;is_poison) { push @results, \u0026#39;毒のダメージ！\u0026#39;; } return @results; } sub get_poison { shift-\u0026gt;is_poison(1); return \u0026#39;毒を受けた！\u0026#39;; } sub cure_poison { shift-\u0026gt;is_poison(0); return \u0026#39;毒が治った！\u0026#39;; } package main; my $man = Human-\u0026gt;new; my $logger = Logger-\u0026gt;new; $logger-\u0026gt;log($man-\u0026gt;walk) for 1 .. 2; $logger-\u0026gt;log($man-\u0026gt;get_poison); $logger-\u0026gt;log($man-\u0026gt;walk) for 1 .. 2; $logger-\u0026gt;log($man-\u0026gt;cure_poison); $logger-\u0026gt;log($man-\u0026gt;walk) for 1 .. 2; ","date":"2014-03-12T01:14:21+09:00","permalink":"https://www.nqou.net/2014/03/12/011421/","title":"Mojoliciousでイベント駆動型プログラミングしてみた（その2）"},{"content":" ","date":"2014-03-08T18:15:44+09:00","permalink":"https://www.nqou.net/2014/03/08/181544/","title":"ファンタジーと絵画"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package Cat; use Mojo::Base \u0026#39;Mojo::EventEmitter\u0026#39;; # Emit events sub poke { my $self = shift; $self-\u0026gt;emit(roar =\u0026gt; 3); } package main; # Subscribe to events my $tiger = Cat-\u0026gt;new; $tiger-\u0026gt;on(roar =\u0026gt; sub { my ($tiger, $times) = @_; say \u0026#39;RAWR!\u0026#39; for 1 .. $times; }); $tiger-\u0026gt;poke; 1 \u0026lt;a href=\u0026#34;#\u0026#34; onclick=\u0026#34;alert(\u0026#39;こんにちは\u0026#39;)\u0026#34;\u0026gt;クリックして！\u0026lt;/a\u0026gt; 1 2 3 $(\u0026#39;#run-button\u0026#39;).on(\u0026#39;click\u0026#39;, function(e){ /* id=\u0026#34;run-button\u0026#34;がクリックされると、プログラムのこの部分が実行される */ }); 1 $(\u0026#39;#run-button\u0026#39;).trigger(\u0026#39;click\u0026#39;); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package Cat; use Mojo::Base -base; has roar =\u0026gt; \u0026#34;MEOW\u0026#34;; has times =\u0026gt; 2; sub poke { my $self = shift; say $self-\u0026gt;roar for 1 .. $self-\u0026gt;times; } package Tiger; use Mojo::Base \u0026#39;Cat\u0026#39;; has roar =\u0026gt; \u0026#34;RAWR!\u0026#34;; has times =\u0026gt; 3; package main; my $tiger = Tiger-\u0026gt;new; $tiger-\u0026gt;poke; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package Cat; use Mojo::Base -base; has roar =\u0026gt; \u0026#34;MEOW\u0026#34;; has times =\u0026gt; 2; sub poke { my $self = shift; say $self-\u0026gt;roar for 1 .. $self-\u0026gt;times; } package main; my $tiger = Cat-\u0026gt;new; $tiger-\u0026gt;roar(\u0026#39;RAWR!\u0026#39;)-\u0026gt;times(3); $tiger-\u0026gt;poke; ","date":"2014-03-08T17:09:03+09:00","permalink":"https://www.nqou.net/2014/03/08/170903/","title":"Mojoliciousでイベント駆動型プログラミングをやってみたが…"},{"content":" 1 2 3 4 5 ssh: connect to host github.com port 22: Bad file number fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 1 ssh -T -p 443 git@ssh.github.com 1 2 3 Host github.com Hostname ssh.github.com Port 443 1 ssh -T git@github.com ","date":"2014-03-07T16:04:11+09:00","permalink":"https://www.nqou.net/2014/03/07/160411/","title":"22番ポートが繋がらなくてもsshでgithubを使う方法"},{"content":" ","date":"2014-03-06T23:51:02+09:00","permalink":"https://www.nqou.net/2014/03/06/235102/","title":"Chromeでリロード時にキャッシュをクリアする"},{"content":" ","date":"2014-03-06T08:26:35+09:00","permalink":"https://www.nqou.net/2014/03/06/082635/","title":"各種サーバーをまとめました"},{"content":" ","date":"2014-03-03T23:02:13+09:00","permalink":"https://www.nqou.net/2014/03/03/230213/","title":"Voxがやっぱり良かった件"},{"content":"@nqounetです。\nここのところWordpressばかりいじっているような気がします。\nということで、今日はその関係のネタです。\n今回、ブログを引っ越すに際して、過去記事をインポートしようと思っていました。\nbloggerを使っていた前回で、すでに3つに点在していたので、一つに集めようと思いました。\n一番古いMT3時代の記事が、出力後のHTMLファイルしかなくて困っていたんですが、それを解決してくれるプラグインがありました。\nHTML Import 2です。\nこれは、HTMLファイルからスクレイピングしてインポートしてくれるので、必要な部分をタグで示してやればうまくインポートしてくれます。\nもともと機械的に出力したものなので、構造がしっかりしていて読み込みが簡単そうでした。\nただ、一番困ったのが時間です。\nファイルの更新時を取得する、という方法が示されていたのですが、さすがにそれは無理でした。\nで、なにか情報がないかと思ってソースを眺めていたら、コメントの中に更新時間のメタ情報（\u0026lt;dc:date\u0026gt;\u0026lt;/dc:date\u0026gt;）があったので、それを使うことにしました。\nこのプラグインはコメント部分は無視するのか、あるいは無効な文字があるのか\nスクリプトを書こうかと思ったのですが、1回しか使わないので、エディタを使っていくつか加工してからインポートしました。\n加工したのは以下のとおり。\nコメントを外す（開始タグ（\u0026lt;!--）のみを適当に置き換えました） \u0026lt;dc:date\u0026gt;の部分を\u0026lt;div id=\u0026quot;entry-date\u0026quot;\u0026gt;で読めるように置き換え moreを作るために、\u0026lt;/div\u0026gt;から\u0026lt;div class=\u0026quot;entry-more\u0026quot;\u0026gt;までのタグを削除 こうすることで、\u0026lt;div class=\u0026quot;entry-body\u0026quot;\u0026gt;を読み込むだけで綺麗にインポートできるようになりました。\n時間のかかる処理は控えめに インポートした記事数は全部で350弱だったと思いますが、さすがにHTTP越しでやるとブラウザが固まったようになります。\n返ってきたと思ったら真っ白な画面だったので、インポートできていないのかと思いましたが、確認するとちゃんと出来ていました。\nプラグインがどこまで可能なのかはわかりませんが、こういう処理の見せ方がもう少し丁寧に作りこまれるといいなぁ、と思いました。\n","date":"2014-03-02T23:46:54+09:00","permalink":"https://www.nqou.net/2014/03/02/234654/","title":"「HTML Import 2」は超便利でした"},{"content":" ","date":"2014-03-02T09:01:38+09:00","permalink":"https://www.nqou.net/2014/03/02/090138/","title":"子どもは考えるのが好き"},{"content":" ","date":"2014-03-01T02:25:24+09:00","permalink":"https://www.nqou.net/2014/03/01/022524/","title":"Internet Explorer11は入力したパスワードが見える"},{"content":" ","date":"2014-02-28T14:13:58+09:00","permalink":"https://www.nqou.net/2014/02/28/141358/","title":"ビットコイン「破綻すると思っていた」　麻生財務金融相：朝日新聞デジタル"},{"content":" ","date":"2014-02-28T13:27:34+09:00","permalink":"https://www.nqou.net/2014/02/28/132734/","title":"大気汚染を喉で感じました"},{"content":" もちろん、私達が開放される代わりにIDプロバイダ（OpenID Connectをサポートする企業などのこと）が負担する、という形にはなります。\n","date":"2014-02-27T14:10:19+09:00","permalink":"https://www.nqou.net/2014/02/27/141019/","title":"ユーザー認証の新しい規格が！"},{"content":" ","date":"2014-02-27T07:34:48+09:00","permalink":"https://www.nqou.net/2014/02/27/073448/","title":"ホームページをリニューアルしました"},{"content":" ","date":"2014-01-18T23:19:00+09:00","permalink":"https://www.nqou.net/2014/01/18/231900/","title":"QRコネクトは本当に便利ですよ"},{"content":"@nqounetです．\nMojoliciousでJSONを使う時は，renderメソッドにjsonを指定してやると変数をそのままJSONにして渡せるので簡単です．\n1 2 my $args = { a =\u0026gt; [1,2], b =\u0026gt; \u0026#39;c\u0026#39; }; $self-\u0026gt;render(json =\u0026gt; $args); しかし，この時に使用されるMojo::JSONはPurePerlなので，できればXSのモジュール（JSON::XS）を使って高速化したいですよね．\nついでなので，便利に使えるJSONも一緒に測ってみます．\nソースコードは最後に載せていますので適当にお使いください．\n1 2 3 4 5 6 7 8 # Benchmark: running json, mojo, xs for at least 3 CPU seconds... # json: 3.03104 wallclock secs ( 3.02 usr + 0.00 sys = 3.02 CPU) @ 173870.86/s (n=525090) # mojo: 3.19469 wallclock secs ( 3.17 usr + 0.00 sys = 3.17 CPU) @ 14308.83/s (n=45359) # xs: 3.16628 wallclock secs ( 3.15 usr + 0.00 sys = 3.15 CPU) @ 195861.27/s (n=616963) # Rate mojo json xs # mojo 14309/s -- -92% -93% # json 173871/s 1115% -- -11% # xs 195861/s 1269% 13% -- mojoはMojo::JSON，xsはJSON::XS，jsonは，JSONです．\nJSON::XSの方がMojo::JSONよりも10倍以上速いですね．\nJSONモジュールは，JSON::XSがあるとこれを使うのですが，若干差がありますね．\nインスタンスを作るときなどに多少のオーバーヘッドがあるのかもしれません．\nちなみに，インスタンスを再利用するとこんな感じの結果になりました．\n1 2 3 4 5 6 7 8 # Benchmark: running json, mojo, xs for at least 3 CPU seconds... # json: 3.18115 wallclock secs ( 3.16 usr + 0.00 sys = 3.16 CPU) @ 285812.66/s (n=903168) # mojo: 3.26202 wallclock secs ( 3.22 usr + 0.00 sys = 3.22 CPU) @ 14538.20/s (n=46813) # xs: 3.19833 wallclock secs ( 3.18 usr + 0.00 sys = 3.18 CPU) @ 309832.39/s (n=985267) # Rate mojo json xs # mojo 14538/s -- -95% -95% # json 285813/s 1866% -- -8% # xs 309832/s 2031% 8% -- …さらに差がつきましたね．\nここまで速いのであれば，使える環境なら使いたいですね．\n最近は更新がないのでどこまで互換性があるか心配ではありますが，少し使ってみた感じでは問題ありませんでした．\n使う時はいつもと同じようにpluginメソッドで呼び出すだけです．\n1 2 3 4 5 # Mojolicious::Lite plugin \u0026#39;JSON_XS\u0026#39;; # Mojolicious $app-\u0026gt;plugin(\u0026#39;JSON_XS\u0026#39;); 正直なところ，JSON部分だけが速くなってもあまり効果はない気がします．\nただし，とてつもなく大きなJSONをやりとりする機会があるなら使えると思います．\nハンドラーを書き換える方法はこちらをどうぞ．\n","date":"2014-01-18T17:15:00+09:00","permalink":"https://www.nqou.net/2014/01/18/171500/","title":"Mojolicious::Plugin::JSON_XSを書いた"},{"content":"@nqounetです．\nPerlでHTMLの正当性（validかどうか）を確認するのにHTML::Tidyを使ってみたという話をします．\n少なくとも今一番新しいバージョンでは，Alien::Tidypをいうモジュールを予めインストールしておくことで使えるようになります．\n依存情報が書かれていないためHTML::Tidyをインストールしても自動的にはインストールされません．\n試してみる方は以下の様な感じでインストールしてみてください．\n1 2 cpanm Alien::Tidyp cpanm HTML::Tidy 使い方は極々簡単．\n1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env perl use v5.12; use HTML::Tidy; my $tidy = HTML::Tidy-\u0026gt;new; $tidy-\u0026gt;parse( \u0026#39;hoge.html\u0026#39;, \u0026#39;hoge\u0026#39; ); foreach my $message ( $tidy-\u0026gt;messages ) { print $message-\u0026gt;as_string, \u0026#34;\\n\u0026#34;; } 結果はこんな感じになります．\n1 hoge.html (1:22) Warning: discarding unexpectedhoge.html (1:16) Warning: inserting missing \u0026#39;title\u0026#39; element HTMLの構造体を簡単にチェックできると良かったんですが…．\n実際にjQuery Mobileで作ったページを通してみると，\nのまえにがありません的なWarningが沢山あって戦々恐々としています．\nlistviewを作る時に，a要素の中にp要素を含んでいるのですが，その部分のことを警告されているようです．\nHTML5的にはa要素の中にp要素があっても問題ないのですが，以前はそうではなかったということで，その名残でしょうか．\n…とは言っても，Changesを見る限り，大きな変更点はなかったように思います．\nWebアプリを作る時に，それほどまじめにやらないのはHTMLのvalidationじゃないかなと思います．\n私は今までほとんどやったことがありませんでした．\nstaticなものであれば，W3CのHTML Validatorが使えますが，ログインしたり色々するのはこいつでは検証できません．\n便利なモジュールもあるんですけどね．\n…いや，すぐに分からなくても，少し調べればわかるのでHTMLのテストは必要性を感じなかったのです．\nというのも，昔はheaderファイルに開始タグを書いてfooterファイルに終了タグを書く，というような書き方もしていたのですが，いつの頃からかincludeするファイルごとにHTMLの構造を完結させるようになっていました．\nそのため，HTMLの構造が壊れても簡単に発見できました．\nしかし，過去の遺産というか負債というか，ちゃんとHTMLの構造を意識していないコードもあります．\nこの場合は，includeしているファイルを全部見ていく必要があるので面倒です．\nしかも，if文で，classやonclickの指定が違う部分を開始タグごと書いてあったり，条件によって開始タグがなくなるように書いていることもありました．\n我ながら酷いと思います．\n閉じタグを書くためのif文を見て泣けてきました．\nこういう部分は，後々を考えて書き直していきたいのですが，HTMLの構造体がどこでどう変わっているのかをソースレベルで追いかけるのは大変です．\nそこで，HTMLの構造のテストを追加することにしました．\nもう少しカジュアルにテストしたいですね…．\n","date":"2013-12-30T19:42:00+09:00","permalink":"https://www.nqou.net/2013/12/30/194200/","title":"HTMLの正当性を検査するのにHTML::Tidyを使ってみた"},{"content":"@nqounetです．\nこのSSHクライアントは惚れますね．\nホストの情報もちゃんと保存できるし，日本語の表示も問題ないし，フォントも簡単に変更できました．\n1つだけ気になったのは，公開鍵認証用の秘密鍵の扱いです．\n普段使っている，~/.ssh/id_rsaの鍵については，importしても，defaultの表示のままなのでちゃんと読み込めているのかよくわかりません．\nログインできるので読み込めているのは間違いないのですが，importする前もdefaultになっているのが気になります．\nいくつも鍵を登録すれば変化があるのかもしれませんが，そこまでは試していません．\nしかし，そんなことは些細な事です．\nMac版にない機能として，Windows版では「ウィンドウとして開く」こともできます．\nこうなると，普通にアプリです．\nほんとうに素晴らしいですね．\n","date":"2013-12-21T01:47:00+09:00","permalink":"https://www.nqou.net/2013/12/21/014700/","title":"Windowsでは定番のSSHクライアント"},{"content":" 「Google Chrome」ってなんでも出来ますね．\n","date":"2013-12-19T00:27:00+09:00","permalink":"https://www.nqou.net/2013/12/19/002700/","title":"Windowsに良さそうなSSHクライアントが！"},{"content":"@nqounetです．\nここのところ，MacでもリロードするのにF5を押したり（もちろん動きません）しています．\n変更したのはprintの部分で，encodeの処理を加えただけです．\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 use utf8; use strict; use warnings; use Test::More; use Encode; use Term::Encoding qw(term_encoding); my $charset = term_encoding; { no warnings \u0026#39;redefine\u0026#39;; sub Test::Builder::_print_to_fh { my( $self, $fh, @msgs ) = @_; # Prevent printing headers when only compiling. Mostly for when # tests are deparsed with B::Deparse return if $^C; my $msg = join \u0026#39;\u0026#39;, @msgs; my $indent = $self-\u0026gt;_indent; local( $\\, $\u0026#34;, $, ) = ( undef, \u0026#39; \u0026#39;, \u0026#39;\u0026#39; ); # Escape each line after the first with a # so we don\u0026#39;t # confuse Test::Harness. $msg =~ s{\\n(?!\\z)}{\\n$indent# }sg; # Stick a newline on the end if it needs it. $msg .= \u0026#34;\\n\u0026#34; unless $msg =~ /\\n\\z/; return print $fh $indent, encode($charset, $msg); } } ... # テストを書く いろいろ試しているうちにfind_encodingを消してしまったのすが，これだったらfind_encodingを使ったほうが速そうです．\n実際のスクリプトは，Test::Mojoを継承してゴニョゴニョしているものなので，この状態で動くかどうかはわかりません．\nいずれにしろ，プライベートな関数を再定義しているので行儀が良いわけではありません．\n意図的に出力する分については，以前の記事で文字化けを解消できたのですが，テストが失敗した時に自動的に出してくれる出力が文字化けのままでした．\nどうにかしたいな〜と思いながらTest::Moreのドキュメントを読んでいて，今更ですがWide character in printについて書いてあるのを発見しました．\nこれは良さそうです，ということで試したのですが，どうもうまく行きませんでした．\n1 2 3 4 my $builder = Test::More-\u0026gt;builder; binmode $builder-\u0026gt;output, \u0026#34;:encoding($charset)\u0026#34;; binmode $builder-\u0026gt;failure_output, \u0026#34;:encoding($charset)\u0026#34;; binmode $builder-\u0026gt;todo_output, \u0026#34;:encoding($charset)\u0026#34;; どこかで変なミスをしたのかもしれないのですが，cp932にマッピングされていない文字がある！，というふうに文字ごとに警告がでました．\n正確な文字コードは忘れましたが，すべての文字に何かがくっついていた感じです．\nもしかすると，変数をやめてcp932を直打ちしたかもしれませんが，結果は同じだったと思います．\nメモってなくて記憶で書いているのでアレですが．\n念のためBEGINを使ってみましたが，同じだったような気がします．\nメモってなくて（以下略\nそこにあったのが，Test::Builder::_print_to_fhでした．\n前後を見てみましたが，printしているのはここだけっぽいので，それじゃあって感じでencodeして出力するように再定義してみました．\n嫌なエラーも消え，文字化けも解消されました．\nめでたしめでたし．\nWindowsも内部的にはUTF-8を使ってるんじゃないんですかね？\n","date":"2013-12-13T01:02:00+09:00","permalink":"https://www.nqou.net/2013/12/13/010200/","title":"WindowsPowerShell+Test::Moreでテストの時の文字化けを解消する方法"},{"content":"@nqounetです．\nWindowsのHomeキーとEndキーが快適すぎて，Macで文字を打つのが辛いです．\nまたoptionキーとcommandキーを入れ替えようかと，考え中．\n今日はChromeのデベロッパーツールに感動した話です．\nデベロッパーツールのオプション（右下の歯車）を開いて「Overrides」の所で設定できる！\nデベロッパーツールを開くたびに有効になるようにしておくと便利ですね．\nChromeでユーザーを作って，そのユーザーでのアクセスはスマートフォン扱い，という風にして使っています．\nChromeのユーザーを増やす利点が最初はわからなかったのですが，まさに開発向けという感じです．\nさて，ユーザーエージェントの詐称，というと色々と悪い感じですが，結構需要はあると思います．\n拡張機能も色々とあったのですが，なんだかイマイチ感がありました．\nもうちょっと気の利いた感じのはないのかと思っていたら，Chromeの（デベロッパーツールの）標準機能にあるというではありませんか！\nなんということでしょう～．\nこれこれ，これです．こんな感じですよ．\nなんというか，さすが本体の機能は別格な感じがしますね．\n開発中は，ずっとこれを使っています．\nHTTPで何を送受信しているのかを確認するのは，Chromeの標準機能（デベロッパーツール）で十分でした．\n十分というより，状況が正しく把握できたので，より適切でした．\n最近は，既存のサービスのスマートフォン対応をしています．\nただ，残念ながら，既存のサービスについて，しっかりとした仕様書がありません．\n…まあ，よくある話ですね．\n仕方ないので，本来はソースコードからパラメータを読み取るのがふさわしいのですが，実際の通信から読み解いていこう，という考えに至りました．\nそこで，Chromeの拡張機能でhttpのヘッダ（送受信）を確認したり（HTTP Headers），通信のトレースをしたり（HTTP Trace），していたのですが，モバイル版でselectをmultipleにして複数選択した時に，最初の項目しかアプリケーションに渡っていない，という状況で躓いた．\n「HTTP Trace」で見ていると，PC版と同じ項目を送信しているのです．\nなので，何か特殊な仕様でもあるのかと思い既存システムを良く知る担当者に確認してみたのですが，フレームワークで自動的に値を取得しているだけで，そんな特殊な仕様ではありませんでした．\nそれで，責任者の方に訊いてみると，どれどれ…という感じで，デベロッパーツールのNetworkを開いて，POSTしているPATHを選択して，Headersを見ているではありませんか！\nリクエストもレスポンスもフォームデータも丸見えですよ．\n拡張機能なんて要らんかったんや．\nそこで比べてみると，PC版は複数の値をカンマで区切って連結させていたのでした．\n私が作っていた方は，jQueryMobileで作ったフォームそのままだったので，項目と値を複数回送っていました．\n「HTTP Trace」はその状態をわかりやすいように解釈して見せてくれていたのです．\n確かにわかりやすいですよ．\nしかし，まさかフォームの送信データが原因だったなんて．\nというか，フレームワークってそういう所には対応してないのか…．\nともかく，原因はわかったので，送信する前にデータを整えて，余分なデータは消して送信することにしました．\nめでたしめでたし．\nデベロッパーツールのResourcesのCookiesで全部丸見えですし，項目ごとに削除できます．\n全部消すのも簡単．\n選んで消すこともできる．\nこれ以上何が必要ですか？\n…まあ，さすがに編集は出来ないようなので，クッキーを編集する拡張機能は有用かもしれません．\n編集する場合は「Edit This Cookie」という拡張機能を使うと良さそうですね．\nブラウザはChromeだけで良いと思います．\n…まあ，Firefoxも使ってますよ．\n","date":"2013-12-06T08:30:00+09:00","permalink":"https://www.nqou.net/2013/12/06/083000/","title":"Chromeのデベロッパーツールが凄い"},{"content":" ここ数日，色々とWindowsのことをdisっている感じですが，気に入っている部分もあるんですよ．\nVimのようなエディタを使っていない限りは，行単位での選択はマウスを使うことが多くなります．\nそのような時に，homeキーで行頭へ飛んだり，endキーで行末へ飛ぶ，というショートカットは非常に手軽だったんですね．\n1 2 3 4 5 6 7 Windowsでの素敵なキー操作 home ：行頭 end ：行末 ctrl+home ：ファイルの先頭 ctrl+end ：ファイルの最後 ctrl+pageup ：タブの切替（左方向） ctrl+pagedown ：タブの切替（右方向） Macにも同じような機能はありますよ．\ncommandキー＋左で行頭，commandキー＋右で行末，commandキー＋上，下でそれぞれ先頭，最後に飛べますし，command＋option+左右でタブの切り替えもできます．\n1 2 3 4 5 6 7 Macでのイマイチなキー操作 command+左：行頭 command+右：行末 command+上：ファイルの先頭 command+下：ファイルの最後 command+option+左：タブの切替（左方向） command+option+右：タブの切替（右方向） …まあ，細かい話ですが，結局は慣れなんですよね．\n行削除にショートカットがあればそれを使えばよいし，そうでなくてもdeleteキーをずっと押し続けて消してもいい．\nもちろん，マウスで1行選択して削除すれば良いんですよ．\nそれでも，endキーで行末へ飛んで，shift+homeでその行を選ぶとか，homeで行頭へ飛んでshift+下で改行も含んで選ぶ，とか．\nついついそんな感じの操作をしています．\n久しぶり（2年半ぶり）にWindowsを長時間連続で触るのですが，homeとendを使ってる感が半端無いんですよね．\nhomeとendを使った操作感に懐かしさを感じてしまいます．とてもしっくりと来ます．\nさきほども，うっかりoption+sで「ß」を入力していました．\nほんとうに困ります．\n","date":"2013-11-30T02:17:00+09:00","permalink":"https://www.nqou.net/2013/11/30/021700/","title":"Windowsのここが良い，と思っているところ"},{"content":" 1 2 3 4 use Encode; use Term::Encoding qw(term_encoding); my $enc = Encode::find_encoding(term_encoding); print $enc-\u0026gt;encode(\u0026#34;ハローワールド！\u0026#34;); 1 2 3 binmode STDIN =\u0026gt; \u0026#39;:encoding(shiftjis)\u0026#39;; binmode STDOUT =\u0026gt; \u0026#39;:encoding(shiftjis)\u0026#39;; binmode STDERR =\u0026gt; \u0026#39;:encoding(shiftjis)\u0026#39;; ","date":"2013-11-29T00:19:00+09:00","permalink":"https://www.nqou.net/2013/11/29/001900/","title":"WindowsはPowerShellを使ってもUTF-8が使えないのか…という諦め"},{"content":" 今は，USB接続の純正キーボードを使っていますが，左下の方に，commandキーやoptionキーが並んでいるのですが，MacBookだとcapsもあるんですよ．\n1 ![Mouのスクリーンショット](//copy.com/juncmBw273z6m0Ds) ","date":"2013-11-28T02:33:00+09:00","permalink":"https://www.nqou.net/2013/11/28/023300/","title":"Windowsにも使えるMarkdownエディタがあった"},{"content":"@nqounetです．\n最近、WindowsとMacを行ったり来たりして、Macでショートカットが使えなくなってきていますが、いかがお過ごしですか。\n以前、WindowsからMacに乗り換えた時に、WindowsでいうControlキーの場所にCommandキーを差し替えて使っていたのですが、それにかなり慣れて来た所にWindowsマシンを使うことになってこのザマです。\n常に両方使うにはもっと違う手段を考える必要があるのかもしれません。\nもう、これが染み付いていて大変ですよ。\nWindowsで不思議なのは、＼（バックスラッシュ、Windowsだと￥になる）のキーが2つもあることです。\n下の方のキーはアンダースコアにしてくれればいいのに…。\nプログラムはタスクバーに常駐しますが、問題ありません。\nWindowsのエキスパートだったらレジストリを書き換えて対応したりもできるのでしょうが、私にはこれが精一杯。\n特にMacに戻ってからが大変。\n今も、1行消そうと思ってshift+homeで全消ししてしまったり、コピーしようと思ってoption+cで別の文字を打っていたりしています。\n","date":"2013-11-26T23:12:00+09:00","permalink":"https://www.nqou.net/2013/11/26/231200/","title":"Windowsでもshift-keyなしで_（アンダースコア）を出す方法"},{"content":"@nqounetです．\n最近，Windowsで開発する（Perlじゃないけど）事になって，環境構築を色々と調べてみたので備忘録的に．\nGitの状態がわかって，フォントをRictyにする，というのが，こんなに大変だと思ってなかった．\nもっと言うと，最初はVagrantを使って，仮想マシンからWindowsのファイルを編集しようと思っていたのだけど，とんでもない話だった．\nCygwinを入れたら負けかな，と思ってMinGWからMinTTYを使おうと思ったのだけど，Git Bashと相性がよろしく無いようで，併用するとlsで固まってしまった．\nリソースモニタで確認すると，ls.exeがいっぱい…．\n過程で色々インストールしたせいか，bash.exeとか幾つもあってなんとも言えない気分になった．\n素直にCygwinを入れればよかったのか？\nConsoleというソフトがオススメという話だったのだが，マルチバイトを表示するためにはコツが要るようだった．\nフォントをRictyにするにしても，cmdやWindows Power Shellは，使えるフォントが限られているのがひどい．自由にさせてくれればいいのに．\n結局リポジトリをイジって使えるフォントを増やす方法があったので，それでRictyを選べるようにした．\nエイリアスを作成するのにset-aliasというコマンドがあるのだけど，引数は設定できないので，よく使うgst（git status -sbの短縮型）は関数にしてやらなければならない．\n1 function gst { git status -sb } そんなに難しくなかった．\nMacでは，ターミナルからopen .とする事も多かったので，explorer.exeも関数にしてやる．\n1 function open($file_or_dir = \u0026#34;.\u0026#34;) { explorer.exe $file_or_dir } 関数は引数も使える，かつ，初期値を入れておくこともできるので，openだけでもカレントディレクトリを開くように出来た．\nソフトによっても，%system_drive%を指定してくる奴もいてヤダ．\nなのに，ホームディレクトリを別のドライブにするのは結構大変．\nユーザーを作る時には出来たのかもしれないけど，作りなおして…とはさすがに言えないので．\n「コンピューターの管理」だったかで，ユーザーのプロファイルの場所を変更することは出来たけど，それを実行してもマイドキュメントなどの場所が変わらない．\nマイドキュメントやダウンロードの「場所」は，それぞれのフォルダのプロパティで場所が変えられるので，それで対応した．\n全部一括で変えたいが，それも出来ない．\nフォルダを右クリックして，プロパティを選んで，場所タブを選んで，CをDに変更するだけの簡単なお仕事だけど，何回もやるのは飽きる．\n最近覚えた，無変換キーでIMEをオフにする技があるので，うっかりカタカナで入力してしまうことが減りました．\n","date":"2013-11-20T08:02:00+09:00","permalink":"https://www.nqou.net/2013/11/20/080200/","title":"Windowsの開発環境って難しい"},{"content":" ","date":"2013-09-28T15:41:00+09:00","permalink":"https://www.nqou.net/2013/09/28/154100/","title":"講話してきました"},{"content":" ","date":"2013-09-26T17:52:00+09:00","permalink":"https://www.nqou.net/2013/09/26/175200/","title":"YAPC::ASIA Tokyo 2013に行ってきた（その3） #yapcasia"},{"content":" ","date":"2013-09-23T12:33:00+09:00","permalink":"https://www.nqou.net/2013/09/23/123300/","title":"YAPC::ASIA Tokyo 2013に行ってきた（その2） #yapcasia"},{"content":" ","date":"2013-09-22T17:08:00+09:00","permalink":"https://www.nqou.net/2013/09/22/170800/","title":"YAPC::ASIA Tokyo 2013に行ってきた（その1） #yapcasia"},{"content":" ","date":"2013-09-19T15:45:00+09:00","permalink":"https://www.nqou.net/2013/09/19/154500/","title":"LA ダウンタウンにて（夫編）"},{"content":" ","date":"2013-09-10T20:55:00+09:00","permalink":"https://www.nqou.net/2013/09/10/205500/","title":"Dropboxの開発版にスクリーンショットをすぐに共有できる機能がついていた"},{"content":" 1 $ cpanm DBD::SQLite --configure-args=\u0026#34;-Wl,\u0026#34; 1 2 cc -c -I. -I/home/hoge/perl5/perlbrew/perls/perl-5.14.2/lib/site_perl/5.14.2/i386-freebsd/auto/DBI -DHAS_FPSETMASK -DHAS_FLOATINGPOINT_H -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -Wl,-Bsymbolic -O -O2 -DVERSION=\\\u0026#34;1.40\\\u0026#34; -DXS_VERSION=\\\u0026#34;1.40\\\u0026#34; -DPIC -fPIC \u0026#34;-I/home/hoge/perl5/perlbrew/perls/perl-5.14.2/lib/5.14.2/i386-freebsd/CORE\u0026#34; -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_ENABLE_STAT3 -DNDEBUG=1 -DHAVE_USLEEP=1 -DTHREADSAFE=0 -D_XOPEN_SOURCE SQLite.c cc: -Bsymbolic: linker input file unused because linking not done ","date":"2013-09-10T11:30:00+09:00","permalink":"https://www.nqou.net/2013/09/10/113000/","title":"さくらのレンタルサーバーにDBD::SQLiteをインストールできた話"},{"content":" 1 2 $ perlbrew install-patchperl ERROR: Failed to retrieve patchperl executable. 1 2 cpanm Devel::PatchPerl perlbrew install --notest perl-5.16.3 -D=usethreads 1 2 3 $ which bash /usr/local/bin/bash $ chsh -s /usr/local/bin/bash ","date":"2013-09-10T10:00:00+09:00","permalink":"https://www.nqou.net/2013/09/10/100000/","title":"さくらのレンタルサーバー（FreeBSD 7.1-RELEASE-p16）にPerlbrewでPerlをインストールした話"},{"content":" ","date":"2013-09-09T14:18:00+09:00","permalink":"https://www.nqou.net/2013/09/09/141800/","title":"ドコモのビッグデータ販売についての記事はなんだか作為的"},{"content":" 1 2 3 4 5 mkdir ~/src cd ~/src git clone git://github.com/joelthelion/autojump.git cd autojump sudo ./install.sh 1 [[ -s /etc/profile.d/autojump.zsh ]] \u0026amp;amp;\u0026amp;amp; . /etc/profile.d/autojump.zsh 1 autoload -U compinit \u0026amp;amp;\u0026amp;amp; compinit -u ","date":"2013-09-03T19:42:00+09:00","permalink":"https://www.nqou.net/2013/09/03/194200/","title":"追加で設定した諸々のこと"},{"content":" ","date":"2013-08-31T14:32:00+09:00","permalink":"https://www.nqou.net/2013/08/31/143200/","title":"これがないと何もできないと感じたソフトウェア for MacOSX"},{"content":" ","date":"2013-08-31T10:00:00+09:00","permalink":"https://www.nqou.net/2013/08/31/100000/","title":"軽くて音も良いという噂のVoxを使ってみたら結構良かった件"},{"content":" 1 2 3 4 5 6 7 $ vagrant box list Berkshelf-CentOS-6.3-x86_64-minimal (virtualbox) CentOS-6.4-i386-plenv (virtualbox) CentOS-6.4-x86_64-plenv (virtualbox) base (virtualbox) base64 (virtualbox) centos64_64 (virtualbox) 1 2 3 4 5 6 $ vagrant package [default] Attempting graceful shutdown of VM... [default] Clearing any previously set forwarded ports... [default] Creating temporary directory for export... [default] Exporting VM... [default] Compressing package to: /Users/nobu/sandbox/vm-plenv/package.box 1 $ vagrant box add new-box package.box 1 2 3 4 $ mkdir ~/vagrant-new-box \u0026amp;\u0026amp; cd ~/vagrant-new-box $ vagrant init new-box $ vagrant up $ vagrant ssh ","date":"2013-08-30T11:34:00+09:00","permalink":"https://www.nqou.net/2013/08/30/113400/","title":"Vagrantで作った仮想環境を保存しておく"},{"content":" 1 2 3 4 5 git clone https://github.com/sstephenson/rbenv.git ~/.rbenv echo \u0026#39;export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026#39;eval \u0026#34;$(rbenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile exec $SHELL -l git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build 1 rbenv install --list 1 rbenv install 2.0.0-p247 1 rbenv rehash 1 rbenv versions 1 rbenv global 2.0.0-p247 1 rbenv local system ","date":"2013-08-29T08:30:00+09:00","permalink":"https://www.nqou.net/2013/08/29/083000/","title":"今更rbenvでrubyを管理してみる"},{"content":" 1 2 3 4 Cannot load RubyCocoa library wkpdf requires that RubyCocoa is installed, which is shipped by default since Mac OS X 10.5. If you use Mac OS X 10.4, you have to install RubyCocoa yourself from http://rubycocoa.sourceforge.net/HomePage 1 2 3 RBENV_VERSION=system gem install wkpdf rbenv rehash RBENV_VERSION=system wkpdf 1 2 3 4 5 6 7 8 % cd ~ % mkdir wkpdf % cd wkpdf % rbenv local system % sudo gem install wkpdf % rbenv rehash % wkpdf --source http://www.apple.com --output apple.pdf % open apple.pdf ","date":"2013-08-28T15:49:00+09:00","permalink":"https://www.nqou.net/2013/08/28/154900/","title":"MacOSXでwkpdfを使ってみた"},{"content":" ","date":"2013-07-27T14:05:00+09:00","permalink":"https://www.nqou.net/2013/07/27/140500/","title":"Perlのビルドに何度も失敗するので$GREP_OPTIONSを見なおした"},{"content":"@nqounetです。\n結構前に@papixさんから教えてもらったvagrantですが、ふとした切っ掛けで、もう少し本格的に使いたいと思いはじめました。\nちなみに、「ベイグラント」と聞いてこれを思い出しました。\nまあ、それは置いておいて。\nvagrantで開発環境の自動構築というと、chef-soloの情報が多いと思う（というか、chefだけだと思っていました）のですが、今回はshellでやってみた事を書いてみます。\nOSXならdmgファイルを、Windowsならmsiファイルを選びます。\n今回調べていて知ったのですが、private_networkではこの例のようにDHCPを使って自動的にIPアドレスを割り当てるようにする事ができます。\nこれまではいちいちIPアドレスを重ならないように設定（重なると起動できない）していたのですが、これで変更する箇所が減って大分楽になりました。\nrun once if ! [ -f \u0026ldquo;$HOME/perl5/perlbrew/etc/bashrc\u0026rdquo; ]; then\ninstall Perlbrew curl -L http://install.perlbrew.pl | bash echo \u0026lsquo;source ~/perl5/perlbrew/etc/bashrc\u0026rsquo; \u0026raquo; ~/.bashrc source ~/.bashrc\ninstall Perl perlbrew install 5.16.3\nperlbrew switch 5.16.3\ninstall App::cpanminus (cpanm) curl -L http://cpanmin.us | perl - App::cpanminus fi\nyum install -y git mysql-devel\ncpanm DBD::mysql Data::Model\n1 2 3 4 5 6 7 あちこちのブログでは、yumなどにsudoを付けて実行していましたが、そのような必要はありませんでした。 少なくとも「Vagrant version 1.2.2」では、rootとして実行されています。 で、これら2つのファイルを同じディレクトリに置いて、そのディレクトリで以下のようにコマンドを入力します。 ```text vagrant up 上手く行けばPerlのビルドまで実行されるので、結構時間がかかります。\n構築が終わったら、仮想マシンにログインします。\n1 vagrant ssh これで、先ほど作成したマシンにログインできます。\n初期ユーザーはvagrantです。\nで、先ほどのスクリプトはroot権限なので、rootに変わってからPerlがインストール出来ているか確認してみます。\n1 sudo su - これでrootになれましたので、続けてPerlのバージョンを見てみます。\n1 perl -V 結果は以下のとおり、上手くいっています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 Summary of my perl5 (revision 5 version 16 subversion 3) configuration: Platform: osname=linux, osvers=2.6.32-358.el6.x86_64, archname=x86_64-linux uname=\u0026#39;linux vm-perlbrew 2.6.32-358.el6.x86_64 #1 smp fri feb 22 00:31:26 utc 2013 x86_64 x86_64 x86_64 gnulinux \u0026#39; config_args=\u0026#39;-de -Dprefix=/root/perl5/perlbrew/perls/perl-5.16.3 -Aeval:scriptdir=/root/perl5/perlbrew/perls/perl-5.16.3/bin\u0026#39; hint=recommended, useposix=true, d_sigaction=define useithreads=undef, usemultiplicity=undef useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef use64bitint=define, use64bitall=define, uselongdouble=undef usemymalloc=n, bincompat5005=undef Compiler: cc=\u0026#39;cc\u0026#39;, ccflags =\u0026#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\u0026#39;, optimize=\u0026#39;-O2\u0026#39;, cppflags=\u0026#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include\u0026#39; ccversion=\u0026#39;\u0026#39;, gccversion=\u0026#39;4.4.7 20120313 (Red Hat 4.4.7-3)\u0026#39;, gccosandvers=\u0026#39;\u0026#39; intsize=4, longsize=8, ptrsize=8, doublesize=8, byteorder=12345678 d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=16 ivtype=\u0026#39;long\u0026#39;, ivsize=8, nvtype=\u0026#39;double\u0026#39;, nvsize=8, Off_t=\u0026#39;off_t\u0026#39;, lseeksize=8 alignbytes=8, prototype=define Linker and Libraries: ld=\u0026#39;cc\u0026#39;, ldflags =\u0026#39; -fstack-protector -L/usr/local/lib\u0026#39; libpth=/usr/local/lib /lib/../lib64 /usr/lib/../lib64 /lib /usr/lib /lib64 /usr/lib64 /usr/local/lib64 libs=-lnsl -ldl -lm -lcrypt -lutil -lc perllibs=-lnsl -ldl -lm -lcrypt -lutil -lc libc=, so=so, useshrplib=false, libperl=libperl.a gnulibc_version=\u0026#39;2.12\u0026#39; Dynamic Linking: dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags=\u0026#39;-Wl,-E\u0026#39; cccdlflags=\u0026#39;-fPIC\u0026#39;, lddlflags=\u0026#39;-shared -O2 -L/usr/local/lib -fstack-protector\u0026#39; Characteristics of this binary (from libperl): Compile-time options: HAS_TIMES PERLIO_LAYERS PERL_DONT_CREATE_GVSV PERL_MALLOC_WRAP PERL_PRESERVE_IVUV USE_64_BIT_ALL USE_64_BIT_INT USE_LARGE_FILES USE_LOCALE USE_LOCALE_COLLATE USE_LOCALE_CTYPE USE_LOCALE_NUMERIC USE_PERLIO USE_PERL_ATOF Built under linux Compiled at Jul 24 2013 17:17:04 %ENV: PERLBREW_BASHRC_VERSION=\u0026#34;0.64\u0026#34; PERLBREW_HOME=\u0026#34;/root/.perlbrew\u0026#34; PERLBREW_MANPATH=\u0026#34;/root/perl5/perlbrew/perls/perl-5.16.3/man\u0026#34; PERLBREW_PATH=\u0026#34;/root/perl5/perlbrew/bin:/root/perl5/perlbrew/perls/perl-5.16.3/bin\u0026#34; PERLBREW_PERL=\u0026#34;perl-5.16.3\u0026#34; PERLBREW_ROOT=\u0026#34;/root/perl5/perlbrew\u0026#34; PERLBREW_VERSION=\u0026#34;0.64\u0026#34; @INC: /root/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3/x86_64-linux /root/perl5/perlbrew/perls/perl-5.16.3/lib/site_perl/5.16.3 /root/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3/x86_64-linux /root/perl5/perlbrew/perls/perl-5.16.3/lib/5.16.3 . ちなみに、DBD::mysqlを指定しているのは、MAMPが稼働中のOSXにこれがインストールできなくて泣いたからです。\nとりあえず、DBD::mysqlがインストールできるかどうかを一つの指標にしていましたので、この結果は満足の行くものでした。\nこの調子で、今度はchef-soloで色々とやってみたいですね。\n","date":"2013-07-25T08:00:00+09:00","permalink":"https://www.nqou.net/2013/07/25/080000/","title":"vagrantで開発環境を自動的に作成する"},{"content":" ","date":"2013-07-14T18:13:00+09:00","permalink":"https://www.nqou.net/2013/07/14/181300/","title":"「Kyoto.pm 05 Tech Talks」でLTしてきました"},{"content":" ","date":"2013-06-26T13:32:00+09:00","permalink":"https://www.nqou.net/2013/06/26/133200/","title":"タイトルを変更しました"},{"content":"git diff でとった差分はこちらです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 diff --git a/app/controllers/milestones_controller.rb b/app/controllers/milestones_controller.rb index 25647f9..1b3d11b 100644 --- a/app/controllers/milestones_controller.rb +++ b/app/controllers/milestones_controller.rb @@ -12,9 +12,9 @@ class MilestonesController \u0026lt; ProjectResourceController def index @milestones = case params[:f] -when \u0026#39;all\u0026#39;; @project.milestones.order(\u0026#34;state, due_date DESC\u0026#34;) +when \u0026#39;all\u0026#39;; @project.milestones.order(\u0026#34;state, due_date ASC\u0026#34;) when \u0026#39;closed\u0026#39;; @project.milestones.closed.order(\u0026#34;due_date DESC\u0026#34;) -else @project.milestones.active.order(\u0026#34;due_date DESC\u0026#34;) +else @project.milestones.active.order(\u0026#34;due_date ASC\u0026#34;) end @milestones = @milestones.includes(:project) diff --git a/app/helpers/issues_helper.rb b/app/helpers/issues_helper.rb index dc5aa6e..33a1cca 100644 --- a/app/helpers/issues_helper.rb +++ b/app/helpers/issues_helper.rb @@ -29,7 +29,7 @@ module IssuesHelper end def issues_active_milestones -@project.milestones.active.order(\u0026#34;id desc\u0026#34;).all +@project.milestones.active.order(\u0026#34;due_date ASC\u0026#34;).all end def url_for_project_issues GitlabのIssuesは使えますよ GitlabのIssuesは、シンプルなプロジェクト管理機能です。 ざっくりと私の使い方を書いてみます。 そのプロジェクトでやるべき事をIssueとしてどんどん登録していきます。 基本的には、このIssueをどんどん消化していくのですが、優先順位をおおまかに決めておく必要があります。 それを決めるのに便利なのがMilestonesです。 Milestoneは、Issueをグループ化でき、かつ締め切りを設定できるので、優先順位でグループ化して使うことができます。 大体一週間程度毎に締め切りを作って、どんな感じになっているかを想像しながら登録していきます。 登録したらIssueの画面に戻り、最初の締め切り（Milestone）に含めるIssueを選択してから、「Update selected issues with」の部分の「Milestone」から最初の締め切りを選んで「Save」します。 これを繰り返すことで、全てのIssueがMilestoneとひも付けされて、Milestoneの締め切り順で並んでいると、今何をするべきなのかが一目瞭然、という具合です。\nここで問題発生！ GitlabでIssueやMilestoneを登録していて気づいたのですが、Milestonesの並び方がイマイチなのです。 締め切りが遠い順に並んでいて、非常に気持ち悪い。 それと、「Update selected issues with」のMilestonesのドロップダウンの並び順が、Milestonesで見るのと違うので、多くなってくると見失ってしまいます。 このへんの並び順をどうにかしたいと思って、ソースを調べてみたら、意外と簡単そうだったのでやってみました。 直接ソースコードを触るのですが、事前にブランチを作成してその中で完結するようにやってみました。\nとりあえずMilestonesは満足！！ 締め切りが近い順に並んだことで満足です。 終了したMilestonesがどのように並べばいいのか思いつかないので、それはあえてそのままにしました。\n次はIssues！？ 一つ解決するともう一つ…って思いますよね。 Issuesの並び順もどうにかしたいですね。\n","date":"2013-06-23T08:30:00+09:00","permalink":"https://www.nqou.net/2013/06/23/083000/","title":"Gitlabでmilestonesの並び方が不満なので変更した"},{"content":"大きな理由 「Turbolink機能」に惹かれました。\n結果としては期待しすぎた感じでしたが、転送量は確実に減っているので、アップデートする価値はあります。\nきっかけ 今日、新大阪コワーキングに来た方と話していて、gitlabが5.2になっている、という話を聞きました。\n調べてみると、どうやら最新版はここ数日内で5.3になっていたようです。\nhttps://github.com/gitlabhq/gitlabhq/tree/master/doc/update\nさくらのVPSにインストールしていたのは5.1だった さくらのVPSにインストールしてすぐにバージョンアップさせた記憶があったのですが、確認してみると5.1でした。\n最初にインストールしたのが5.0だったので、そんなものでしょうか。\nそれはともかく、5.2ではページ遷移が高速化したという話なのでアップデートすることにしました。\nそれ以外にもこんな感じのアップデートらしいです。\nアップデート作業 アップデートは細かい手順書があるのでそちらを参考にします。\nhttps://github.com/gitlabhq/gitlabhq/blob/master/doc/update/5.1-to-5.2.md\n5.0から5.1にアップロードする際も、公式のドキュメントが一番わかり易かった記憶があります。\n設定ファイル以外は書いてあるコマンドをそのまま打ち込みます。\n設定ファイルは、5.1以降で追加された部分をチェックするようにしました。\ngitlab.ymlの変更 gitlab.yml 40行目あたりからの\n1 2 3 4 5 6 7 ## Default project features settings default_projects_features: issues: true merge_requests: true wiki: true wall: false snippets: false この部分と、同じく162行目あたりからの\n1 2 3 4 5 6 7 8 extra: ## Google analytics. Uncomment if you want it # google_analytics_id: \u0026#39;_your_tracking_id\u0026#39; ## Text under sign-in page (Markdown enabled) # sign_in_text: | # ![Company Logo](http://www.companydomain.com/logo.png) # [Learn more about CompanyName](http://www.companydomain.com/) こちらの部分が追加になっていました。\n先の「default_projects_features」は、新しくリポジトリを作成した時に、SettingできるFeaturesの初期値です。\nほとんどのリポジトリではこれらの機能は使わないので、全部falseにしました。\n後半の「extra」には、google analyticsのID指定や、サインインの画面のテキストが設定できるようですが、使っていないので詳細は不明です。\npuma.rbの変更 こちらは5.1から特に変更になった部分はありませんでした。\n/etc/init.d/gitlabの変更 新しい起動スクリプトがあるようなのでそれをそのまま使ったのですが、ソケットを削除するコマンドでエラーが出るのでその部分だけはコメントにしました。\n起動自体は問題ないので、エラー表示が気にならないようであればそのままでも問題ないと思います。\nGitlabを使うようになった経緯 Issuesは、簡単なチケット管理システムです。\nこれがあったので、Alminiumを止めてgitlabを使うようになりました。\nAlminiumは、インストールは簡単なのですが、アップデートがよくわからないのと、いつの間にかpush時にエラーが出る（push自体はできていますが、正常終了できない）ようになってしまって、サーバーのログを見たり、色々検索してみたりしたのですが、解決の糸口もつかめませんでした。\n丁度そのころGitprepを見つけたのでそれも考えました。\nインストールして試してみましたが、動作も軽快なので、Gitのリポジトリが欲しいならとても良い選択肢だと思います。\n何と言ってもPerlで書かれていますし。\n…ただ私にとっては、プロジェクト管理機能が必要だったのです。\nそして、Gitlabを知って、今に至る。という感じです。\nコミットログに一工夫するだけでも便利に使える コミットのログに「#チケット番号」と書いておくと、そのチケットへのリンクが張られるので、後から確認するのも便利です。\ngit-flowとの相性も良いと思います。\nこのへんの運用というか使い方の話は、ガッツリ使っている方に聞いてみたいところですね。\n色々便利な方法があるんじゃないかと思っています。\nちなみに、私はfeatureのprefixを入力する際に「feature/#」としています。\n入力が1文字減るだけですが、チケット番号だけで済むのはなかなか良いと思いますよ。\n5.2になりました さて、期待していたTurbolinkについては、劇的な体感はありませんでしたが、少し速くなった感じはします。\nただし転送量は大分違う（1/3くらい？）ので、転送量を減らしたい場合はかなり有効だと思います。\nただ、発生条件はよくわかりませんが、ある程度の時間放置していると上手くリンクしない現象が起きています。\n詳しくは見ていませんが、JavaScriptのエラーが出ていました。\nその辺は最新版に期待したいところです。\nバージョンはHelpを見ればわかります 最初に戻りますが、話をしている間、現在のバージョンが何だったかを調べていたのですが、簡単に調べられる方法があったのをすっかり忘れていました。\nHelpを見ればそこにバージョンが書いてあります。\nGitlabは便利なツールです インストールした時には、ここまで使えるとは思っていませんでした。\n今は、手元に保管（放置？）していたファイルはすべてGitlabで管理しています。\nIssuesもシンプルですが、機能としては十分すぎるほどです。\nプライベートなプロジェクトを管理するのであれば、試してみる価値はありますよ。\n","date":"2013-06-22T08:30:00+09:00","permalink":"https://www.nqou.net/2013/06/22/083000/","title":"Gitlabを（まずは）5.1から5.2にアップデートした愛すべき理由"},{"content":"言いたいこと 画面（ターミナル）からの入力は「改行」が入っているので、 chomp してから使いましょう。\n画面（ターミナル）から文字を入力する 画面（ターミナル）から文字を入力するには、 \u0026lt;STDIN\u0026gt; を使います。\n1 2 my $x = \u0026lt;STDIN\u0026gt;; print $x; 実行すると、画面が止まってしまいますが、何が文字を入力して改行を押すと、入力した文字列がそのまま表示されると思います。\n改行はわかりづらい Perl入学式では、画面（ターミナル）からの入力値を計算するプログラムをサンプルで作ったりしていますが、画面からの入力には「改行」が含まれています。\n1 2 3 4 my $x = \u0026lt;STDIN\u0026gt;; my $y = \u0026lt;STDIN\u0026gt;; print \u0026#34;$x - $y = \u0026#34;; print $x - $y; 計算式を表示しようとして、これを実行すると、\n1 2 3 4 5 5[改行]（この行は入力） 1[改行]（この行は入力） 5 - 1 = 4 このように、改行が入って変な感じになってしまいます。\n改行を削除するにはchompを使う この改行を取り除くには、 chomp を使います。\n1 2 3 4 5 6 my $x = \u0026lt;STDIN\u0026gt;; chomp($x); my $y = \u0026lt;STDIN\u0026gt;; chomp($y); print \u0026#34;$x - $y = \u0026#34;; print $x - $y; 実行結果は以下のとおり。\n1 2 3 5[改行]（この行は入力） 1[改行]（この行は入力） 5 - 1 = 4 ちゃんと改行が取り除かれています。\nchompを使うときに注意すること 慣れてくると、変数に代入すると同時に改行を削除しようとして、こんな感じにやりたくなるんじゃないかと思います。\n1 2 3 4 my $x = chomp(\u0026lt;STDIN\u0026gt;); my $y = chomp(\u0026lt;STDIN\u0026gt;); print \u0026#34;$x - $y = \u0026#34;; print $x - $y; しかし、実行しようとするとエラーに。\n1 2 Can\u0026#39;t modify \u0026lt;HANDLE\u0026gt; in chomp at stdin.pl line 5, near \u0026#34;\u0026lt;STDIN\u0026gt;)\u0026#34; Execution of stdin.pl aborted due to compilation errors. これは、 chomp が渡された値（引数）自体を変更してしまうためです。\nchomp は引数の改行を削除して値を返す関数ではなく、引数そのものを変更します。\n代入と同時に改行を削除したい場合は、以下のように書くと良いです。\n1 2 3 4 chomp(my $x = \u0026lt;STDIN\u0026gt;); chomp(my $y = \u0026lt;STDIN\u0026gt;); print \u0026#34;$x - $y = \u0026#34;; print $x - $y; 画面からの入力はchompで処理しましょう 画面から \u0026lt;STDIN\u0026gt; で入力する時は、入力値に改行も含まれるので、 chomp で改行を取り除くようにしましょう。\n","date":"2013-06-19T08:30:00+09:00","permalink":"https://www.nqou.net/2013/06/19/083000/","title":"Perlで画面から入力された値を使うには？"},{"content":" 1 2 3 4 5 6 7 8 #!/usr/bin/env perl use strict; use warnings; my $x; my $y; print $x - $y; 1 2 3 Use of uninitialized value $y in subtraction (-) at warnings.pl line 8. Use of uninitialized value $x in subtraction (-) at warnings.pl line 8. 0 1 2 3 4 5 6 7 8 #!/usr/bin/env perl use strict; use warnings; my $x; my $y = \u0026#39;1e\u0026#39;; print $x - $y; 1 2 3 Argument \u0026#34;1e\u0026#34; isn\u0026#39;t numeric in subtraction (-) at warnings.pl line 8. Use of uninitialized value $x in subtraction (-) at warnings.pl line 8. -1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env perl use strict; use warnings; use Scalar::Util qw(looks_like_number); my $x; while (1) { print \u0026#34;数値を入力してください \u0026gt;\u0026gt;\u0026gt; \u0026#34;; $x = \u0026lt;STDIN\u0026gt;; chomp $x; last if want_number($x); } print qq{入力された数値は `$x` です}; exit; sub want_number { my ($args) = @_; return 1 if looks_like_number($args); print \u0026#34;エラー：数値ではありません！\\n\u0026#34;; return; } ","date":"2013-06-17T08:30:00+09:00","permalink":"https://www.nqou.net/2013/06/17/083000/","title":"looks_like_numer（Scalar::Util）で数字を判定する"},{"content":" ","date":"2013-04-23T20:04:00+09:00","permalink":"https://www.nqou.net/2013/04/23/200400/","title":"GitPrepを動かしてみた"},{"content":" ","date":"2013-04-17T19:26:00+09:00","permalink":"https://www.nqou.net/2013/04/17/192600/","title":"Dropboxっぽいアプリ、「copy」を使ってみた"},{"content":" 1 $ find . -name \u0026#34;*.cgi\u0026#34; -print0 | xargs -0 perl -i.bak -pe \u0026#34;s|^#\\!/usr/bin/perl|#\\!/usr/bin/env perl|\u0026#34; 1 2 3 4 5 6 7 8 9 10 11 12 # mt-config.cgi CGIPath http://localhost:5000/mt/ StaticWebPath http://localhost:5000/mt/mt-static ObjectDriver DBI::mysql Database mt DBUser mt DBPassword passw0rd DBHost localhost DBSocket /Applications/XAMPP/xamppfiles/var/mysql/mysql.sock DefaultLanguage ja 1 $ starman mt.psgi 1 $ plackup --port 5001 -MPlack::App::Directory -e \u0026#39;Plack::App::Directory-\u0026gt;new(root =\u0026gt; \u0026#34;.\u0026#34;)-\u0026gt;to_app\u0026#39; ","date":"2013-03-02T07:30:00+09:00","permalink":"https://www.nqou.net/2013/03/02/073000/","title":"MovableType5.2.3をPSGIで動かしてみた"},{"content":"@nqounetです。\nKansai.pmで@shiba_yu36さんが発表していた「Cinnamon」が便利そうだったので、使ってみました。\nそのあと、sshでサーバーにログインして、公開しているディレクトリに移動して、pullしてから、サーバーを再起動、という操作を行なっていました。\nサーバーは1つなので、特に面倒でも無いですが、1分程度は張り付いて作業する感じではありました。\nまずはCinnamonをインストールします。\nCinnamonはCPANに上がっているので、cpanmなどでインストールが可能です。\n1 $ cpanm Cinnamon 依存関係のモジュールも自動的にインストールしてくれるので、簡単です。\nインストールが完了すると、「cinnamon」というコマンドが実行できるようになります。\nこのコマンドを実行すると、そのディレクトリから見て「config/deploy.pl」というファイルを自動的に読み込んでくれるので、gitで管理している場合は、プロジェクトのホームディレクトリからみて、「config/deploy.pl」になるように設定ファイルを作成すると便利です。\n細かい書き方は、@naoyaさんのブログか、@shiba_yu36さんのスライド資料などを見ながら書くと良いでしょう。\n私は「.ssh/config」にusernameも指定してありますが、必須項目らしいのでuserもsetしておきます。\nそもそもsudoが出来ない場合はsudoできるようにする必要があります。\nそれでもエラーになる場合は、tty経由でしかsudo出来ないようになっている可能性があるので、その設定を解除します。\n*TTY経由でないsudoの実行 - shibainu55日記\n具体的には、rootになってからのvisudoで、\n1 Defaults requiretty になっている部分をコメント（先頭に「#」を入力）にして無効にします。\nうまくいく例 remote { sudo qq{cd /var/www/myapp \u0026amp;\u0026amp; git fetch origin \u0026amp;\u0026amp; git checkout -q origin/master}; } $host;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 もしも、複雑な処理が必要であれば、シェルなどでスクリプトを作成して、そのスクリプトを実行するようにしても良いでしょう。 \u0026lt;h3\u0026gt;hypnotoadが見つからない\u0026lt;/h3\u0026gt; 「hypnotoad」にかぎらず、PATHが通っていない場合があります。 コマンドをフルパスで書くか、特にperlbrewについては、perlbrewのbashrcを読み込む必要があります。 \u0026lt;h2\u0026gt;とあるdeploy.pl\u0026lt;/h2\u0026gt; それらを踏まえて（sudoはありませんが）作成した「config/deploy.pl」がこちらです。 @argsは要らなさそうなのですが、とりあえずつけています。 ```text use utf8; use v5.12; use Cinnamon::DSL; set user =\u0026gt; \u0026#39;nqounet\u0026#39;; set application =\u0026gt; \u0026#39;myapp\u0026#39;; set deploy_to =\u0026gt; \u0026#39;/home/nqounet/www/myapp\u0026#39;; role production =\u0026gt; \u0026#39;sakura.nqounet\u0026#39;; task update =\u0026gt; sub { my ($host, @args) = @_; my $deploy_to = get(\u0026#39;deploy_to\u0026#39;); my $app = get(\u0026#39;application\u0026#39;); remote { run qq{. ~/perl5/perlbrew/etc/bashrc \u0026amp;amp;\u0026amp;amp; cd $deploy_to \u0026amp;amp;\u0026amp;amp; git fetch origin \u0026amp;amp;\u0026amp;amp; git checkout -q origin/master \u0026amp;amp;\u0026amp;amp; hypnotoad script/$app}; } $host; }; task restart =\u0026gt; sub { my ($host, @args) = @_; my $deploy_to = get(\u0026#39;deploy_to\u0026#39;); my $app = get(\u0026#39;application\u0026#39;); remote { run \u0026#34;. ~/perl5/perlbrew/etc/bashrc \u0026amp;amp;\u0026amp;amp; cd $deploy_to \u0026amp;amp;\u0026amp;amp; hypnotoad script/$app\u0026#34;; } $host; }; そのあと、以下のコマンドを実行。\n1 $ cinnamon production udpate 席を立ってトイレに行って戻ってくると、サーバーの再起動まで終わっていました。\nこれは楽チンですね。\n","date":"2013-02-27T07:30:00+09:00","permalink":"https://www.nqou.net/2013/02/27/073000/","title":"デプロイツール「Cinnamon」を使ってみた"},{"content":" ","date":"2013-02-26T07:30:00+09:00","permalink":"https://www.nqou.net/2013/02/26/073000/","title":"Kansai.pmを開催してきました #kansaipm"},{"content":" ","date":"2013-02-12T14:48:00+09:00","permalink":"https://www.nqou.net/2013/02/12/144800/","title":"「QRコネクト用QRコードメーカー」を作ってみた"},{"content":"おはようございます。 若林（@nqounet）です。\n無線LANの設定アプリ「QRコネクト」が便利なので紹介したいと思います。\nQRコネクト って何？ 「QRコネクト」は、スマートフォン用のアプリ（iOS、Android対応）で、アプリを使ってQRコードを読みこむだけで無線LANが使えるようになります。\n無線LAN設定アプリ「QRコネクト」 | IODATA アイ・オー・データ機器 このアプリは、適切にQRコードを作成すれば、IO-DATA製のアクセスポイント、ルーターでなくても使えます。\nQRコネクトの仕様（非公式） 「QRコネクト」で使うQRコードは、単純なテキストです。\nそのテキストの書式例は概ね以下のとおりです。\n1 2 3 4 WI: SS:SSID EN:WPA PA:password 「WI」は認識用のheaderと思われます。\n「SS」はSSIDです。ステルス状態のものでも問題ありません。\n「EN」は暗号化の方法です。WPA2でも設定は「WPA」で可能です。「WEP」は試していませんが、このアプリを使ってもらうのであれば「WPA」で良いと思います。\n「PA」はパスワードです。これまで設定が面倒なので短い設定にしていたかもしれませんが、遠慮無く複雑なパスワードが設定できます。\n最後に改行を入れてあっても問題なく読み取れます。\nこのテキストをQRコード作成できるサービスでQRコードにしておくと、「QRコネクト」で設定が可能になります。\n例えば QR Code Generator で作成する場合は、以下の様な感じです。\nイベントなどで、多くの方に入力してもらう場合には、こういうのが便利ですね。\n新大阪コワーキングでは、この「QRコネクト」を利用できるようにしましたので、スマートフォンでも是非無線LANをお使いください！\n","date":"2013-02-12T12:24:00+09:00","permalink":"https://www.nqou.net/2013/02/12/122400/","title":"「QRコネクト」なら遠慮無く複雑なパスワードが設定できる"},{"content":" 1 2 curl -L http://cpanmin.us | perl - --self-upgrade cpanm Mojolicious Path::Class Text::Markdown 1 2 3 4 5 6 7 8 git clone git://github.com/nqounet/p5-md2reveal.git cd p5-md2reveal mv md2reveal.conf.sample md2reveal.conf mv assets/example.md.sample assets/example.md mv assets/example.md.conf.sample assets/example.md.conf git submodule init git submodule update morbo md2reveal 1 morbo md2reveal 1 2 3 4 { transition =\u0026gt; \u0026#39;zoom\u0026#39;, theme =\u0026gt; \u0026#39;default\u0026#39;, }; ","date":"2013-02-09T16:22:00+09:00","permalink":"https://www.nqou.net/2013/02/09/162200/","title":"あの reveal.js でのプレゼンを Markdown で簡単に書けるようにした"},{"content":" ","date":"2013-01-28T18:04:00+09:00","permalink":"https://www.nqou.net/2013/01/28/180400/","title":"gitoliteインストール時のうっかりハマりパターン"},{"content":"@nqounetです。\nMojoliciousで作っているアプリを、どうしてもindex.cgiで動かす必要があって、とりあえず、動くようになったのでメモしておきます。\nindex.cgi（昔は動いていた版）\n1 2 3 4 5 6 7 8 9 10 #!/user/hoge/perl5/perlbrew/perls/perl-5.14.2/bin/perl use utf8; use lib \u0026#39;lib\u0026#39;; use Mojo::Server::CGI; $ENV{MOJO_APP} = \u0026#39;MyApp\u0026#39;; $ENV{MOJO_MODE} = \u0026#39;production\u0026#39;; Mojo::Server::CGI-\u0026gt;new-\u0026gt;run; 1行目は、環境によって違いますが、Perlbrewを使っている場合はこんな感じだと思います。\nで、久しぶりに動かしてみると、Your Mojo is working!としか出ないようになっていました。\nどうしても、index.cgiとして動かしたかったのですが、どうも情報が少なくて調べてもよくわかりませんでした。\nindex.cgi（動いた版）\n1 2 3 4 5 6 7 8 9 #!/user/hoge/perl5/perlbrew/perls/perl-5.14.2/bin/perl use utf8; use lib \u0026#39;lib\u0026#39;; $ENV{MOJO_MODE} = \u0026#39;production\u0026#39;; require Mojolicious::Commands; Mojolicious::Commands-\u0026gt;start_app(\u0026#39;MyApp\u0026#39;); 結果だけを見れば、シンプルになりました。 Mojolicious::Commandsが万能になって、起動スクリプトと同じように書けるようになったようです。\nPerl鍋の報告も近々書きます。たぶん。\n","date":"2013-01-24T00:23:00+09:00","permalink":"https://www.nqou.net/2013/01/24/002300/","title":"Mojoliciousをどうしてもindex.cgiとして動かしたい"},{"content":"@nqounetです。\n「Perl鍋」は、少し前に宣言したPerl入学式の次のステップになりえるだろう勉強会です。\nPerl入学式は来年も続けていく、という事なので、そうなると、来年はPerlの勉強会が毎月2回は開催されることになります。（補講を考えれば今年も2回だったわけですが）\nそんなに勉強会ばかりあっても…、と思うかもしれませんが、対象となる方が違います。\nまた、プログラミング言語は使えるようになってからが面白いので、集まって他の人と情報交換しながら、その面白さを経験してもらえるんじゃないか、と思っています。\n時代としては、サーバーサイドの言語ではなく、フロントエンドやスマートフォンでの開発に使える言語、を使える人が多く求められているのだと思います。\nまた、便利なスクリプト言語は、Perl（パール）だけでなく、Ruby（ルビー）やPython（パイソン）などもあり、Perlを選ぶ理由も「テキストの処理が得意」とか「正規表現が便利」ではありえないようになりました。これらは他のスクリプト言語でも十分にできることだからです。\nこれからプログラミングを始めるに際して、あえてPerlを選ぶのは、ある意味酔狂でしょうね。\nそれでも、過去の資産を考えたり、限られた環境下で動作する言語を考えると、Perlもまだまだ使いどころが沢山あります。\n私自身がPerlを勉強してきた中で、本を読んでいてもよくわからないことがあったり、検索して見つけたスクリプトが動かせなかったり、ということはよくありました。\nPerlでもなんでもそうだと思いますが、文法を覚えたからといってすぐに使えるわけではありません。\n例えば、ログデータを解析するスクリプトを作るとした場合、ログファイルの読み込み、解析、解析後のデータを保存、という流れになります。\nファイルの読み込み、保存は「open」がわかっていればなんとでもなります。\nしかし、どのように「解析」するかは、文法ではどうにもなりません。\n文法は誰にとっても同じように学ぶことができますが、それをどのように使うのかは、人によって様々です。\nそうやって躓いた時に、気軽に質問できるような都合の良い勉強会は、ほとんど無かったと思います。\n私が「Perl入学式」をサポートしてきたり、Kansai.pmの代表になったり、という感じに行動しているのは、単純にPerlが好きというだけでなく、自分自身が躓いた時に必要だった「都合の良い勉強会」を作りたい、と思ったからです。\nYAPCに行くと、Twitterとかで「#Perl」を付けてつぶやいたら、誰かが答えてくれる、というようなことも言われます。\n実際その通りだと思うのですが、敷居が高い、と思う方も多いと思います。\nそういう勉強会がなければ作ればいいじゃない、ということで、「CPANモジュールガイド」が出てからずっと考えていた、この本を使ったコーディング会みたいなのをやることにしました。\n勉強会をやることは決めましたが、名前がなかなか大変です。\n場所は新大阪コワーキングを使うとして「Shin-osaka.pm」だとザックリ過ぎてイメージがわきにくいし、「ゆるPerl」だと緩さの基準が難しいし、「Perlもくもく会」というほど黙々とやりたいわけでもないし。\n私の中のイメージとしては、Perlの人達でコワーキングをしている感じの名前がいいなと思っていました。\nで、妻に助けを求めたところ、色々と案を出してくれて、その中でピンときたのが「Perl鍋」でした。\nそのせいか昨夜は鍋だったのですが、それは別の話。\nお鍋というのは、みんなでワイワイと突っついたりするものだし、出汁と具材の組み合わせで色々な味が楽しめる料理です。\nまた、都合の良いことに、「べ」は勉強会のイニシャルとして使えることに気づいたので、「Perlで何か作る勉強会」の短縮形という後付の理由も出来ました。\nというわけで、「Perl鍋」第1回は1月17日（木）の夜7時から開催します。\n第1回なので、探りながらというのもありますが、教材としては「CPANモジュールガイド」を使い、各自が好きなモジュールをテーマにして何かを作って、それを（希望者が）最後に発表する、という感じでやってみたいと思います。\n時間は9時までの2時間にしていますが、終電の時間などが大丈夫なら延長しても問題ありません。\nまた、時間も時間ですので、お腹が空いたらピザでもとって、お腹も満たしつつ交流もできたらな〜、と思います。\n","date":"2012-12-25T11:59:00+09:00","permalink":"https://www.nqou.net/2012/12/25/115900/","title":"#Perl鍋 という勉強会をやりますよ"},{"content":" ","date":"2012-12-19T23:43:00+09:00","permalink":"https://www.nqou.net/2012/12/19/234300/","title":"新大阪コワーキングとは一体何なのか"},{"content":" ","date":"2012-12-19T09:21:00+09:00","permalink":"https://www.nqou.net/2012/12/19/092100/","title":"Kansai.pmの代表になりました"},{"content":" ","date":"2012-12-18T14:33:00+09:00","permalink":"https://www.nqou.net/2012/12/18/143300/","title":"#Perl入学式 #11 で講師役をしてきました"},{"content":" ","date":"2012-12-03T23:31:00+09:00","permalink":"https://www.nqou.net/2012/12/03/233100/","title":"Namba.pm #0 に参加してきました #nambapm"},{"content":" ","date":"2012-12-01T00:00:00+09:00","permalink":"https://www.nqou.net/2012/12/01/000000/","title":"Bloggerの記事を書いたらTwitterに流す方法"},{"content":" 1 2 3 use LWP::Protocol::Net::Curl; use Net::Twitter::Lite; ... ","date":"2012-11-30T20:13:00+09:00","permalink":"https://www.nqou.net/2012/11/30/201300/","title":"Net::Twitter::Liteでの認証が爆速になって生きるのがつらい"},{"content":" ","date":"2012-11-28T12:00:00+09:00","permalink":"https://www.nqou.net/2012/11/28/120000/","title":"#Perl入学式 #10 で講師役をしてきました"},{"content":" ","date":"2012-11-13T09:00:00+09:00","permalink":"https://www.nqou.net/2012/11/13/090000/","title":"「nginx + WordPress + multisite」で、アップロードしたファイルをちゃんと表示できるようになった"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package MyappPL; use Mojo::Base \u0026#39;Mojolicious\u0026#39;; # This method will run once at server start sub startup { my $self = shift; # ここから if ($self-\u0026gt;log-\u0026gt;is_level(\u0026#39;debug\u0026#39;)) { no warnings \u0026#39;redefine\u0026#39;; *Mojo::Log::format = sub { my ($self, $level, @lines) = @_; my @caller = caller(4); my $caller = join \u0026#39; \u0026#39;, $caller[0], $caller[2]; return \u0026#39;[\u0026#39; . localtime(time) . \u0026#34;] [$level] [$caller] \u0026#34; . join(\u0026#34;\\n\u0026#34;, @lines) . \u0026#34;\\n\u0026#34;; }; } # ここまで追加 # Documentation browser under \u0026#34;/perldoc\u0026#34; $self-\u0026gt;plugin(\u0026#39;PODRenderer\u0026#39;); # Router my $r = $self-\u0026gt;routes; # Normal route to controller $r-\u0026gt;get(\u0026#39;/\u0026#39;)-\u0026gt;to(\u0026#39;example#welcome\u0026#39;); } 1; 1 2 3 4 5 6 7 [Thu Nov 8 17:31:14 2012] [info] [Mojo::Server::Daemon 198] Listening at \u0026#34;http://*:3001\u0026#34;. [Thu Nov 8 17:31:25 2012] [debug] [Mojolicious 31] Your secret passphrase needs to be changed!!! [Thu Nov 8 17:31:25 2012] [debug] [Mojolicious::Plugin::RequestTimer 42] GET / (Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11). [Thu Nov 8 17:31:25 2012] [debug] [Mojolicious::Routes 136] Routing to controller \u0026#34;MyappPL::Example\u0026#34; and action \u0026#34;welcome\u0026#34;. [Thu Nov 8 17:31:25 2012] [debug] [Mojolicious::Plugin::EPLRenderer 49] Rendering template \u0026#34;example/welcome.html.ep\u0026#34;. [Thu Nov 8 17:31:25 2012] [debug] [Mojolicious::Plugin::EPLRenderer 49] Rendering template \u0026#34;layouts/default.html.ep\u0026#34;. [Thu Nov 8 17:31:25 2012] [debug] [Mojolicious::Plugin::RequestTimer 29] 200 OK (0.037642s, 26.566/s). ","date":"2012-11-09T08:00:00+09:00","permalink":"https://www.nqou.net/2012/11/09/080000/","title":"Mojoliciousのログにパッケージ名と行数も出力してみた"},{"content":" 1 var $public_query_vars = array(\u0026#39;m\u0026#39;, \u0026#39;p\u0026#39;, \u0026#39;posts\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;withcomments\u0026#39;, \u0026#39;withoutcomments\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;search\u0026#39;, \u0026#39;exact\u0026#39;, \u0026#39;sentence\u0026#39;, \u0026#39;debug\u0026#39;, \u0026#39;calendar\u0026#39;, \u0026#39;page\u0026#39;, \u0026#39;paged\u0026#39;, \u0026#39;more\u0026#39;, \u0026#39;tb\u0026#39;, \u0026#39;pb\u0026#39;, \u0026#39;author\u0026#39;, \u0026#39;order\u0026#39;, \u0026#39;orderby\u0026#39;, \u0026#39;year\u0026#39;, \u0026#39;monthnum\u0026#39;, \u0026#39;day\u0026#39;, \u0026#39;hour\u0026#39;, \u0026#39;minute\u0026#39;, \u0026#39;second\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;category_name\u0026#39;, \u0026#39;tag\u0026#39;, \u0026#39;feed\u0026#39;, \u0026#39;author_name\u0026#39;, \u0026#39;static\u0026#39;, \u0026#39;pagename\u0026#39;, \u0026#39;page_id\u0026#39;, \u0026#39;error\u0026#39;, \u0026#39;comments_popup\u0026#39;, \u0026#39;attachment\u0026#39;, \u0026#39;attachment_id\u0026#39;, \u0026#39;subpost\u0026#39;, \u0026#39;subpost_id\u0026#39;, \u0026#39;preview\u0026#39;, \u0026#39;robots\u0026#39;, \u0026#39;taxonomy\u0026#39;, \u0026#39;term\u0026#39;, \u0026#39;cpage\u0026#39;);\u0026lt;br\u0026gt; ","date":"2012-11-08T13:50:00+09:00","permalink":"https://www.nqou.net/2012/11/08/135000/","title":"VPSでWordPressデビューできました！"},{"content":" ","date":"2012-11-05T14:34:00+09:00","permalink":"https://www.nqou.net/2012/11/05/143400/","title":"ランチでの出来事"},{"content":" ","date":"2012-11-04T03:11:00+09:00","permalink":"https://www.nqou.net/2012/11/04/031100/","title":"「WordCamp Osaka 2012」に行ってきましたよ"},{"content":" ","date":"2012-11-03T03:30:00+09:00","permalink":"https://www.nqou.net/2012/11/03/033000/","title":"PHP＋nginxに挫折したままWordCampに行ってきます"},{"content":" ","date":"2012-10-10T11:21:00+09:00","permalink":"https://www.nqou.net/2012/10/10/112100/","title":"YAPC::Asiaのスポンサープレゼントに当選した！"},{"content":" ","date":"2012-09-30T20:36:00+09:00","permalink":"https://www.nqou.net/2012/09/30/203600/","title":"「えるてぃそん」でも発表してきました"},{"content":" ","date":"2012-09-30T11:15:00+09:00","permalink":"https://www.nqou.net/2012/09/30/111500/","title":"YAPC::Asia Tokyo 2012 でLTしてきた"},{"content":" ","date":"2012-09-16T00:29:00+09:00","permalink":"https://www.nqou.net/2012/09/16/002900/","title":"ニフティクラウドC4SA勉強会を開催しました"},{"content":" ","date":"2012-09-15T22:47:00+09:00","permalink":"https://www.nqou.net/2012/09/15/224700/","title":"MA8ミートアップイベントに参加してきました"},{"content":" ","date":"2012-09-13T12:25:00+09:00","permalink":"https://www.nqou.net/2012/09/13/122500/","title":"iPad2のカバーを買い換えました"},{"content":" ","date":"2012-09-04T13:01:00+09:00","permalink":"https://www.nqou.net/2012/09/04/130100/","title":"コワーキング・フォーラム関西のオフィシャルサイトがオープンしています"},{"content":" ","date":"2012-08-31T13:50:00+09:00","permalink":"https://www.nqou.net/2012/08/31/135000/","title":"イベントアテンドを（今更）使ってみた"},{"content":" ","date":"2012-08-30T14:43:00+09:00","permalink":"https://www.nqou.net/2012/08/30/144300/","title":"なんでも自分で作りたい病を刺激する素敵なサービス"},{"content":" 1 my $input = \u0026#34;John is Great Man!\u0026#34;;\u0026lt;br\u0026gt;my $pattern = qr/(?:[jJ]ohn)/;\u0026lt;br\u0026gt;if ($input =~ $pattern) {\u0026lt;br\u0026gt; print \u0026#34;マッチした！\u0026#34;;\u0026lt;br\u0026gt;}\u0026lt;br\u0026gt; 1 my $input = \u0026#34;John is Great Man!\u0026#34;;\u0026lt;br\u0026gt;my $pattern = \u0026#34;(?:[jJ]ohn)\u0026#34;;\u0026lt;br\u0026gt;if ($input =~ $pattern) {\u0026lt;br\u0026gt; print \u0026#34;マッチした！\u0026#34;;\u0026lt;br\u0026gt;}\u0026lt;br\u0026gt; ","date":"2012-08-27T02:50:00+09:00","permalink":"https://www.nqou.net/2012/08/27/025000/","title":"Perl入学式 #7補講で講師役をしてきました"},{"content":" 1 No references other than a SCALAR reference can use a update column 1 2 3 4 5 6 7 my $upload = $self-\u0026gt;param(\u0026#39;upload\u0026#39;); if (ref $upload eq \u0026#39;Mojo::Upload\u0026#39;) { if ($upload-\u0026gt;filename) { $upload-\u0026gt;move_to(file(\u0026#39;path\u0026#39;, \u0026#39;to\u0026#39;, $upload-\u0026gt;filename)); } $upload = $upload-\u0026gt;filename; } ","date":"2012-07-21T12:00:00+09:00","permalink":"https://www.nqou.net/2012/07/21/120000/","title":"Mojoliciousのファイルアップロードではまった"},{"content":" 1 $ find . -type f -print0 | xargs -0 chmod 0604\u0026lt;br\u0026gt; 1 $ find . -type d -print0 | xargs -0 chmod 0705\u0026lt;br\u0026gt; ","date":"2012-07-12T13:35:00+09:00","permalink":"https://www.nqou.net/2012/07/12/133500/","title":"ファイルシステムで困った話"},{"content":" 1 ${$scalar_ref}\u0026lt;br\u0026gt;@{$array_ref}\u0026lt;br\u0026gt;%{$hash_ref}\u0026lt;br\u0026gt; 1 # 良くない例\u0026lt;br\u0026gt;@{$array_ref}[0]\u0026lt;br\u0026gt;%{$hash_ref}{key1}\u0026lt;br\u0026gt; 1 $array_ref-\u0026gt;[0]; # ${$array_ref}[0] と同じ\u0026lt;br\u0026gt;$hash_ref-\u0026gt;{key1}; # ${$hash_ref}{key1} と同じ\u0026lt;br\u0026gt; ","date":"2012-05-30T07:30:00+09:00","permalink":"https://www.nqou.net/2012/05/30/073000/","title":"Perl入学式#5で講師役をしてきました"},{"content":" ","date":"2012-05-26T07:30:00+09:00","permalink":"https://www.nqou.net/2012/05/26/073000/","title":"今度の日曜日はPerl入学式#5です"},{"content":" ","date":"2012-05-18T19:55:00+09:00","permalink":"https://www.nqou.net/2012/05/18/195500/","title":"Perl入学式#4 宿題の答え合わせ"},{"content":" ","date":"2012-05-16T17:32:00+09:00","permalink":"https://www.nqou.net/2012/05/16/173200/","title":"「Perl入学式#4補講」で講師役をしてきました"},{"content":" ","date":"2012-05-09T07:30:00+09:00","permalink":"https://www.nqou.net/2012/05/09/073000/","title":"今度の日曜日はPerl入学式#4補講です"},{"content":" ","date":"2012-04-28T07:00:00+09:00","permalink":"https://www.nqou.net/2012/04/28/070000/","title":"Social for Facebookと新しくなったSkype"},{"content":" ","date":"2012-04-27T07:00:00+09:00","permalink":"https://www.nqou.net/2012/04/27/070000/","title":"Perlのお約束"},{"content":" ","date":"2012-04-26T23:18:39+09:00","permalink":"https://www.nqou.net/2012/04/26/231839/","title":"Bloggerに移転します"},{"content":" ","date":"2012-04-26T15:01:00+09:00","permalink":"https://www.nqou.net/2012/04/26/150100/","title":"Bloggerを使うことにした"},{"content":" ","date":"2012-04-26T11:02:19+09:00","permalink":"https://www.nqou.net/2012/04/26/110219/","title":"大画面でWiiをやってみた"},{"content":" ","date":"2012-04-25T20:46:54+09:00","permalink":"https://www.nqou.net/2012/04/25/204654/","title":"本当に素晴らしい音楽アプリ「rad.io」"},{"content":" ","date":"2012-04-25T19:52:58+09:00","permalink":"https://www.nqou.net/2012/04/25/195258/","title":"rad.ioがよい感じ"},{"content":"何故かよくわかりませんが、今日更新したXPERIAのFacebookアプリは、今までに比べてかなり良くなった感じです。 元が悪すぎという話もあるのですが、まず起動が速くなりました。通信も速くなった気がします。 カメラとも連動するようになったようで、Facebookに投稿するためのカメラアプリも付いています。しかし、タイミングによって「カメラがない」という意味不明なエラーも起こします。 ようやく、使ってもいいかも、という風に思いました。\n","date":"2012-04-25T14:42:40+09:00","permalink":"https://www.nqou.net/2012/04/25/144240/","title":"Android版Facebookアプリがかなり良くなった件"},{"content":" まあ、何にしても画像が簡単にアップ出来ればそれはそれで良いということで。\n","date":"2012-04-24T13:45:16+09:00","permalink":"https://www.nqou.net/2012/04/24/134516/","title":"なんか色々と失敗してますが"},{"content":" テンプレートを少し編集してやりました。 追記の部分も書くことができる（はず）です。 成功していれば、この部分が追記になっている予定です。\n","date":"2012-04-24T13:17:18+09:00","permalink":"https://www.nqou.net/2012/04/24/131718/","title":"何が何でもメールで画像を投稿する"},{"content":" 今更ながら、メールでブログを更新する方法を色々と試していました。\n最近は、写真のアップロードなどはTwitterにしろFacebookにしろとても簡単にできます。\nしかし、ブログに関しては意外と面倒です。\nということで、メールで添付した画像をサムネイル画像と共に表示してくれるようなものがないか探しました。\n結構あるのはあったのですが、ブログのシステム内に設置するタイプはうまく動かなかったり（設置しているサーバーの問題かもしれませんが）、ウェブサービスタイプのものも、画像がちゃんと入らなかったり、記事が更新されなかったり、思うように行きません。\nそんな中で、唯一私が使いたい機能をほぼ実現してくれたのが「ubicast Mail Blogger」でした。\n今のところウェブからGmailで送るのが最適です。シンプルなメーラーだとテンプレート機能もちゃんと動きます。\nHTMLメールだとそのまま表示できるようなので、iPhotoやMailで加工済みのものを送っても問題ないようです。\n複数の画像を添付するとどうなるのかをこの投稿で試してみます。\nSEE ALSO ubicast Mail Bloggerサービス ","date":"2012-04-24T12:52:18+09:00","permalink":"https://www.nqou.net/2012/04/24/125218/","title":"ubicastがなかなか良い感じ"},{"content":"\n","date":"2012-04-24T11:55:17+09:00","permalink":"https://www.nqou.net/2012/04/24/115517/","title":"桜の通り抜けに行ってきました"},{"content":"\n","date":"2012-04-24T11:25:03+09:00","permalink":"https://www.nqou.net/2012/04/24/112503/","title":"iPhotoから送ってみるテスト"},{"content":" さっきの記事は結局変だったので修正した。 Mailは余計なお世話をしてくれるソフトだな。\n","date":"2012-04-24T11:19:08+09:00","permalink":"https://www.nqou.net/2012/04/24/111908/","title":"Gmailから送ってみるテスト"},{"content":"テンプレートがちゃんと効いていなかった。 ブログの方を確認してみると、リッチテキストになっていた。 Mailの仕業なのか？\n画像\n","date":"2012-04-24T11:10:54+09:00","permalink":"https://www.nqou.net/2012/04/24/111054/","title":"勝手にリッチテキストになったのか？"},{"content":"この花の写真を何度投稿しただろうか？ ","date":"2012-04-24T11:00:04+09:00","permalink":"https://www.nqou.net/2012/04/24/110004/","title":"ubicastテスト"},{"content":"今更感満載ですが、モブログを使ってみる。\n","date":"2012-04-24T03:33:07+09:00","permalink":"https://www.nqou.net/2012/04/24/033307/","title":"モブログテスト"},{"content":"","date":"2012-04-24T01:36:51+09:00","permalink":"https://www.nqou.net/2012/04/24/013651/","title":"ちょいとテスト"},{"content":" ","date":"2012-04-16T14:45:51+09:00","permalink":"https://www.nqou.net/2012/04/16/144551/","title":"Perl入学式#4で講師役をしてきました"},{"content":" ","date":"2012-04-14T14:55:02+09:00","permalink":"https://www.nqou.net/2012/04/14/145502/","title":"明日はPerl入学式#4です"},{"content":" ","date":"2012-03-20T18:27:54+09:00","permalink":"https://www.nqou.net/2012/03/20/182754/","title":"「Kyoto.pm Tech Talks #01」でPJAXについて発表してきました"},{"content":"nqounetです。 最近Macの調子が悪く、頻繁にフリーズするようになりましたが、皆さまいかがお過ごしですか？ LibreOfficeでダイアログがうんともすんとも言わない状態になってハマったので、また、いつか困ったときのために書いておきます。 MacではLibreOfficeを使っているのですが、フリーズからの回復（というか強制再起動）のために、コマンド＋コントロール＋電源ボタンで再起動していたいました。 その時、どんなタイミングなのかよくわかりませんが、LibreOfficeを起動すると「復元中に強制終了しました。復元しますか？」とダイアログが出てくるのですが、復元しない、と、復元する、のどちらを選んでも無限ループ状態で何も起きない、という状態になっていました。 ファイルの閲覧くらいは問題ないのですが、起動するたびに強制終了（コマンド＋オプション＋escキー）を選択しなければならないので、かなり鬱陶しい感じになっていました。 ウェブで調べても探し方が悪いのか、欲しい記事には行き着きませんでしたので、途方にくれていたのですが、ふと気づいてアクティビティモニタから何かわかるかもしれないので、調べてみました。 すると、怪しげな（？）ファイルを開いているのを発見しました。 /Users/nobu/Library/Saved Application State/org.libreoffice.script.savedState/data.data 名前からして「アプリケーションの状態を保存」してそうなので、このファイルをさっくりと消しました。 そして、恐る恐るLibreOfficeを開いてみると、例のダイアログは出て来ません！ 勝ちました。\n","date":"2012-03-14T14:30:10+09:00","permalink":"https://www.nqou.net/2012/03/14/143010/","title":"MacのLibreOfficeで復元中の強制終了でハマった件"},{"content":" ","date":"2012-03-12T02:05:27+09:00","permalink":"https://www.nqou.net/2012/03/12/020527/","title":"Perl入学式#2補講に行ってきました"},{"content":" 1 2 3 4 5 #! /usr/bin/env perl use strict; use warnings; print \u0026#34;Hello, world!\\n\u0026#34;; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #! /usr/bin/env perl use strict; use warnings; use utf8; =pod # binmode STDOUT, \u0026#34;:encoding(utf8)\u0026#34;; binmode STDOUT, \u0026#34;:utf8\u0026#34;; my $greeting = \u0026#34;\u0026lt;一度目の挨拶\u0026gt;\\n\u0026#34;; print $greeting; ここはコメント =cut print \u0026#34;#print\u0026#34;; # コメント; print qq{pr\u0026#34;int\\n}; print q{pri\u0026#34;nt\\n}; print qq/ds\\n/; 1 2 3 4 5 6 7 8 9 10 #! /usr/bin/env perl use utf8; use 5.12.1; use Data::Dumper::Concise; my %hash; $hash{qw/1 2 3/} = \u0026#39;hoge\u0026#39;; say $hash{qw/1 2 3/}; say Dumper \\%hash; my $var = scalar (2,4,6,8); say $var; ","date":"2012-02-27T03:00:00+09:00","permalink":"https://www.nqou.net/2012/02/27/030000/","title":"Perl入学式#2に行ってきました"},{"content":"毎年読むだけだった「Perl Advent Calendar Japan」に、今年は記事を書きました。 あくまでカジュアルにモジュールを使う感じで書いています。 「CGI=Perl」と思っている方はまだまだ多いと思いますので、少しでも最近のPerl（Modern Perl）を感じてもらえたらなぁ、という気持ちで書きました。\n","date":"2011-12-24T13:30:31+09:00","permalink":"https://www.nqou.net/2011/12/24/133031/","title":"「Perl Advent Calendar Japan 2011」に記事を書きました"},{"content":"Mojoliciousで、必ずhttpsの状態でアクセスされるように、こんな感じのコードを書いていたのですが、思ったように動かなくて困りました。 schemeの部分がhttpsにならなくて、無限ループになっていました。\n1 2 3 4 5 6 7 8 # NG if ( $self-\u0026gt;req-\u0026gt;is_secure ) { $self-\u0026gt;redirect_to(\u0026#39;/login\u0026#39;); } else { my $url = $self-\u0026gt;url_for(\u0026#39;/login\u0026#39;)-\u0026gt;scheme(\u0026#39;https\u0026#39;); $self-\u0026gt;redirect_to($url-\u0026gt;to_abs); } schemeは属性（attribute）という風になっていたし、オブジェクトの中身を見ても、schemeは値を持っているように見えたので、何故変更できないんだろう、と思っていました。 色々試しているうちに、to_absが文字列を返すのではないことに気づきました。 なんとなく、文字列を返すメソッドだと思っていたのですが、実際にはオブジェクトを返しています。 文字列を返しているように見えたのは、実際にはto_stringが呼ばれていたからです。 敗因は、to_absが何を返すのかを理解できていなかった事です。 実は、to_absを呼んだ時点で、現在のbaseになるURLがcloneされるので、先に設定した（つもりの）schemeが無視されてしまうようです。 つまり、schemeを設定しようと思えば、まずto_absで絶対URLオブジェクト（？）にしておいてからやれば良い、ということですね。\n1 2 3 4 5 6 7 8 # OK if ( $self-\u0026gt;req-\u0026gt;is_secure ) { $self-\u0026gt;redirect_to(\u0026#39;/login\u0026#39;); } else { my $url = $self-\u0026gt;url_for(\u0026#39;/login\u0026#39;)-\u0026gt;to_abs-\u0026gt;scheme(\u0026#39;https\u0026#39;); $self-\u0026gt;redirect_to($url); } 思い込みって怖いですね。\n","date":"2011-10-04T12:00:00+09:00","permalink":"https://www.nqou.net/2011/10/04/120000/","title":"Mojo::URLでschemeが変更できなくて困っていた話"},{"content":" ","date":"2011-09-27T06:00:00+09:00","permalink":"https://www.nqou.net/2011/09/27/060000/","title":"うわさのPJAXをMojolicious::Liteで書いてみた"},{"content":"mixiページが始まってから、また、mixiを使うようになりました。 少しだけですが。 で、コミュニティのトピックを見ていた時に、画像を一つ一つクリックして見るのが面倒になったので、どうにかならないかと思って書きました。\nWWW::Mixi::Scraperを使いました。 WWW::Mixi::Scraper::Plugin::ViewBBSを見てみたところ、トピックのサブジェクトの画像は取得しているのですが、コメントの画像は取得していないので、取得するように改造しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 --- WWW-Mixi-Scraper-0.33/lib/WWW/Mixi/Scraper/Plugin/ViewBBS.pm\t2011-09-20 09:43:10.000000000 +0900 +++ lib/WWW/Mixi/Scraper/Plugin/ViewBBS.pm\t2011-09-18 00:07:30.000000000 +0900 @@ -53,7 +53,9 @@ name =\u0026gt; \u0026#39;TEXT\u0026#39;; process \u0026#39;dd\u0026#39;, description =\u0026gt; $self-\u0026gt;html_or_text; - result qw( link name description ); + process \u0026#39;dd\u0026gt;div.communityPhoto\u0026gt;table\u0026gt;tr\u0026gt;td\u0026#39;, + \u0026#39;images[]\u0026#39; =\u0026gt; $scraper{images}; + result qw( link name description images ); }; $scraper{list} = scraper { @@ -77,6 +79,7 @@ # incompatible with WWW::Mixi to let comment links # look more \u0026#39;permanent\u0026#39; to make plagger/rss readers happier + $comment-\u0026gt;{images} = WWW::Mixi::Scraper::Plugin::_images( $comment-\u0026gt;{images} ) if defined $comment-\u0026gt;{images}; $comment-\u0026gt;{name_link} = _uri( $comment-\u0026gt;{link} ); $comment-\u0026gt;{link} = $stash-\u0026gt;{link} ? _uri( $stash-\u0026gt;{link} . \u0026#39;#\u0026#39; . $comment-\u0026gt;{subject} ) その上で、画像に直接アクセスするように、Pluginを2つほど追加しました。 lib/WWW/Mixi/Plugin/ShowBBSPicture.pm\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package WWW::Mixi::Scraper::Plugin::ShowBBSPicture; use strict; use warnings; use WWW::Mixi::Scraper::Plugin; use WWW::Mixi::Scraper::Utils qw( _uri ); validator {qw( id is_number comm_id is_number number is_number )}; sub scrape { my ($self, $html) = @_; my %scraper; $scraper{picture} = scraper { process \u0026#39;img\u0026#39;, link =\u0026gt; \u0026#39;@src\u0026#39;; result qw( link ); }; # bbs picture my $stash; $stash-\u0026gt;{link} = _uri($scraper{picture}-\u0026gt;scrape(\\$html)); return $stash; } 1; lib/WWW/Mixi/Plugin/ShowBBSCommentPicture.pm\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package WWW::Mixi::Scraper::Plugin::ShowBBSCommentPicture; use strict; use warnings; use WWW::Mixi::Scraper::Plugin; use WWW::Mixi::Scraper::Utils qw( _uri ); validator {qw( bbs_id is_number id is_number comm_id is_number number is_number )}; sub scrape { my ($self, $html) = @_; my %scraper; $scraper{picture} = scraper { process \u0026#39;img\u0026#39;, link =\u0026gt; \u0026#39;@src\u0026#39;; result qw( link ); }; # bbs picture my $stash; $stash-\u0026gt;{link} = _uri($scraper{picture}-\u0026gt;scrape(\\$html)); return $stash; } 1; これらを踏まえた上で、以下が本体です。 ./get_mixi_photo.pl http://mixi.jp/view_bbs.pl?id=38584544\u0026comm_id=6896\u0026page=all という感じに使います。 Config::Pitについては「パスワード設定をコードに書かない(Config::Pit) - モダンなPerl入門 - モダンなPerl入門」を参考にしてアカウント情報を入力してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #!/usr/bin/env perl #ｕｔｆ８ use utf8; use 5.12.1; use WWW::Mixi::Scraper; use lib \u0026#39;lib\u0026#39;; use Digest::MD5 qw( md5_hex ); use Encode; use Config::Pit; my $config = pit_get( \u0026#39;nqounet@mixi.jp\u0026#39;, require =\u0026gt; { email =\u0026gt; \u0026#39;username@domain.com\u0026#39;, password =\u0026gt; \u0026#39;password\u0026#39;, }, ); use Log::Handler; my $log = Log::Handler-\u0026gt;new( file =\u0026gt; { filename =\u0026gt; \u0026#39;log/app.log\u0026#39;, utf8 =\u0026gt; 1, maxlevel =\u0026gt; \u0026#39;info\u0026#39;,# \u0026#39;debug\u0026#39;, timeformat =\u0026gt; \u0026#39;%Y/%m/%d %H:%M:%S\u0026#39;, message_layout =\u0026gt; \u0026#39;[%T][%L] %m (%C)\u0026#39;, }, ); my $mixi = WWW::Mixi::Scraper-\u0026gt;new( mode =\u0026gt; \u0026#39;TEXT\u0026#39;, %{$config}, ); my $topic = shift(@ARGV); $log-\u0026gt;die(\u0026#39;Usage: ./get_mixi_photo.pl topicURL\u0026#39;) unless $topic; my @list = $mixi-\u0026gt;parse( $topic ); $log-\u0026gt;dump( debug =\u0026gt; \\@list ); # トピックのタイトル my $dir = md5_hex( Encode::encode_utf8( $list[0]{subject} ) ); mkdir $dir; open my $fh, \u0026#39;\u0026gt;:utf8\u0026#39;, qq{$dir/info.txt} or $log-\u0026gt;die( qq{Can not open $dir/info.txt.} ); print $fh $list[0]{subject}; close $fh; # トピックのトップ画像 for my $item ( @{$list[0]{images}} ) { $log-\u0026gt;dump( debug =\u0026gt; $item-\u0026gt;{link} ); my @urls = $mixi-\u0026gt;parse( $item-\u0026gt;{link} ); for my $url ( @urls ) { save_url_image( $url, $dir ); } } # 各コメントの画像 for my $comment ( @{$list[0]{comments}} ) { for my $item ( @{$comment-\u0026gt;{images}} ) { $log-\u0026gt;dump( debug =\u0026gt; $item-\u0026gt;{link} ); my @urls = $mixi-\u0026gt;parse( $item-\u0026gt;{link} ); for my $url ( @urls ) { save_url_image( $url, $dir ); } } } # 保存一式 sub save_url_image { my ($url, $dir) = @_; my $link = $url-\u0026gt;{link}-\u0026gt;as_string; $log-\u0026gt;dump( debug =\u0026gt; $url-\u0026gt;{link} ); my ($ext) = $link =~ /(\\.[a-zA-Z]+)$/ms; $log-\u0026gt;dump( debug =\u0026gt; $ext ); $ext = \u0026#39;.jpg\u0026#39; unless $ext; my $filename = md5_hex( $link ) . $ext; return if -f qq{$dir/$filename}; my $content = $mixi-\u0026gt;{mech}-\u0026gt;get_content( $url-\u0026gt;{link} ); $log-\u0026gt;dump( debug =\u0026gt; $content ); open my $fh, \u0026#34;\u0026gt;:raw\u0026#34;, qq{$dir/$filename} or $log-\u0026gt;die( qq{Can not open $dir/$filename.} ); print $fh $content; close $fh; } ","date":"2011-09-20T08:56:57+09:00","permalink":"https://www.nqou.net/2011/09/20/085657/","title":"mixiのコミュニティのトピックから画像をダウンロードするスクリプトを書いた"},{"content":"sakuraサーバーのプレミアムプランを契約したので、早速cpanmをインストールしようと、以前まとめた内容でやってみました。 1行目からアウトでした。 ということで、curlを使ったやり方に変更し、2行目までを同時に実行しようとしました。\n1 curl -L http://cpanmin.us | perl - --local-lib=~/perl5 local::lib App::cpanminus ところが、local::libが上手く入りません。 幸い、cpanmは入ったので、コレでいいかと思っていたのですが、シェルで使ったときに何かと不便な（PATHが通っていなかったり、「-l ~/perl5」を毎回指定しなければいけなかったり、@INCに「/home/username/perl5/lib/perl5」が追加されなかったり）ので、まずはそれらの設定を手作業でやりました。 ホームディレクトリの「.cshrc」を開いて、 set path = (/sbin /bin /usr/sbin /usr/bin /usr/local/sbin /usr/local/bin $HOME/bin) となっていた部分に「$HOME/perl5/bin」を追記して、以下のようにしました。\n1 set path = ($HOME/perl5/bin /sbin /bin /usr/sbin /usr/bin /usr/local/sbin /usr/local/bin $HOME/bin) で、あとは適当な所に以下の2行を追記しました。「username」は適宜読み替えてください。\n1 2 setenv PERL_CPANM_OPT \u0026#34;-l ~/perl5\u0026#34; setenv PERL5LIB \u0026#34;/home/username/perl5/lib/perl5\u0026#34; その状態だと、local::libがすんなりと入ったので、実際にはこうすればよかったのでは？というのを次回のために書いておきます。 うまくいくかどうかはわかりません。\n1 2 curl -L http://cpanmin.us | perl -I$HOME/perl5/lib/perl5 - --local-lib=~/perl5 local::lib App::cpanminus echo \u0026#39;eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)\u0026#39; \u0026gt;\u0026gt; ~/.cshrc どうでしょうね、コレ。\n","date":"2011-09-10T14:28:43+09:00","permalink":"https://www.nqou.net/2011/09/10/142843/","title":"sakuraサーバーでcpanmを快適に使うまでにしたこと、あるいは、2行でcpanmを使う方法"},{"content":" ","date":"2011-07-23T06:00:00+09:00","permalink":"https://www.nqou.net/2011/07/23/060000/","title":"MacOSX Lionにアップデートした"},{"content":"デジカメや携帯で写真を撮ったのをパソコンに取り込むのって、結構面倒です。 まあ、MacだとiPhotoに任せてやればいいのかもしれませんが、正直なところiTunesに曲の管理を任せるのも微妙に思える今日この頃。 写真の管理くらいは自分でやっておきたい、と思うわけです。 なので、自力で（というかiPhotoを使わずに）整理するために必要なソフトを探していました。 で、ようやく使い方にフィットしたソフトを見つけることができたので、書いておこうと思います。\n今の時点で使っているのは、「Shupapan」と「Th-MakerX」です。 どちらも結構気に入っています。 以下は暇な方だけどうぞ。 デジカメで撮った写真をパソコンに取り込むと、次に写真を撮ると番号がリセットされる場合があります。 今使っているもので言うとXPERIAがそうです。 なので、そのままコピーすると、上書きしてしまうので名前を変えてやる必要があります。 名前は撮影日時にしておくのが重複しなくて良いかなと。 今のところ、毎秒何枚というような高速撮影はできないので、「年月日時分秒」で、14桁の名前にしています。 そして、最近は特にそうですが、ブログなどにアップロードするのに画像のサイズを縮小したい。 一時は、縮小した後の画質にも（わからないなりに）こだわっていたのですが、よほど変でなければ問題ない、と思えるようになりました。 簡単にまとめて処理したいので、操作のシンプルさの方を優先したい。 それらの条件を踏まえて、Windowsで使っている（いた？）のは、「Flexible Renamer」と「縮小専用」です。 「Flexible Renamer」は、なによりEXIF情報から撮影日時を拾ってくれるのが良いですね。 あと、その名のとおり、結構細く設定もできる（正規表現も使えます）ので、他の用途にも使ってます。 「縮小専用」はフィット機能（任意のボックスサイズ内に収める）が気に入って使っています。 色々ソフトを使ってきましたが、この機能は見かけなかったと思います。 フリーソフトに慣れてしまっている私は、Macを使い始めて、色々と探しました。 リネームソフトの「Shupapan」の方は早い段階で見つかりました。 プリセットを作れるのが良いですね。 画像の縮小はなかなか気に入ったのがありませんでした。 Windowsで使っている「縮小専用」のMac版（Adobe AIR版）も使ってみたのですが、いまいち不安定でした（特に大きいサイズのもの）。 で、Vectorで「Th-MakerX」を見つけました。 Vectorも最初に見ていたと思うのですが、見落としていたのでしょう。 このソフトは、フィット機能があるのはもちろん、プリセットを設定できるのが良いですね。 サムネイル用と画面表示用で切り替えて使えて便利です。 Macはフリーソフトが少ないイメージでしたが、探せば良いものがありますね。\n","date":"2011-07-06T06:00:00+09:00","permalink":"https://www.nqou.net/2011/07/06/060000/","title":"写真の整理に使っているMacOSXのフリーソフト"},{"content":" 1 2 $ rm -rf concrete/ $ ln -s /path/to/concrete_dir concrete 1 2 3 4 # if \u0026#34;concrete/\u0026#34; does NOT exist in DIR_BASE then we set multi_site to on if (!is_dir(DIR_BASE . \u0026#39;/\u0026#39; . DIRNAME_APP)) { define(\u0026#34;MULTI_SITE\u0026#34;, 1); } 1 2 \u0026lt;?php require(\u0026#39;/path/to/concrete_dir/dispatcher.php\u0026#39;); ","date":"2011-07-05T06:00:00+09:00","permalink":"https://www.nqou.net/2011/07/05/060000/","title":"concrete5のプログラムファイルを使い回す方法"},{"content":"WindowsでずっとPerlをやってきたわけですが、Mac（OSX）になって大きく違いを感じるのが、改行コードとパーミッションです。 改行コードの問題については分かっていたはずなのですが、FFFTPの設定によってテキストモード（ASCIIモード）でアップロードされるので、あまり意識していませんでした。 昔は、エディタの改行コードをUNIXタイプ（LF）という風に設定していたのですが、いつの間にかWindowsタイプ（CRLF）になっていたようです。 で、Macになってローカル環境で実行したときに、こんなエラーが出たので、改行コードの違いに気づきました。\n1 /usr/bin/perl^M: bad interpreter: No such file or directory そこで思い出したのが、改行コードを変更するワンライナーでした。 と言っても、ワンライナー自体を思い出したのではなく、そういうワンライナーがある、という記憶を思い出しただけです。 ググって調べた結果に、少しの知識を加えてできたのが、以下のワンライナーです。\n1 $ find . -name \u0026#34;*.cgi\u0026#34; | xargs perl -i.bak -pe \u0026#34;s/\\x0d\\x0a/\\x0a/g\u0026#34; ググッてみると、最後の「g」がなかったり、\\x0dと\\x0aの事を「\\r」「\\n」という風に書いていたり、という、ちょっと残念な感じのワンライナーもしばしば見受けられました。 本文のすべての改行を変更するので、置換処理の繰り返し「g」は必要だろうし、\\rや\\nは改行コード自体を置換するのには不向き、という話があったと思うので。 また、0d0aは時々8進数で（\\015\\013とか。）書いてあったりするのですが、私の中では16進数で覚えていることもあって、とっさに8進数では出てこないです。 で、このワンライナーを実行すると、バックアップファイルを作成してもらえるので、もし何かあっても安心ですね。 バックアップファイルを消すときは、こんな感じで。\n1 $ find . -name \u0026#34;*.cgi.bak\u0026#34; | xargs rm あと、ローカル環境で戸惑うのが、パーミッションです。 今まで、あまりにも意識しなさ過ぎたということがよくわかります。 サーバー一式は、結構頑張って設定していたのですが、結局上手くいかなくて、最終的にはXAMPPに落ち着きました。 Apacheの設定は難しいですね。 で、そのローカルサーバーにアクセスすると、500エラーなわけです。 それで、XAMPPのサーバーのログを見ることになるわけですが、大体が「Permission denied」という事になっていて、ガックリです。 例えば「*.cgi」なファイルは、自動的に実行可能状態で保存するようなソフトはないんでしょうかね。\n","date":"2011-07-04T06:00:00+09:00","permalink":"https://www.nqou.net/2011/07/04/060000/","title":"Windowsでテキストを扱う時も改行コードはLFにしようと思った話と、パーミッションの変更が面倒な話"},{"content":" ","date":"2011-07-03T06:00:00+09:00","permalink":"https://www.nqou.net/2011/07/03/060000/","title":"ハッシュ系jQueryプラグインをいくつか試してみた"},{"content":" ","date":"2011-06-29T06:00:00+09:00","permalink":"https://www.nqou.net/2011/06/29/060000/","title":"Feedをまとめるのはgoogleリーダーが便利らしい"},{"content":"Feedをまとめて時系列に並べて表示したいと思って色々とやってます。 PerlerならPlaggerを使ってやればいいんですが、そういうウェブサービスをさがすのも必要だと思って。 あと、Perlが自由に使えない環境とかもあるし。 で、NetworkedBlogsというサイトがそういう事をやってそうなのを見つけて、Facebookを経由して試しています。 それと同時に、PostToTwitterプラグインの使用をやめました。 最近は、色々なサービスを連携させることができるので、取捨選択が大変ですね。 そういったサービスの恩恵を受けるのには、（少なくとも）Feedを用意することが必要になってきますね。\n","date":"2011-06-28T06:00:00+09:00","permalink":"https://www.nqou.net/2011/06/28/060000/","title":"ブログとTwitterの連携をFacebook経由にしてみた"},{"content":"10.6.8へアップデート、と言っても、結局のところWindowsと同じで、自動的にアップデートされました。 まあ、Windowsと同じ、というと、色々な意味で反感を買いそうですが。\nまあ、こんな感じです。 ちなみに、このスクリーンショットは、標準の機能で撮ったものです。 command＋shift＋4を押した後に、spaceキーを押すと、ウィンドウ単位でスクリーンショットが撮れるモードになります。 Windowsでも、アクティブなウィンドウを撮るソフトはありましたが、その機能が標準で付いてくるのは凄いと思います。\n","date":"2011-06-27T06:00:00+09:00","permalink":"https://www.nqou.net/2011/06/27/060000/","title":"MacOSX10.6.8へアップデート"},{"content":"無職になってから新しいマシンを買うというのも贅沢な話ではありますが。 「MacBook Pro」を買いました。 明日で、購入してから2週間になります。 通販で買ったのですが、日曜日に手続きをして、月曜日に現品が到着しました。 驚きの速さですね。\nキーボードの感覚の違いが、未だにあります。 特に、カーソルキーが小さいのと、home、end、pageup、pagedownがないのと、deleteがWindowsでいうBackspaceで、deleteキー自体はない、というようなことです。 特にdeleteキーの違いは痛いです。 control＋Dキーのショートカットキーはあるようですが、いまいち使いづらい。 そういうのがストレスで、持っていたUSBのキーボード（安物です）を使ってみたのですが、それもイマイチ。 というのも、今度はトラックパッドが使いづらいのでした。 どうも、中途半端な状況になってしまったようです。 何故、そんな中途半端な状況になったかというと、トラックパッドが便利すぎるからでしょう。 特に二本指での操作感が素晴らしい。 スクロールも速いし。 pageup、pagedownは、これのおかげで問題なくなりました。 トラックパッド依存症になりかけなので、これがないと困ってしまいます。\n","date":"2011-06-26T06:00:00+09:00","permalink":"https://www.nqou.net/2011/06/26/060000/","title":"そういえば、Macを買いましたよ"},{"content":"Mojolicious::Liteネタですが、もう周回遅れ気味ですね。\n6月3日にversion1.41になっています。\nこのスクリプトは、 devel.nqou.netを作ったとき に、ソースを見るビューアとして書いたものを、Mojolicious::Liteで書きなおしたものです。\nサンプルばかりではなく、実際に使うもの（使えるものかどうかはともかく）を作ってみるのも良いものですね。\n","date":"2011-06-09T06:00:00+09:00","permalink":"https://www.nqou.net/2011/06/09/060000/","title":"sourcereader.cgiをMojolicious::Liteで書きなおした"},{"content":"去る2011年5月31日。 学校を卒業してからずっと勤めていた会社を辞めました。 これまで、このブログでも愚痴っぽいことを書いたこともありましたが、辞める事を決意するのは大変でした。 妻に相談を持ちかけたのは、確か2月の中頃だったと思います。 一人で色々と考えて行き詰ってしまったので、吐き出すように話した記憶があります。 生活を考えれば、サラリーマンでいることが最も堅実なわけで、当然反対されるだろうと思いました。 ところが、意外にも妻のほうがノリ気になってしまって、逆に色々とアイディアを考えてくれるほどでした。 実際に退職するには、他にもクリアしなければいけない問題はあったのですが、なんとかクリアできました。 ということで、今のところ無職です。 2,3年前に趣味プログラマとしてPerlの集まりに参加したのですが、その時に言われたことを思い出しました。 「プログラミングが好きなんだったら、何故そういう仕事をしてないの？」 一瞬言葉に詰まりました。 そして、色々と（自分に対しても）言い訳をしていました。 今はプログラマとして就職しているわけではないので、本職ではありませんが、そのうちちゃんと言いたいと思います。 「プログラミングが好きなので、プログラマをやっています。」\n","date":"2011-06-07T04:28:48+09:00","permalink":"https://www.nqou.net/2011/06/07/042848/","title":"もう日曜プログラマではなくなった"},{"content":"設定がちゃんと出来ているのか不安なのでテスト。\n","date":"2011-05-19T19:55:24+09:00","permalink":"https://www.nqou.net/2011/05/19/195524/","title":"FacebookにRSSを流すテスト"},{"content":" ","date":"2011-05-14T13:16:57+09:00","permalink":"https://www.nqou.net/2011/05/14/131657/","title":"jGmapsプラグインがいまいちだった件"},{"content":"「concrete5」というCMSをOSC2011Kobeで知って、面白そうだったので、インストールしてみた。\nありがたい事に「Xrea/Coreserver インストールガイド :: concrete5日本語公式サイト」というページがあるので、そちらを参考にしながらインストールします。 ポイントになるのは「5. 「.htaccess」と「php.ini」ファイルの設置」でしょう。 PHPをCGIとして動かす設定がないと、セーフモードで動くらしいので。 で、ちゃんとtmpディレクトリも作成します。 使ったバージョンは「concrete5.4.1.1.1.ja」です。 ディレクトリも同じ名前になりますので、とりあえず名前を変えておきたいところですが、なんとなくシンボリックリンクにしておきます。\n1 $ ln -s concrete5.4.1.1.1.ja c5 とりあえず「c5」という名前にしておきます。 さて、ここまで来たら今度はブラウザの出番です。 アップロードした先にアクセスしてみます。 今回は、「devel.nqou.net」の中に作ったので、「http://devel.nqou.net/c5/」にアクセスします。 オールグリーンになっていました。 好調ですね。 さて、フォームを入力していきます。 サイト名とメールアドレスは適切に、サーバーの欄については「localhost」、DB名欄とユーザー名欄はメモしている「DB/ユーザー名」を、パスワード欄にはパスワードを入力します。 全て入力したら、いよいよインストールです。 しばらく待つと、無事インストール終了のようです。 管理IDとパスワードが画面上にでました。 そのまま、ホームを表示すると管理モードになっています。 ついでなので、管理画面→ユーザー・グループ管理→admin→ユーザー編集、と画面を推移させて、すぐにパスワードを変更しました。 また、これは既知の問題らしいですが、スタイルシートがうまく反映されていません。 「10. スタイルシート非表示問題の応急処置法」に書いてあるようにしても良いのですが、この場合テーマを変えるたびに対応する必要がありそうなので、スクリプトの方を直しましょう。 httpヘッダを見てみると、「Expires」が「Date」と同じ時間になっているのが原因らしいのがわかります。 本来なら、ココを適切に直したいところですが、そこはよく分からないので消してしまいましょう。 「/concrete/tools/css.php」を開いて、29行目の\n1 header(\u0026#34;Expires: \u0026#34;. gmdate(\u0026#34;D, j M Y H:i:s\u0026#34;, time() + DAY) .\u0026#34; GMT\u0026#34;); の行をコメントにしていまいます。 ブラウザをリロードすると、スタイルシートが反映されていました。 テーマを変えても問題ありません。 さて、これでとりあえずはうまく動いています。 しばらく弄ってみることにします。 ↓これです。 concrete5.nqou.net :: ホーム\n","date":"2011-04-17T11:26:50+09:00","permalink":"https://www.nqou.net/2011/04/17/112650/","title":"CORESERVERでconcrete5を動かしてみた"},{"content":"AutoInstall.pmはそのままでは動きません。 lib::xiの方は、cpanmではインストール出来ません。 まあ、どうせWindowsなんて。 と、言っていても仕方ありません。 なんとかしようではありませんか。 AutoInstallが動かないのは、Windowsに「/usr/bin/env」が無いだけなので、ちょっと書き換えれば普通に使えます。 重宝していました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package AutoInstall; # perl -MAutoInstall pl.pl use strict; use warnings; BEGIN { push @INC, sub { my ($self, $filename) = @_; my ($modulename) = ($filename =~ /^(.*)\\.pm$/m); return unless $modulename; $modulename =~ s{/}{::}g; # system(\u0026#39;/usr/bin/env\u0026#39;, \u0026#39;cpanm\u0026#39;, $modulename); system(qq{cpanm $modulename}); my $result; foreach my $prefix (@INC) { ref($prefix) and next; my $realfilename = \u0026#34;$prefix/$filename\u0026#34;; if (-f $realfilename) { open my $fh, \u0026#34;\u0026lt;\u0026#34;, $realfilename; return $fh; } } }; } 1; 一方、lib::xiの方は、生のファイルをそのまま使えば動きます。 生のファイルを「xi.pm」という「名前を付けて保存」して、script.plと同じフォルダにある「lib」という名前のフォルダの中にコピーします。\n1 2 3 - script.pl - lib - xi.pm lib::xiはcpanmに対してオプションを設定できるのがいいですね。 最初にフォルダ名を書くと、自動的に「\u0026ndash;local-lib」オプションのフォルダ名として認識してくれます。 なので、スクリプトに以下のように書いておくと、\n1 use lib::xi qw/extlib/; そのスクリプトを実行するごとに、足りないモジュールがあれば、スクリプトと同じフォルダにある「extlib」というフォルダの中にインストールされていきます。 しかも、別途「use lib」しなくても良いので、スクリプトもすっきりです。 ただし、この場合に注意が必要なのは、「extlib」をあらかじめ作っておく必要がある、ということです。 「extlib」以下のフォルダは自動的に作ってくれますので、「extlib」という名前のフォルダだけは作っておきましょう。\n","date":"2011-03-26T10:38:13+09:00","permalink":"https://www.nqou.net/2011/03/26/103813/","title":"AutoInstall.pmとlib::xiとWindows"},{"content":"未だにNanoAを使ってみたりしています。 Mojoliciousも面白いのですが、ファイルの操作（Mojo::Asset::File）に慣れないため、ついついPath::Classとか使ってしまうのですが、それだとMojoliciousを使っている意味が無いような気がして。 閑話休題。 NanoAで使うテンプレートを書いていて、今更気づいたというか、見かけていたはずなのに理解出来ていなかったことがようやく理解できたので、恥を晒してみます。\n2年以上前に失敗していた時は、普通にifブロックを使って対処したのです。\n","date":"2011-03-24T02:59:01+09:00","permalink":"https://www.nqou.net/2011/03/24/025901/","title":"NanoAのtemplateでは条件演算子を使おう"},{"content":"XREAからCORESERVERに引越ししました。 「XREA+（2400円/1年）」と「CORE-MINI（2500円/1年）」は、一年契約で100円しか違わないのに、サービス内容（サーバーの性能、容量等）は格段に違います。 サーバーの移転は面倒ですが、価値はあると思います。\nサーバーを変えるにあたって、さっそくcpanmを導入しました。 レンタルサーバーでPerlを満足に使おうと思えば、cpanmは必須となりました。 CORESERVERではSSHが使えるので便利です。 また、一時期local::libと組み合わせて使う方法も色々と書かれていましたが、情報がかなり整理されていたので、改めてここにまとめておきます。\n1 2 3 wget http://cpanmin.us perl cpanm --local-lib=~/perl5 local::lib App::cpanminus echo \u0026#39;eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)\u0026#39; \u0026gt;\u0026gt; ~/.bashrc 1行目は、cpanmをダウンロードしています。 2行目は、ダウンロードしたcpanmを使って、local::libとcpanmをインストールします。 3行目は、local::libのセットアップです。 念のため、この後一度ログアウトしてから再度ログインすると良いでしょう。 これを行うことで、cpanmを普通に使うだけでホームディレクトリ内にインストールすることが可能になります。\n1 cpanm Path::Class とか、\n1 cpanm Text::MicroTemplate とか、やりたい放題なわけです。 で、SSHからはこのままで良いのですが、CGIからだと少し工夫が必要です。 CORESERVERのホームディレクトリは「/virtual/ユーザー名」となっているので、簡単に書く場合は以下のような書き出しになります。\n1 2 3 4 #!/usr/bin/perl use lib qq{/virtual/ユーザー名/perl5/lib/perl5}; use Path::Class; ... 他に、環境変数（$ENV{HOME}）や、モジュール（FindBin等）を使う方法も考えられます。 とにかく、インストールされるディレクトリを「use lib \u0026ldquo;\u0026hellip;\u0026quot;;」として指定すればよいだけです。 これでレンタルサーバーでもPerlが楽しめますね。\n","date":"2011-02-12T23:18:09+09:00","permalink":"https://www.nqou.net/2011/02/12/231809/","title":"サーバーの引越しとlocal::libとcpanm"},{"content":"ということで、まずは結果から。\n1 2 3 4 5 6 7 8 9 10 11 12 Benchmark: timing 10000 iterations of Dumper, JSON, MsgPack, Storable, YAML... Dumper: 5 wallclock secs ( 4.02 usr + 0.00 sys = 4.02 CPU) @ 2485.09/s (n=10000) JSON: 1 wallclock secs ( 1.37 usr + 0.02 sys = 1.39 CPU) @ 7199.42/s (n=10000) MsgPack: 1 wallclock secs ( 0.72 usr + 0.00 sys = 0.72 CPU) @ 13927.58/s (n=10000) Storable: 2 wallclock secs ( 1.53 usr + 0.05 sys = 1.58 CPU) @ 6349.21/s (n=10000) YAML: 40 wallclock secs (40.19 usr + 0.06 sys = 40.25 CPU) @ 248.45/s (n=10000) Rate YAML Dumper Storable JSON MsgPack YAML 248/s -- -90% -96% -97% -98% Dumper 2485/s 900% -- -61% -65% -82% Storable 6349/s 2455% 155% -- -12% -54% JSON 7199/s 2798% 190% 13% -- -48% MsgPack 13928/s 5506% 460% 119% 93% -- 以下ベンチマークのソースです。 「use 5.12.1;」は、うっかりレンタルサーバーなどで実行しないようにする意味でも重要です。 まあ、私にとっては。 あと、せっかく「Data::Encoder」を使うので、encodeとdecodeは共通化して使ってみることにしました。 メソッドが共通化されるとソースが読みやすくて良いですね。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env perl #ｕｔｆ８ use utf8; use 5.12.1; # use Acme::PerlTidy; use Benchmark qw(:all); use Data::Dump qw/dd/; use Data::Encoder; sub run { my $encoder = shift; my $enc = $encoder-\u0026gt;encode([qw/foo bar/]); my $data = $encoder-\u0026gt;decode($enc); # dd $data; } cmpthese( timethese( 10000, { # Data::Encoder::JSON JSON =\u0026gt; sub { my $encoder = Data::Encoder-\u0026gt;load(\u0026#39;JSON\u0026#39;); \u0026amp;run($encoder); }, # Data::Encoder::Data::Dumper Dumper =\u0026gt; sub { my $encoder = Data::Encoder-\u0026gt;load(\u0026#39;Data::Dumper\u0026#39;); \u0026amp;run($encoder); }, # Data::Encoder::Data::MessagePack MsgPack =\u0026gt; sub { my $encoder = Data::Encoder-\u0026gt;load(\u0026#39;Data::MessagePack\u0026#39;); \u0026amp;run($encoder); }, # Data::Encoder::Storable Storable =\u0026gt; sub { my $encoder = Data::Encoder-\u0026gt;load(\u0026#39;Storable\u0026#39;); \u0026amp;run($encoder); }, # Data::Encoder::YAML YAML =\u0026gt; sub { my $encoder = Data::Encoder-\u0026gt;load(\u0026#39;YAML\u0026#39;); \u0026amp;run($encoder); }, } ) ); ","date":"2011-01-19T01:22:32+09:00","permalink":"https://www.nqou.net/2011/01/19/012232/","title":"Data::EncoderでBenchmarkしてみた"},{"content":"色々と駆使して今更チャットを作ってみたわけですが、適当に追加していると、本当に追加されているのかよく分からない場合があります。 元々はこんな感じです。\n1 2 3 var add_log = function(text){ $(\u0026#39;#for_ajax\u0026#39;).prepend(\u0026#34;\u0026lt;p\u0026gt;\u0026#34; + text + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;); }; で、それを以下のようにやってみました。\n1 2 3 var add_log = function(text){ $(\u0026#39;#for_ajax\u0026#39;).hide().prepend(\u0026#34;\u0026lt;p\u0026gt;\u0026#34; + text + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;).fadeIn(); }; fadeInだけだと、エフェクトがかからないので一旦hideしてやらないといけないようです。 ただ、これだと今までに書いてある記事もすべて消えてから、全体にfadeInがかかるのでいまいちな感じです。 新しく追加する部分だけにエフェクトが欲しいと思って調べてみたところ、ありました。\n1 2 3 var add_log = function(text){ $(\u0026#34;\u0026lt;p\u0026gt;\u0026#34; + text + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;).hide().prependTo(\u0026#39;#for_ajax\u0026#39;).fadeIn(); }; すでにある要素に新しい記事を挿し込む、という順序ではなく、新しい記事をすでにある要素に挿し込む、という順序でやれば、新しい記事だけにエフェクトを掛けてやることが可能でした。 どちらを主体にするかでエフェクトの範囲を決めることができます。 リファレンスを見ていると、appendToとかprependToとかをどういう風に使うのか不思議だったのですが、ようやく使い方を発見した感じです。 これは、なかなか良いですね。\n","date":"2011-01-15T16:04:36+09:00","permalink":"https://www.nqou.net/2011/01/15/160436/","title":"jQueryで追加する部分だけにエフェクトをかける方法を覚えた"},{"content":" 1 2 3 4 5 6 7 8 9 10 my @json; for my $msg (@{$messages}) { push @json, { id =\u0026gt; $msg-\u0026gt;id, msg =\u0026gt; $msg-\u0026gt;msg, ts =\u0026gt; $msg-\u0026gt;ts, }; } $self-\u0026gt;render(json =\u0026gt; [@json]); 1 2 3 4 5 my @json; for my $msg (@{$messages}) { push @json, $msg-\u0026gt;get_columns; } $self-\u0026gt;render(json =\u0026gt; [@json]); 1 2 my @json = map { $_-\u0026gt;get_columns } @{$messages}; $self-\u0026gt;render(json =\u0026gt; [@json]); 1 $self-\u0026gt;render(json =\u0026gt; [map { $_-\u0026gt;get_columns } @{$messages}]); ","date":"2011-01-11T20:42:58+09:00","permalink":"https://www.nqou.net/2011/01/11/204258/","title":"Data::Modelで$row-\u003eget_columnsを覚えた"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #!/usr/bin/env perl #ｕｔｆ８ # use Acme::PerlTidy; use utf8; package DataModel; use base \u0026#39;Data::Model\u0026#39;; use Data::Model::Schema; use Data::Model::Driver::DBI; my $dbfile = qq{$0.db}; my $dsn = qq{dbi:SQLite:dbname=$dbfile}; my $driver = Data::Model::Driver::DBI-\u0026gt;new( dsn =\u0026gt; $dsn, connect_options =\u0026gt; {sqlite_unicode =\u0026gt; 1}, ); base_driver($driver); install_model messages =\u0026gt; schema { key \u0026#39;id\u0026#39;; column id =\u0026gt; int =\u0026gt; {auto_increment =\u0026gt; 1}; column msg =\u0026gt; char =\u0026gt; {required =\u0026gt; 1}; column ts =\u0026gt; char =\u0026gt; {required =\u0026gt; 1}; }; unless (-f $dbfile) { my $dbh = DBI-\u0026gt;connect($dsn, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, {RaiseError =\u0026gt; 1, PrintError =\u0026gt; 0}) or DBI-\u0026gt;errstr; for my $sql (__PACKAGE__-\u0026gt;as_sqls) { $dbh-\u0026gt;do($sql) or die $dbh-\u0026gt;errstr; } $dbh-\u0026gt;disconnect; } package main; use Mojolicious::Lite; use Mojo::Util qw/md5_sum/; app-\u0026gt;secret(md5_sum $0 )-\u0026gt;log-\u0026gt;level(\u0026#39;debug\u0026#39;)-\u0026gt;path(qq{$0.log}) -\u0026gt;debug(app-\u0026gt;secret); app-\u0026gt;helper(model =\u0026gt; sub { my $dbh = DataModel-\u0026gt;new }); get \u0026#39;/\u0026#39; =\u0026gt; \u0026#39;index\u0026#39;; get \u0026#39;/json\u0026#39; =\u0026gt; sub { my $self = shift; my $model = $self-\u0026gt;model; my $messages = [ $model-\u0026gt;get( \u0026#39;messages\u0026#39; =\u0026gt; { where =\u0026gt; [id =\u0026gt; {\u0026#39;\u0026gt;\u0026#39; =\u0026gt; $self-\u0026gt;param(\u0026#39;from_id\u0026#39;)}], order =\u0026gt; [{id =\u0026gt; \u0026#39;ASC\u0026#39;}], } ) ]; my @json; for my $msg (@{$messages}) { push @json, { id =\u0026gt; $msg-\u0026gt;id, msg =\u0026gt; $msg-\u0026gt;msg, ts =\u0026gt; $msg-\u0026gt;ts, }; } $self-\u0026gt;render(json =\u0026gt; [@json]); } =\u0026gt; \u0026#39;json\u0026#39;; post \u0026#39;/json\u0026#39; =\u0026gt; sub { my $self = shift; my $time = time; my $model = $self-\u0026gt;model; $model-\u0026gt;set( \u0026#39;messages\u0026#39; =\u0026gt; { msg =\u0026gt; $self-\u0026gt;param(\u0026#39;msg\u0026#39;), # jsonもparamで取れる ts =\u0026gt; $time, } ); }; app-\u0026gt;start; __DATA__ @@ index.html.ep % layout \u0026#39;main\u0026#39;; %= javascript begin jQuery(function($) { $(\u0026#34;#message\u0026#34;).focus(); var params = $.extend({ refresh:5, timer:0, latest:0 },params); var add_log = function(text){ $(\u0026#39;#for_ajax\u0026#39;).prepend(\u0026#34;\u0026lt;p\u0026gt;\u0026#34; + text + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;); }; var format_date = function(d){ var yyyy = d.getFullYear(); var mm = \u0026#39;0\u0026#39; + (d.getMonth() + 1); var dd = \u0026#39;0\u0026#39; + d.getDate(); var hh = \u0026#39;0\u0026#39; + d.getHours(); var nn = \u0026#39;0\u0026#39; + d.getMinutes(); var ss = \u0026#39;0\u0026#39; + d.getSeconds(); return yyyy + \u0026#39;/\u0026#39; + mm.slice(-2) + \u0026#39;/\u0026#39; + dd.slice(-2) + \u0026#39; \u0026#39; + hh.slice(-2) + \u0026#39;:\u0026#39; + nn.slice(-2) + \u0026#39;:\u0026#39; + ss.slice(-2); }; var reload_json = function(){ $.getJSON( \u0026#34;\u0026lt;%= url_for \u0026#39;json\u0026#39; %\u0026gt;\u0026#34;, { \u0026#39;from_id\u0026#39;:params.latest }, function(json) { $.each(json, function(i, val){ params.latest = val.id; var latest = new Date(); latest.setTime(val.ts * 1000); add_log(val.id + \u0026#34;. \u0026#34; + val.msg + \u0026#34; \u0026lt;small\u0026gt;\u0026#34; + format_date(latest) + \u0026#34;\u0026lt;/small\u0026gt;\u0026#34;); }); clearTimeout(params.timer);// 念のためタイマーをリセット params.timer = setTimeout(reload_json,params.refresh*1000);// 次回の実行はparams.refresh秒後 } ); }; params.timer = setTimeout(reload_json,0);// 一回目実行 $(\u0026#34;#msg_form\u0026#34;).submit(function() { if ( 0 \u0026lt; $(\u0026#34;#message\u0026#34;).val().length ) { $.post(\u0026#34;\u0026lt;%= url_for \u0026#39;json\u0026#39; %\u0026gt;\u0026#34;, { \u0026#39;msg\u0026#39;:$(\u0026#34;#message\u0026#34;).val(), }, function(json) { }, \u0026#39;json\u0026#39;); $(\u0026#34;#message\u0026#34;).val(\u0026#39;\u0026#39;); } return false; }) }); % end \u0026lt;div\u0026gt; \u0026lt;%= form_for \u0026#39;/\u0026#39; =\u0026gt; (method =\u0026gt; \u0026#39;post\u0026#39;, id =\u0026gt; \u0026#39;msg_form\u0026#39;) =\u0026gt; begin %\u0026gt; \u0026lt;%= text_field \u0026#39;msg\u0026#39; =\u0026gt; (id =\u0026gt; \u0026#39;message\u0026#39;) %\u0026gt; \u0026lt;%= submit_button \u0026#39;発言する\u0026#39; %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;for_ajax\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; @@ layouts/main.html.ep \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;\u0026lt;%= app-\u0026gt;renderer-\u0026gt;encoding %\u0026gt;\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Mojolicious\u0026lt;/title\u0026gt; %= javascript \u0026#39;https://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\u0026#39; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;%= content %\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2011-01-10T01:43:14+09:00","permalink":"https://www.nqou.net/2011/01/10/014314/","title":"Mojolicious::LiteとData::ModelとjQueryでAJAXなチャットを作ってみた"},{"content":"Mojolicious::Liteの記事でORLiteが日本語には対応できていません、と書いていたところ、スクリプト側で対応させる方法を教えていただきました。 私はsqlite_unicodeを、createやpackageの最後で設定してみたりしていたのですが、どれもうまくいかず諦めていました。\n","date":"2011-01-04T23:20:46+09:00","permalink":"https://www.nqou.net/2011/01/04/232046/","title":"ORLiteを日本語に対応させるテクニック"},{"content":"基本的には前記事と同じです。 私の観測範囲ではData::ModelよりもDBIx::Skinnyの方がよく使われているような気がしますが、テーブルとschemaを両方作る必要があるのがちょっと微妙に感じます。 DBIx::Skinny::Schema::Loaderというschemaを自動的に設定してくれるモジュールもあるので、それを使えば問題ないわけですが。 ORLiteの記事を見て「いいな」と思ったのは、テーブルの定義をするだけで使えるところでした。 あと、テーブル毎にクラスを自動的に作ってくれるようで、それも面白い機能だと思います。 しかし、Skinnyなどで言うconnect_optionsが設定（簡単に言えばsqlite_unicodeを有効に）できないため、日本語には対応できていません。 ORLite.pmのソースコードを書き換えてやればうまく動くのは確認済みですが、パッチを書いたりテストを書いたりまでは面倒で。 まあ、そんなわけで和製のORMの代表格であるDBIx::Skinnyも使っておこうかと、そんな感じです。\nカラムの細かい定義方法が分からなかったので、適当に設定してますが、とりあえず動きます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 #!/usr/bin/env perl #ｕｔｆ８ # use Acme::PerlTidy; package DBIxSkinny; use utf8; use DBIx::Skinny connect_info =\u0026gt; +{ dsn =\u0026gt; qq{dbi:SQLite:dbname=$0.db}, connect_options =\u0026gt; +{sqlite_unicode =\u0026gt; 1,} }; package DBIxSkinny::Schema; use utf8; use DBIx::Skinny::Schema; install_table motorcycles =\u0026gt; schema { pk \u0026#39;id\u0026#39;; columns qw/id type brand color/; }; package main; use utf8; use Mojolicious::Lite; use Mojo::Util qw/md5_sum/; app-\u0026gt;log-\u0026gt;level(\u0026#39;debug\u0026#39;)-\u0026gt;path(qq{$0.log}); app-\u0026gt;secret(md5_sum $0 )-\u0026gt;log-\u0026gt;debug(app-\u0026gt;secret); app-\u0026gt;helper(model =\u0026gt; sub { my $dbh = DBIxSkinny-\u0026gt;new }); app-\u0026gt;model-\u0026gt;do( \u0026#39;CREATE TABLE IF NOT EXISTS motorcycles ( id INTEGER PRIMARY KEY, type TEXT NOT NULL, brand TEXT NOT NULL, color TEXT)\u0026#39; ); get \u0026#39;/\u0026#39; =\u0026gt; sub { my $self = shift; my $model = $self-\u0026gt;model; my $motorbikes = [$model-\u0026gt;search(\u0026#39;motorcycles\u0026#39;, {}, {order_by =\u0026gt; [{type =\u0026gt; \u0026#39;ASC\u0026#39;}]},)]; $self-\u0026gt;stash( motorbikes =\u0026gt; $motorbikes, debug =\u0026gt; $self-\u0026gt;dumper([$self, $model]), ); } =\u0026gt; \u0026#39;index\u0026#39;; post \u0026#39;/\u0026#39; =\u0026gt; sub { my $self = shift; $self-\u0026gt;model-\u0026gt;create( \u0026#39;motorcycles\u0026#39;, { type =\u0026gt; $self-\u0026gt;param(\u0026#39;type\u0026#39;), brand =\u0026gt; $self-\u0026gt;param(\u0026#39;brand\u0026#39;), color =\u0026gt; $self-\u0026gt;param(\u0026#39;color\u0026#39;) } ); $self-\u0026gt;redirect_to(\u0026#39;/\u0026#39;); }; app-\u0026gt;start; __DATA__ @@ index.html.ep \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Motorcycles\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table\u0026gt; % foreach my $cycle (@{$motorbikes} ) { \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;id %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;type %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;brand %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;color %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; % } \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;バイクを登録してください。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;%= form_for \u0026#39;/\u0026#39; =\u0026gt; (method =\u0026gt; \u0026#39;post\u0026#39;) =\u0026gt; begin %\u0026gt; % foreach (qw/type brand color/) { \u0026lt;%= uc($_) %\u0026gt;: \u0026lt;%= input_tag $_, \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39; %\u0026gt;\u0026lt;br /\u0026gt; % } \u0026lt;%= submit_button \u0026#39;Submit motorcycle\u0026#39; %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;%= $debug %\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2011-01-03T04:10:42+09:00","permalink":"https://www.nqou.net/2011/01/03/041042/","title":"Mojolicious::LiteでDBIx::Skinnyを使ってみた"},{"content":"先日1.0にバージョンアップしたMojolicious（::Lite）を本格的に触ってみようとアレコレやってみた。 MojoliciousのWikiにORLiteを使ったサンプルがあったのですが、残念ながらそのままでは日本語には対応していないので、他のORMを使ってみようという、そんな感じです。\nSEE ALSO Data::Model - model interface which had more data sources unified, a.k.a data/object mapper - metacpan.org Data::Model Track - JPerl Advent Calendar 2009 Mojolicious::Lite - Micro real-time web framework - metacpan.org Home · mojolicious/mojo Wiki ほとんどが元ネタのパクリですが。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #!/usr/bin/env perl #ｕｔｆ８ # use Acme::PerlTidy; package DataModel; use utf8; use base \u0026#39;Data::Model\u0026#39;; use Data::Model::Schema; use Data::Model::Driver::DBI; my $dbfile = qq{$0.db}; my $dsn = qq{dbi:SQLite:dbname=$dbfile}; my $driver = Data::Model::Driver::DBI-\u0026gt;new( dsn =\u0026gt; $dsn, connect_options =\u0026gt; {sqlite_unicode =\u0026gt; 1,}, ); base_driver($driver); install_model motorcycles =\u0026gt; schema { key \u0026#39;id\u0026#39;; column id =\u0026gt; int =\u0026gt; {auto_increment =\u0026gt; 1}; column type =\u0026gt; char =\u0026gt; {required =\u0026gt; 1}; column brand =\u0026gt; char =\u0026gt; {required =\u0026gt; 1}; column color =\u0026gt; char =\u0026gt; {required =\u0026gt; 0}; }; unless (-f $dbfile) { my $dbh = DBI-\u0026gt;connect($dsn, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, {RaiseError =\u0026gt; 1, PrintError =\u0026gt; 0}) or DBI-\u0026gt;errstr; for my $sql (__PACKAGE__-\u0026gt;as_sqls) { $dbh-\u0026gt;do($sql) or die $dbh-\u0026gt;errstr; } $dbh-\u0026gt;disconnect; } package main; use utf8; use Mojolicious::Lite; use Mojo::Util qw/md5_sum/; app-\u0026gt;log-\u0026gt;level(\u0026#39;debug\u0026#39;)-\u0026gt;path(qq{$0.log}); app-\u0026gt;secret(md5_sum $0 )-\u0026gt;log-\u0026gt;debug(app-\u0026gt;secret); app-\u0026gt;helper(model =\u0026gt; sub { my $dbh = DataModel-\u0026gt;new }); get \u0026#39;/\u0026#39; =\u0026gt; sub { my $self = shift; my $model = $self-\u0026gt;model; my $motorbikes = [$model-\u0026gt;get(\u0026#39;motorcycles\u0026#39; =\u0026gt; {order =\u0026gt; [{type =\u0026gt; \u0026#39;ASC\u0026#39;}],})]; $self-\u0026gt;stash( motorbikes =\u0026gt; $motorbikes, debug =\u0026gt; $self-\u0026gt;dumper([$self, $model]), ); } =\u0026gt; \u0026#39;index\u0026#39;; post \u0026#39;/\u0026#39; =\u0026gt; sub { my $self = shift; my $model = $self-\u0026gt;model; $model-\u0026gt;set( \u0026#39;motorcycles\u0026#39; =\u0026gt; { type =\u0026gt; $self-\u0026gt;param(\u0026#39;type\u0026#39;), brand =\u0026gt; $self-\u0026gt;param(\u0026#39;brand\u0026#39;), color =\u0026gt; $self-\u0026gt;param(\u0026#39;color\u0026#39;), } ); $self-\u0026gt;redirect_to(\u0026#39;/\u0026#39;); }; app-\u0026gt;start; __DATA__ @@ index.html.ep \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;\u0026lt;%= app-\u0026gt;renderer-\u0026gt;encoding %\u0026gt;\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Motorcycles\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table\u0026gt; % foreach my $cycle (@{$motorbikes} ) { \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;id %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;type %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;brand %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= $cycle-\u0026gt;color %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; % } \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;バイクを登録してください。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;%= form_for \u0026#39;/\u0026#39; =\u0026gt; (method =\u0026gt; \u0026#39;post\u0026#39;) =\u0026gt; begin %\u0026gt; % foreach (qw/type brand color/) { \u0026lt;%= uc($_) %\u0026gt;: \u0026lt;%= input_tag $_, \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39; %\u0026gt;\u0026lt;br /\u0026gt; % } \u0026lt;%= submit_button \u0026#39;Submit motorcycle\u0026#39; %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;%= $debug %\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2011-01-02T20:55:59+09:00","permalink":"https://www.nqou.net/2011/01/02/205559/","title":"Mojolicious::LiteでData::Modelを使ってみた"},{"content":"未だにNanoAを触っているわけですが、ずっと悩んでいたchecked問題を、解決させることが出来ました。\nリファレンスの真偽判定の仕方がまずかったようです。\nHTML::AutoFormのtディレクトリにあるテストコードを単純にCGIに置き換えてレンダリングしたところ、checkedの設定が生きませんでした。\nテストコードを見てみると、formのrenderではなく、fieldのrenderでテストをしていました。\nということは、formのrenderに問題がある、という事になります。\nしかし、追いかけていったところ、結果的にはHTML/AutoForm/Field/InputCheckable.pmに問題がありました。\nformのrenderは、ポストしているデータがあれば、そのデータを配列のリファレンスで渡すことにしています。\nこうすることで、初期値（プログラムに書いている値）ではなく、ポストされた値でレンダリングされるようになります。\nInputCheckable.pmのrenderをよく見ると、リファレンスを受けている変数を真偽判定して、真ならば配列のリファレンスとみなして処理しています。\nしかし、ここに問題がありました。\n初期値のcheckedが生きないのは、ここが必ず真で判定される（リファレンスは真です）からです。\n初期値の（formのrenderで空の配列のリファレンスが渡された）場合は、偽で判定して欲しいので、一度配列に入れてから、その配列を真偽判定（配列が空ならば偽になります）してやれば問題ないと思います。\nこれで、初期値の場合も、ポストした場合も、問題なさそうでした。\n元々のテストも問題なく通っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Index: InputCheckable.pm =================================================================== --- InputCheckable.pm\t(リビジョン 38673) +++ InputCheckable.pm\t(作業コピー) @@ -19,6 +19,8 @@ sub render { my ($self, $values) = @_; + my @values; + @values = @$values if ref $values eq \u0026#39;ARRAY\u0026#39;; my %base = ( %{$self-\u0026gt;{parent}}, %$self, @@ -35,8 +37,8 @@ { type =\u0026gt; $self-\u0026gt;parent-\u0026gt;type, value =\u0026gt; $self-\u0026gt;{value}, - ($values - ? grep { $_ eq $self-\u0026gt;{value} } @$values + (@values + ? grep { $_ eq $self-\u0026gt;{value} } @values : $self-\u0026gt;{checked}) ? (checked =\u0026gt; \u0026#39;checked\u0026#39;) : (), }, ","date":"2010-11-15T03:56:33+09:00","permalink":"https://www.nqou.net/2010/11/15/035633/","title":"HTML::AutoFormのchecked問題が解決できた"},{"content":"WWW::MechanizeとWeb::ScraperでLast.fmからfreemp3をダウンロードするスクリプトを久しぶりに動かしてみたら、エラーになった。 確認したところ、どうやらコンフィグ（Config::YAML）の使い方に問題があったようだ。 なんとも恥ずかしい。 そこで、最近使い方を覚えた小技をいくつか加えてグレードアップすることにした。 Config::Pitを使ってみたり、autodieを使ってみたり。 Config::PitはWindowsでは使えないと勝手に思い込んでいたけど、普通に使えた。 スクリプトにアカウント情報を入れなくても済むので、ブログで公開するときにも気を使わなくて済むのが良いです。 Config::Pitは、getとsetが組になっていて、まずはsetでアカウント情報を記録しておきます。 やり方は幾つかあるのですが、とりあえず今回のスクリプトに合わせて作ったスクリプトを晒しておきます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 # ｕｔｆ８ # use Acme::PerlTidy; use strict; use warnings; use Config::Pit; # 設定 Config::Pit::set( \u0026#34;last.fm\u0026#34;, data =\u0026gt; { username =\u0026gt; \u0026#34;username\u0026#34;, password =\u0026gt; \u0026#34;password\u0026#34;, } ); usernameとpasswordの値を、実際のアカウント情報に変更してから実行すると、私の環境では\n1 C:\\Users\\\u0026lt;username\u0026gt;\\.pit の中に、YAMLファイルで入力した情報が保管されていました。 あとは使うときにsetで使ったキー（今の場合は「last.fm」）で引いてやると、このアカウント情報がちゃんと使えます。 便利ですね。 autodieは、Fatalの自動版という感じでしょうか。 use autodieとしておくだけで、色々なエラーを捕まえてdieしてくれます。 例えば以下のようなスクリプトでは、ファイルがなかった時にはdieします。\n1 2 3 4 5 # ｕｔｆ８ use strict; use autodie; open my $fh, \u0026#39;\u0026lt;:utf8\u0026#39;, \u0026#39;autodie.dat\u0026#39;; close $fh; 便利ですね。\nということで、本題。 Web::ScraperとWWW::Mechanizeの合わせ技です。 今回は、このスクリプトでちゃんと動かして確認しているので、問題ない。はずです。 mechでリンクをたどっていく場合もそうですが、HTMLのソースを確認したいので、都度保存して解析に使っていました。 そのへんの名残もそのまま置いてあります。 ひょっとすると、将来の自分のためかもしれませんが。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 # ｕｔｆ８ # use Acme::PerlTidy; use strict; use warnings; use autodie; use utf8; use Perl6::Say; use FindBin; use Encode; use Config::Pit; my $config = pit_get( \u0026#34;last.fm\u0026#34;, require =\u0026gt; { username =\u0026gt; \u0026#34;username\u0026#34;, password =\u0026gt; \u0026#34;password\u0026#34;, } ); use Web::Scraper; use WWW::Mechanize; use File::Basename; use List::MoreUtils qw(uniq); my $uri = q{http://www.last.fm/}; my $mech = WWW::Mechanize-\u0026gt;new( autocheck =\u0026gt; 1, ); # my $history_dir = $FindBin::Bin . q{/lastfm.test}; # スタート $mech-\u0026gt;get($uri); say $mech-\u0026gt;uri; # ログイン画面へ sleep 1; $mech-\u0026gt;follow_link( id =\u0026gt; \u0026#39;loginBtn\u0026#39; ); my $fh; say $mech-\u0026gt;uri; # open $fh, \u0026#39;\u0026gt;:utf8\u0026#39;, $history_dir . q{/get1.html}; # print $fh $mech-\u0026gt;content; # $mech-\u0026gt;dump_all($fh); # close $fh; # ログイン sleep 1; $mech-\u0026gt;submit_form( form_number =\u0026gt; 2, fields =\u0026gt; { username =\u0026gt; $config-\u0026gt;{username}, password =\u0026gt; $config-\u0026gt;{password}, }, ); say $mech-\u0026gt;uri; # open $fh, \u0026#39;\u0026gt;:utf8\u0026#39;, $history_dir . q{/logined.html}; # print $fh $mech-\u0026gt;content; # close $fh; # フリーMP3のページ sleep 1; $mech-\u0026gt;follow_link( url_regex =\u0026gt; qr/freemp3s/ ); # open $fh, \u0026#39;\u0026gt;:utf8\u0026#39;, $history_dir . q{/freemp3s.html}; # print $fh $mech-\u0026gt;content; # close $fh; # MP3リンクを取得 sleep 1; my ( $scraper, $result ); $scraper = scraper { process \u0026#39;a[href=~/\\.mp3$/]\u0026#39;, \u0026#39;hrefs[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; result \u0026#39;hrefs\u0026#39;; }; $result = $scraper-\u0026gt;scrape( $mech-\u0026gt;content, $mech-\u0026gt;uri ); # mp3ファイルを取得 foreach my $mp3 ( uniq @{$result} ) { my $filename = basename($mp3); print \u0026#34;try fetch : $mp3 : \u0026#34;; say $mech-\u0026gt;mirror( $mp3, sprintf( \u0026#34;%s/%s\u0026#34;, \u0026#39;DownloadFiles\u0026#39;, $filename ) ) -\u0026gt;message; sleep 1; } ","date":"2010-08-31T21:50:14+09:00","permalink":"https://www.nqou.net/2010/08/31/215014/","title":"昔書いたスクリプトをグレードアップした"},{"content":" ","date":"2010-08-17T01:41:33+09:00","permalink":"https://www.nqou.net/2010/08/17/014133/","title":"推し進める事と裾野を広げる事"},{"content":"しばらく前に、POSIXにstrftimeという便利なコマンドがあるのを発見した。 DateTime等とのベンチマークだったと思う。 はてブしたハズなのだが、見つからず。 タグのつけ方が安定しない。 ともかく。 日付時刻を表示するときは、localtimeをスカラーコンテキストで表示することが多いのだが、日本風に表示しようとすると、それなりに面倒。\n1 2 3 4 my @now = localtime; $now[5] += 1900; $now[4]++; printf qq{%04d/%02d/%02d %02d:%02d:%02d}, reverse(@now[0..5]); そこで便利なのが、POSIXのstrftimeですよ。\n1 2 use POSIX; print POSIX::strftime \u0026#39;%Y/%m/%d %H:%M:%S\u0026#39;, localtime; これで同じ出力を得ることが出来る。 しかも、手元の環境では、strftimeを使ったほうが速い。\n生のコードは2種類。 先ほどのスライスを使ったものと、配列を展開したもの。 それらとstrftimeを比較してみた。 結果は以下のとおり、POSIXを使ったほうが2割程度速かった。\n1 2 3 4 5 6 7 8 Benchmark: running coding1, coding2, posix for at least 3 CPU seconds... coding1: 4 wallclock secs ( 3.10 usr + 0.00 sys = 3.10 CPU) @ 75042.20/s (n=232931) coding2: 4 wallclock secs ( 3.15 usr + 0.00 sys = 3.15 CPU) @ 84113.30/s (n=265041) posix: 4 wallclock secs ( 3.14 usr + 0.00 sys = 3.14 CPU) @ 103140.63/s (n=323449) Rate coding1 coding2 posix coding1 75042/s -- -11% -27% coding2 84113/s 12% -- -18% posix 103141/s 37% 23% -- ソースコードも見た目にわかりやすいので、今後は重宝しそうです。 ベンチマークに使ったソースは以下のとおり。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #ｕｔｆ８ use strict; use warnings; use utf8; use Benchmark \u0026#39;:all\u0026#39;; use POSIX; use Perl6::Say; say posix(); say coding(); say coding2(); cmpthese(timethese( -3, { \u0026#39;posix\u0026#39; =\u0026gt; \\\u0026amp;posix, \u0026#39;coding1\u0026#39; =\u0026gt; \\\u0026amp;coding, \u0026#39;coding2\u0026#39; =\u0026gt; \\\u0026amp;coding2, })); sub posix { POSIX::strftime \u0026#39;%Y/%m/%d %H:%M:%S\u0026#39;, localtime; } sub coding { my @now = localtime; $now[5] += 1900; $now[4]++; sprintf qq{%04d/%02d/%02d %02d:%02d:%02d}, reverse(@now[0..5]); } sub coding2 { my @now = localtime; sprintf qq{%04d/%02d/%02d %02d:%02d:%02d}, $now[5] + 1900, $now[4] + 1, $now[3], $now[2], $now[1], $now[0]; } ","date":"2010-08-17T00:05:31+09:00","permalink":"https://www.nqou.net/2010/08/17/000531/","title":"POSIXのstrftimeが生perlcodeよりも速い件について"},{"content":" 1 2 3 4 #!/usr/bin/perl use strict; use CGI::Carp qw/fatalsToBrowser/; die; 1 2 3 4 #!/usr/bin/perl use strict; use CGI::Carp::DebugScreen ( debug =\u0026gt; 1 ); die; ","date":"2010-07-23T03:22:43+09:00","permalink":"https://www.nqou.net/2010/07/23/032243/","title":"今さらだけどCGI::Carp::DebugScreenを覚えた"},{"content":"普段、MovableTypeのプラグインでお世話になっている「小粋空間」さんが、意外なところで躓いていた。\n考え方としては、XML::SimpleのXMLinが内部文字列を返すのであれば、スクリプトを内部文字列化してやれば解決するのでは、という感じです。 まずは、スクリプトを「use utf8;」してしまいます。 そうすると、スクリプトに書かれている文字はPerlの内部空間と同じ状態（内部文字列）になります。 で、このまま出力すると「Wide Character」の問題が出ますので、出力時にはutf8でエンコードしてやります。 それを踏まえて書きなおすと以下のようになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/perl use strict; use utf8; binmode STDOUT =\u0026gt; \u0026#34;:utf8\u0026#34;; use CGI; use XML::Simple; my $q = new CGI; print $q-\u0026gt;header(-charset=\u0026gt;\u0026#39;utf-8\u0026#39;); print $q-\u0026gt;start_html; my $xml = XMLin(\u0026#39;foo.xml\u0026#39;); my $name = $xml-\u0026gt;{name}; print \u0026lt;\u0026lt;EOF; \u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;hoge.cgi\u0026#34;\u0026gt; 名前:\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;hoge\u0026#34; name=\u0026#34;hoge\u0026#34; value=\u0026#34;$name\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;送信\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; EOF print $q-\u0026gt;end_html; これで文字化けはしません。\n","date":"2010-06-18T23:04:49+09:00","permalink":"https://www.nqou.net/2010/06/18/230449/","title":"XML::Simpleで文字化けしない方法"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; use Encode; use Term::Encoding qw(term_encoding); my $enc = Encode::find_encoding(term_encoding); use Data::Feed; use URI; # urlを指定する my $url = URI-\u0026gt;new(\u0026#39;http://dailynews.yahoo.co.jp/fc/rss.xml\u0026#39;); # サイトにアクセスし、Feedを取得する my $feed = Data::Feed-\u0026gt;parse($url); print $enc-\u0026gt;encode($_-\u0026gt;title).\u0026#34;\\n\u0026#34; for ($feed-\u0026gt;entries); 1 2 3 4 5 6 7 8 菅新首相の支持率62.4% NNN エース級種牛、生き残り容認へ 回転ずし店に車 14人が重軽傷 茨城・上海チャーター便就航へ 「イカロス」帆の展開8日以降に 他チーム故障 ブラジルは複雑 全仏男子 ナダル5度目の優勝 古瀬アナが絵本作家デビュー ","date":"2010-06-07T03:05:28+09:00","permalink":"https://www.nqou.net/2010/06/07/030528/","title":"Yahooのトピックスを取得する他の手段"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # ｕｔｆ８ # インスパイヤ：[Perl]簡単！たった１３行のコードでHTML取得＆解析をする - DQNEO起業日記 \u0026lt;http://dqn.sakusakutto.jp/2010/06/perlhtml.html\u0026gt; use 5.8.1; use strict; use warnings; use utf8; use Term::Encoding qw(term_encoding); my $encoding = term_encoding; binmode STDOUT =\u0026gt; \u0026#34;:encoding($encoding)\u0026#34;; use LWP::UserAgent; use HTML::TreeBuilder; # urlを指定する my $url = \u0026#39;http://yahoo.jp\u0026#39;; # IE8のフリをする my $user_agent = \u0026#34;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)\u0026#34;; # LWPを使ってサイトにアクセスし、HTMLの内容を取得する my $ua = LWP::UserAgent-\u0026gt;new(agent =\u0026gt; $user_agent); my $res = $ua-\u0026gt;get($url); my $content = $res-\u0026gt;decoded_content; # HTML::TreeBuilderで解析する my $tree = HTML::TreeBuilder-\u0026gt;new; $tree-\u0026gt;parse($content); # DOM操作してトピックの部分だけ抜き出す。 # \u0026lt;div id=\u0026#39;topicsfb\u0026#39;\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;....の部分を抽出する my @items = $tree-\u0026gt;look_down(\u0026#39;id\u0026#39;, \u0026#39;topicsfb\u0026#39;)-\u0026gt;find(\u0026#39;li\u0026#39;); print $_-\u0026gt;as_text.\u0026#34;\\n\u0026#34; for @items; 1 2 3 4 5 6 7 8 9 10 菅新首相の支持率62.4% NNN写真 エース級種牛、生き残り容認へ写真 回転ずし店に車 14人が重軽傷写真 茨城・上海チャーター便就航へ写真 「イカロス」帆の展開8日以降に写真 他チーム故障 ブラジルは複雑写真 全仏男子 ナダル5度目の優勝NEW 古瀬アナが絵本作家デビュー写真 昨日の話題（42件） 一覧 ","date":"2010-06-07T02:48:13+09:00","permalink":"https://www.nqou.net/2010/06/07/024813/","title":"HTML::TreeBuilderでHTMLの解析をするモダンなPerlスクリプト"},{"content":" 1 2 3 4 5 6 7 8 9 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; use Data::Dumper; use Term::Encoding qw(term_encoding); my $encoding = term_encoding; print Dumper $encoding; 1 $VAR1 = \u0026#39;cp932\u0026#39;; 1 2 3 4 5 6 7 8 9 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; use Term::Encoding qw(term_encoding); my $encoding = term_encoding; binmode STDOUT =\u0026gt; \u0026#34;:encoding($encoding)\u0026#34;; print \u0026#34;ハローワールド！\u0026#34;; 1 2 3 4 5 6 7 8 9 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; use Encode; use Term::Encoding qw(term_encoding); my $enc = Encode::find_encoding(term_encoding); print $enc-\u0026gt;encode(\u0026#34;ハローワールド！\u0026#34;); ","date":"2010-06-02T01:37:59+09:00","permalink":"https://www.nqou.net/2010/06/02/013759/","title":"モダンPerl#32でTerm::Encodingを知った"},{"content":" 1 cpanm http://search.cpan.org/CPAN/authors/id/X/XS/XSAWYERX/App-Genpass-0.08.tar.gz 1 2 3 4 5 6 7 8 9 10 1\u0026amp;3XXFXAQG8tIzAi0eC2 9Ukqb!t02bGWPyj#N\u0026amp;uZ %oywF%)(#*gU%QUA9w2f #7%A7w)RQoZGEfb$16uh ifU91Ls2S^KzD#h$tOdu jGIl2oc9$lTX#6MHVhwV uiAU*uVszyxsQKY6@#Z\u0026amp; z3z)%hfffgbYTqflC0rU XGeR10#pD9g#AZ^HEXrj Os6c4$MNlSn6XUcIzL6^ ","date":"2010-05-31T00:41:08+09:00","permalink":"https://www.nqou.net/2010/05/31/004108/","title":"App-Genpassを試してみた"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 Benchmark: timing 100000 iterations of caf, cafr, cal, os, otrw... caf: 4 wallclock secs ( 5.09 usr + 0.00 sys = 5.09 CPU) @ 19661.82/s (n=100000) cafr: 5 wallclock secs ( 4.63 usr + 0.00 sys = 4.63 CPU) @ 21584.29/s (n=100000) cal: 4 wallclock secs ( 3.51 usr + 0.00 sys = 3.51 CPU) @ 28490.03/s (n=100000) os: 3 wallclock secs ( 3.71 usr + 0.00 sys = 3.71 CPU) @ 26932.40/s (n=100000) otrw: 3 wallclock secs ( 3.67 usr + 0.00 sys = 3.67 CPU) @ 27277.69/s (n=100000) Rate caf cafr os otrw cal caf 19662/s -- -9% -27% -28% -31% cafr 21584/s 10% -- -20% -21% -24% os 26932/s 37% 25% -- -1% -5% otrw 27278/s 39% 26% 1% -- -4% cal 28490/s 45% 32% 6% 4% -- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; package Bench::CAF; use base qw(Class::Accessor::Fast); __PACKAGE__-\u0026gt;mk_accessors(qw(foo hoge)); package Bench::CAFr; use base qw(Class::Accessor::Faster); __PACKAGE__-\u0026gt;mk_accessors(qw(foo hoge)); package Bench::CAL; use Class::Accessor::Lite; Class::Accessor::Lite-\u0026gt;mk_accessors(qw(foo hoge)); sub new { bless {}, $_[0] } package Bench::OTRW; use Object::Tiny::RW qw(foo hoge); package Bench::OS; use base qw/Object::Simple/; __PACKAGE__-\u0026gt;attr(\u0026#34;foo\u0026#34;); __PACKAGE__-\u0026gt;attr(\u0026#34;hoge\u0026#34;); package main; use Benchmark qw(:all); use Perl6::Say; # use Data::Dumper; sub confirm { # say @_; } cmpthese(timethese( 100_000, { # Class::Accessor::Fast caf =\u0026gt; sub { my $ac = Bench::CAF-\u0026gt;new; confirm($ac-\u0026gt;foo(\u0026#34;bar\u0026#34;)); confirm($ac-\u0026gt;foo); confirm($ac-\u0026gt;hoge(\u0026#34;fuga\u0026#34;)); }, # Class::Accessor::Faster cafr =\u0026gt; sub { my $ac = Bench::CAFr-\u0026gt;new; confirm($ac-\u0026gt;foo(\u0026#34;bar\u0026#34;)); confirm($ac-\u0026gt;foo); confirm($ac-\u0026gt;hoge(\u0026#34;fuga\u0026#34;)); }, # Class::Accessor::Lite cal =\u0026gt; sub { my $ac = Bench::CAL-\u0026gt;new; confirm($ac-\u0026gt;foo(\u0026#34;bar\u0026#34;)); confirm($ac-\u0026gt;foo); confirm($ac-\u0026gt;hoge(\u0026#34;fuga\u0026#34;)); }, # Object::Tiny otrw =\u0026gt; sub { my $ac = Bench::OTRW-\u0026gt;new; confirm($ac-\u0026gt;foo(\u0026#34;bar\u0026#34;)); confirm($ac-\u0026gt;foo); confirm($ac-\u0026gt;hoge(\u0026#34;fuga\u0026#34;)); }, # Object::Simple os =\u0026gt; sub { my $ac = Bench::OS-\u0026gt;new; confirm($ac-\u0026gt;foo(\u0026#34;bar\u0026#34;)); confirm($ac-\u0026gt;foo); confirm($ac-\u0026gt;hoge(\u0026#34;fuga\u0026#34;)); }, })); ","date":"2010-05-26T22:02:07+09:00","permalink":"https://www.nqou.net/2010/05/26/220207/","title":"軽い系（？）のAccessorを比較してみた"},{"content":"cpanmを快適に使っていますが、毎回minicpanをミラー指定するのも疲れたので、ちょっと考えてみました。 helpによると、「PERL_CPANM_OPT」という環境変数にパラメータを入れておけば良いようなので、「\u0026ndash;mirror file:///C:/strawberry/minicpan」を指定します。 Windowsの場合、マイコンピュータのプロパティあたりから環境変数の設定ができると思います。\nこれで、ミラー指定をしなくてもminicpanを使ってくれるようになりました。 めでたしめでたし。\n","date":"2010-05-23T20:59:12+09:00","permalink":"https://www.nqou.net/2010/05/23/205912/","title":"cpanminusでminicpanと仲良くする方法（Windows編）"},{"content":"ちょっと前に作ったプログラムを見ていて、悪い習慣だなぁ、と思ったので、改めるためにメモ。 Perlを覚えていく中で、関数の返り値を偽として判定させたいときは「undefを返す」という事をやっていた。\n1 return undef; しかし、これは返り値を配列で受け取るときに微妙になり、わかりにくいバグを発生させてしまう原因にもなる。 どういう場合に問題になるかを、実際にコードを書いて試してみる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; use Perl6::Say; use Data::Dumper qw/Dumper/; my $charset = \u0026#39;cp932\u0026#39;; binmode STDOUT =\u0026gt; \u0026#34;:encoding($charset)\u0026#34;; sub return_less { my $a = 1; } sub return_undef { my $a = 1; return undef; } sub return_only { my $a = 1; return; } # return_less if (my @result = \u0026amp;return_less) { say \u0026#39;return_less : true\u0026#39;; print Dumper \\@result; } else { say \u0026#39;return_less : false\u0026#39;; print Dumper \\@result; } # return_undef if (my @result = \u0026amp;return_undef) { say \u0026#39;return_undef : true\u0026#39;; print Dumper \\@result; } else { say \u0026#39;return_undef : false\u0026#39;; print Dumper \\@result; } # return_only if (my @result = \u0026amp;return_only) { say \u0026#39;return_only : true\u0026#39;; print Dumper \\@result; } else { say \u0026#39;return_only : false\u0026#39;; print Dumper \\@result; } このスクリプトを実行すると結果はそれぞれどうなるでしょうか？ しばらく考えてみて下さい。 答えは以下のようになります。\n1 2 3 4 5 6 7 8 9 10 return_less : true $VAR1 = [ 1 ]; return_undef : true $VAR1 = [ undef ]; return_only : false $VAR1 = []; いかがでしょうか？ undefを返したのに、分岐で「真」になっていますね。 これは、if文が@resultを要素数で判定したためです。 undefを返すと、見ての通り@resultに「undef」が代入されます。 そのため、@resultの判定が1となり、真となります。 期待したのは「return_only」のような動作ではないでしょうか？ return undef;は悪癖です。 理解してやる場合は別ですが、殆どの場合は単独のreturnが良いでしょう。\n","date":"2010-05-22T07:52:33+09:00","permalink":"https://www.nqou.net/2010/05/22/075233/","title":"Perlのreturn"},{"content":"試行錯誤してきましたが、ようやく正解にたどり着きました。 これで、cpanmとcpan-outdatedの組み合わせでも、minicpanを有効に使うことができます。 minicpanの場所（minicpanを実行する時のlオプションの場所）が「C:\\strawberry\\minicpan」の場合は、以下のように書きます。\n1 cpan-outdated --mirror file:///C:/strawberry/minicpan | cpanm --mirror file:///C:/strawberry/minicpan 考えてみれば、fileプロトコルでちゃんとアクセスすることを考えればよかったのです。\n","date":"2010-05-20T07:12:10+09:00","permalink":"https://www.nqou.net/2010/05/20/071210/","title":"cpan-outdatedも使ってみた（完結編）"},{"content":" 1 cpan-outdated --mirror file:///strawberry/minicpan | cpanm --mirror file:///stwawberry/minicpan ","date":"2010-05-19T07:29:06+09:00","permalink":"https://www.nqou.net/2010/05/19/072906/","title":"cpan-outdatedも使ってみた（続き2）"},{"content":" ","date":"2010-05-19T00:18:30+09:00","permalink":"https://www.nqou.net/2010/05/19/001830/","title":"cpan-outdatedも使ってみた（続き）"},{"content":" 1 cpan -r 1 cpan-outdated | cpanm 1 cpan-outdated --mirror file:///strawberry/minicpan | cpanm ","date":"2010-05-19T00:00:24+09:00","permalink":"https://www.nqou.net/2010/05/19/000024/","title":"cpan-outdatedも使ってみた"},{"content":" ","date":"2010-05-18T21:44:38+09:00","permalink":"https://www.nqou.net/2010/05/18/214438/","title":"PostToTwitterを入れてみた"},{"content":"これまた今更な感じですが。 Twitterデビューしました。\n","date":"2010-05-18T00:31:01+09:00","permalink":"https://www.nqou.net/2010/05/18/003101/","title":"Twitterデビュー"},{"content":"乗り遅れも甚だしいですが。 cpanminusを使ってみました。\n","date":"2010-05-12T06:50:13+09:00","permalink":"https://www.nqou.net/2010/05/12/065013/","title":"cpanminus"},{"content":" ","date":"2010-04-25T00:15:01+09:00","permalink":"https://www.nqou.net/2010/04/25/001501/","title":"Feedをウェブから取ってきてタイトルのリストを表示してみた"},{"content":"どうにかなるものです。\nNanoAのデータベースハンドルを使えればよかったのだが、生憎とそんな機能はついていなかった。\nNanoAのconfigを使えば、NanoA本体に影響を及ぼさずにデータベースハンドルを入れ替えることが可能でした。\nアプリケーション（今の場合はLightBBS）用のdbメソッドを作ることによって、NanoA::Config::db を上書きしています。\nこっちはなんとかできたのですが、 Crypt::SaltedHash を利用するのはちょっと難しそうです。\nAuthen::Users でnewした後に、プロパティを入れ替えればいけそうな気がしたのですが、認証の仕組みが違うので単純には行きませんでした。\nAuthen::Users はデータベースから取ってきたsha変換済みのパスワードと、入力したパスワードをsha変換したモノとを比較しています。 そこまでがセットになっているのです。\nしかし、 Crypt::SaltedHash は、普通に変換するとsaltを自動的に入れてしまうので、単純に比較しても合わないのです。（元々それが特徴なわけですが） 比較するときは、変換済みのパスワードと入力したパスワードを Crypt::SaltedHash のvalidateメソッドに渡してやる必要があります。 すると、内部でsaltを解析して照合ができるようになります。 まあ、仕組みはわかりましたが。 さて、どうしたもんでしょう。\n","date":"2010-04-24T13:52:55+09:00","permalink":"https://www.nqou.net/2010/04/24/135255/","title":"Authen::UsersのデータベースハンドルをNanoAで使えた話"},{"content":"画像の切替で、ちょっと毛色の違うプラグインを見つけたので、試してみた。\n","date":"2010-04-24T04:35:18+09:00","permalink":"https://www.nqou.net/2010/04/24/043518/","title":"jQueryのプラグイン「ImageSwitch」を使ってみた"},{"content":"これでもかッ、ってほど聴いている曲がある。\nこれだ。 キッカケは家にあったCDでした。\n","date":"2010-02-27T12:10:59+09:00","permalink":"https://www.nqou.net/2010/02/27/121059/","title":"最近ツボな曲"},{"content":"Crypt::SaltedHashを知ったのは、Casual Track - JPerl Advent Calendar 2009でした。 MD5の逆引きについては、一応知っていたのですが、対応については深く考えていませんでした。 でも、手軽に出来るのであればやらない理由はありません。 あ、cpanが使えない場合でも、ファイルをコピーするだけで使えます。 素晴らしいですね。\n","date":"2010-02-27T11:22:18+09:00","permalink":"https://www.nqou.net/2010/02/27/112218/","title":"何故Crypt::SaltedHashを使いたかったのか"},{"content":"データベースを使った簡単な掲示板もできたので、ユーザー登録出来る掲示板を作ろうと思った。 折角なので参考になるようなモジュールをCPANで探してみようと思った。 そうしたら出るわ出るわ。 Catalystのプラグインが多いこと。\nとはいえ。 CatalystではなくNanoAでAuthenticationしたいわけで。 少し探してみたら、便利そうなモジュールがあった。\nAuthen::Users - DBI Based User Authentication - metacpan.org SQLiteかMySQLを使って、ユーザー情報の保管や認証を助けてくれるモジュールのようだ。 NanoAのデータベースハンドルを使えればよかったのだが、生憎とそんな機能はついていなかった。 newすると、自動的にデータベースハンドルを作ってしまうので、認証システムは単独で使ってみることにした。 …これは楽だ。\n結構簡単にユーザー登録はできた。 本当は、ハッシュの作成にCrypt::SaltedHashを使いたかった。 ソースを読んでも仕組みが理解できなかったが、同じ文字列でも毎回結果がちがうので、逆引きが不可能になるしろものだ。 しかし、Authen::Usersは、パスワードの保存方法を選べない。 というか、結構ガチガチに仕様が決まっているようで、応用は難しそうだった。 ということで、NanoAでどうにかしないと。 というか、どうにかしたいなと。\n","date":"2010-02-24T09:35:46+09:00","permalink":"https://www.nqou.net/2010/02/24/093546/","title":"NanoAでAuthenticationしたい"},{"content":"小さな事からコツコツと。 ということで、nopasteのデータベース使用版とログイン不要の一行掲示板を作ってみた。\nデータベースを使うにあたって、はじめは素のDBIを使っていたのだが、折角なのでプラグインを作ってみた。 と言っても、MENTAのプラグインをNanoA用に書き直しただけなんだけど。 やはりページネーションが便利ですよ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 package plugin::sql; use strict; use warnings; use utf8; use base qw(NanoA::Plugin); sub init_plugin { my ($klass, $controller) = @_; no strict \u0026#39;refs\u0026#39;; no warnings \u0026#39;redefine\u0026#39;; # Usage: $app-\u0026gt;sql_do($statement); *{$controller . \u0026#39;::sql_do\u0026#39;} = sub { my ($app, $sql) = @_; my $dbh = $app-\u0026gt;db; $dbh-\u0026gt;do($sql) or die $dbh-\u0026gt;errstr; }; # Usage: $app-\u0026gt;sql_prepare_exec($statement, \\@params); *{$controller . \u0026#39;::sql_prepare_exec\u0026#39;} = sub { my ($app, $sql, $params) = @_; my $dbh = $app-\u0026gt;db; $params = [] unless ref $params eq \u0026#39;ARRAY\u0026#39;; my $sth = $dbh-\u0026gt;prepare($sql) or die $dbh-\u0026gt;errstr; $sth-\u0026gt;execute(@{$params}) or die $dbh-\u0026gt;errstr; $sth-\u0026gt;finish; undef $sth; }; # Usage: my $rows = $app-\u0026gt;sql_select_all($statement, \\@params); # $rows : foreach my $row (@{$rows}) { $row-\u0026gt;{field} } *{$controller . \u0026#39;::sql_select_all\u0026#39;} = sub { my ($app, $sql, $params) = @_; my $dbh = $app-\u0026gt;db; $params = [] unless ref $params eq \u0026#39;ARRAY\u0026#39;; my $sth = $dbh-\u0026gt;prepare($sql) or die $dbh-\u0026gt;errstr; $sth-\u0026gt;execute(@{$params}) or die $dbh-\u0026gt;errstr; my @res; while (my $row = $sth-\u0026gt;fetchrow_hashref) { push @res, $row; } $sth-\u0026gt;finish; undef $sth; return \\@res; }; # Usage: my ($rows, $pager) = $app-\u0026gt;sql_select_paginate($statement, \\@params, { page =\u0026gt; num_of_page, rows =\u0026gt; num_of_rows }); # $rows : foreach my $row (@{$rows}) { $row-\u0026gt;{field} } # $pager-\u0026gt;{page} : page number # $pager-\u0026gt;{has_next}: has next page # $pager-\u0026gt;{has_prev}: has prev page *{$controller . \u0026#39;::sql_select_paginate\u0026#39;} = sub { my ($app, $sql, $params, $paging) = @_; my $dbh = $app-\u0026gt;db; $params = [] unless ref $params eq \u0026#39;ARRAY\u0026#39;; $sql .= \u0026#39; LIMIT ? OFFSET ?\u0026#39;; my $sth = $dbh-\u0026gt;prepare($sql) or die $dbh-\u0026gt;errstr; $sth-\u0026gt;execute(@{$params}, $paging-\u0026gt;{rows}+1, ($paging-\u0026gt;{page}-1)*$paging-\u0026gt;{rows}) or die $dbh-\u0026gt;errstr; my @res; while (my $row = $sth-\u0026gt;fetchrow_hashref) { push @res, $row; } $sth-\u0026gt;finish; undef $sth; my $has_next = 0; if ( @res == $paging-\u0026gt;{rows} + 1 ) { pop @res; $has_next++; } return (\\@res, {page =\u0026gt; $paging-\u0026gt;{page}, has_next =\u0026gt; $has_next, has_prev =\u0026gt; ($paging-\u0026gt;{page} != 1) ? 1 : 0}); }; } # initialize myself __PACKAGE__-\u0026gt;init_plugin(__PACKAGE__); 1; ついでに、それ用のテンプレートも作ってみた。 まあ、MENTAの（以下略\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ? my $pager = $c-\u0026gt;{pager}; ? my $action = $c-\u0026gt;{action}; ? my $page_n = $pager-\u0026gt;{page}; ? if ($pager-\u0026gt;{has_prev}) { \u0026lt;a href=\u0026#34;\u0026lt;?= $app-\u0026gt;uri_for($action, { page =\u0026gt; $page_n - 1 }) ?\u0026gt;\u0026#34; rel=\u0026#34;prev\u0026#34;\u0026gt;前\u0026lt;/a\u0026gt; ? } else { \u0026lt;span class=\u0026#34;disabled\u0026#34;\u0026gt;前\u0026lt;/span\u0026gt; ? } |（現在：\u0026lt;?= $page_n ?\u0026gt;ページ）| ? if ($pager-\u0026gt;{has_next}) { \u0026lt;a href=\u0026#34;\u0026lt;?= $app-\u0026gt;uri_for($action, { page =\u0026gt; $page_n + 1 }) ?\u0026gt;\u0026#34; rel=\u0026#34;next\u0026#34;\u0026gt;次\u0026lt;/a\u0026gt; ? } else { \u0026lt;span class=\u0026#34;disabled\u0026#34;\u0026gt;次\u0026lt;/span\u0026gt; ? } formプラグインを通じてHTML::AutoFormを使っているが、checkboxのcheckedが思ったように動かない。 checked=\u0026gt;1にしても、チェックが入っていない状態になる。 HTML::AutoFormのtディレクトリにあるコードと同じように書いているのだけど。 何故だ。\n","date":"2010-02-14T21:30:41+09:00","permalink":"https://www.nqou.net/2010/02/14/213041/","title":"NanoAでデータベースを使ってみる"},{"content":"Yacafiのソースを読んでいたら気づいてしまった。\n1 my $CRLF = \u0026#34;\\r\\n\u0026#34;; CRLFの定義って重要だね。\n","date":"2010-02-10T23:58:03+09:00","permalink":"https://www.nqou.net/2010/02/10/235803/","title":"CRLFって重要！"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Define the CRLF sequence. You can\u0026#39;t use a simple \u0026#34;\\r\\n\u0026#34; because of system # specific \u0026#39;features\u0026#39;. On EBCDIC systems \u0026#34;\\t\u0026#34; ne \u0026#34;\\011\u0026#34; as the don\u0026#39;t use ASCII sub crlf { my ( $self, $CRLF ) = @_; $self-\u0026gt;{\u0026#39;.crlf\u0026#39;} = $CRLF if $CRLF; # allow value to be set manually unless ( $self-\u0026gt;{\u0026#39;.crlf\u0026#39;} ) { my $OS = $^O || do { require Config; $Config::Config{\u0026#39;osname\u0026#39;} }; $self-\u0026gt;{\u0026#39;.crlf\u0026#39;} = ( $OS =~ m/VMS/i ) ? \u0026#34;\\n\u0026#34; : ( \u0026#34;\\t\u0026#34; ne \u0026#34;\\011\u0026#34; ) ? \u0026#34;\\r\\n\u0026#34; : \u0026#34;\\015\\012\u0026#34;; } return $self-\u0026gt;{\u0026#39;.crlf\u0026#39;}; } ","date":"2010-02-10T01:23:44+09:00","permalink":"https://www.nqou.net/2010/02/10/012344/","title":"HTTPの改行について"},{"content":" ","date":"2010-02-09T23:59:28+09:00","permalink":"https://www.nqou.net/2010/02/09/235928/","title":"気がつけばログイン出来るようになっていた"},{"content":"NanoAの話ですが。\nオフィシャルのcompile_errorはちゃんと動作するのだが、XREAではcompile_errorは動かない。\nまあ、XREAはよいとしても、ローカル環境でも動かないのがとてもつらい。\nCGI::ExceptionManagerがちゃんと働いていれば、コンパイル時のエラーも補足してくれるはずなのだが…。\nと、思ってソースを見ていると、原因っぽいところがわかりました。\nCGI::ExceptionManagerのoutputで、HTTPステータス500を出力していますが、そこの改行コードに問題があったようです。\n「\\r\\n」になっているところを「\\n」に変えてやるとちゃんとローカル環境でも動きました。\nただ、これがHTTP的に正しいのかどうかが少し疑問です。\n…と、思ったのですが。\n先日変更したステータス302の出力は「\\n」でやっていました。\nとりあえず、extlibにあったCGI::ExceptionManager::StackTrace::CGIは以下のように変更しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Index: CGI.pm =================================================================== --- CGI.pm (リビジョン 36612) +++ CGI.pm (作業コピー) @@ -8,9 +8,9 @@ warn $err-\u0026gt;{message}; - print \u0026#34;Status: 500\\r\\n\u0026#34;; - print \u0026#34;Content-type: text/html; charset=utf-8\\r\\n\u0026#34;; - print \u0026#34;\\r\\n\u0026#34;; + print \u0026#34;Status: 500\\n\u0026#34;; + print \u0026#34;Content-type: text/html; charset=utf-8\\n\u0026#34;; + print \u0026#34;\\n\u0026#34;; my $body = $args{renderer} ? $args{renderer}-\u0026gt;($err, %args) : $err-\u0026gt;as_html(%args); utf8::encode($body); うーん。\nちゃんと動くようになって、なんだか、とってもスッキリしました。\n","date":"2010-02-09T04:06:29+09:00","permalink":"https://www.nqou.net/2010/02/09/040629/","title":"続々・色々と動かなかった話"},{"content":"NanoAについては、ローカル環境で色々と試行錯誤しているわけだが、元々のサンプルを参考にしたいので、できるだけ元の状態を保っておきたいと思っているのだが、なかなか思うように行かない。\nで、ソースを読んでいたら、appディレクトリの下にindexというディレクトリを作ってやれば、そちらを読んでくれそうだったので試してみた。\nローカル環境では、サーバーポートは80以外でやっているのだが、元々のDispatch.pmではポートのことを考慮していないようだった。\n修正したらうまくいったので参考までに。\n1 2 3 4 5 6 7 8 9 10 11 12 13 Index: Dispatch.pm =================================================================== --- Dispatch.pm (リビジョン 36612) +++ Dispatch.pm (作業コピー) @@ -9,7 +9,8 @@ my $handler_path = substr($ENV{PATH_INFO} || \u0026#39;/\u0026#39;, 1); if ($handler_path eq \u0026#39;\u0026#39; \u0026amp;\u0026amp; -d \u0026#39;app/index\u0026#39;) { - print \u0026#34;Status: 302\\nLocation: $ENV{SCRIPT_NAME}/index/\\n\\n\u0026#34;; + my $uri = NanoA::nanoa_uri; + print \u0026#34;Status: 302\\nLocation: $uri/index/\\n\\n\u0026#34;; CGI::ExceptionManager::detach(); } $handler_path =~ s{..}{}g; これで、nanoa.cgiにアクセスしても、nanoa.cgi/index/にリダイレクトされるようになった。\nこのおかげで、トップページがアプリケーションの一つとして管理できるので、headerやfooterを含め、スタイルシートを使ったレイアウトの切り替えが簡単になった。\nこんなところまで考えてあったんだなぁ。\nあと、nanoa.cgiと同じ場所にstaticディレクトリを作って、スタイルシートをそっちにおくようにした。\napp以下のアプリケーションディレクトリにそのまま入れて使うことで、アプリケーションごとに管理するのが普通だろうけど、systemに入っているスタイルシートを共通で使うのではなく、共通で使うスタイルシートや、JavaScript等を置いておく場所を作りたかったので。\nあと、オリジナルをそのままの状態で運営することで、NanoAが急激に進化したときでも入れ替えをスムーズに出来るかなぁと。\n","date":"2010-02-07T20:05:15+09:00","permalink":"https://www.nqou.net/2010/02/07/200515/","title":"NanoAでインデックスページを作ると良いことがあった"},{"content":"NanoAで便利だと思ったのは、フォームを作成するときに使っているHTML::AutoFormだ。 CPANにあるのかと思ったら、なかった。 codereposで管理されているモジュールだった。 フォームの定義をしておくと、HTMLを生成したり、投稿された内容をチェックしたりできる。 その定義が簡単に出来るのがすごい。\n","date":"2010-02-06T13:53:01+09:00","permalink":"https://www.nqou.net/2010/02/06/135301/","title":"NanoAのextlibにあるHTML::AutoFormについて"},{"content":" 1 ? use plugin::mobile; ","date":"2010-02-06T00:06:12+09:00","permalink":"https://www.nqou.net/2010/02/06/000612/","title":"続・色々と動かなかった話"},{"content":"MENTAの新バージョンをインストールして、動いていたと思ったのだが、ちゃんと動いていなかったようだ。 app/controller/nanochat/main.plを実行するときにエラーが発生するようになっていた。\n原因は今のところ、不明。 バージョンを0.14に下げても同じエラーになっているので、ひょっとして、最初から動いていなかったのではないかと打ちひしがれてみる。 で、NanoAといえば、サーバー上では動作するものの、手元のWindows上のローカルサーバーでは真っ白な画面になるだけで動かない。 過去の記事を見てうんうん唸っていたがヒントはない。 仕方が無いので、コマンドラインで実行してみると、どうやら一時ファイルを作れていないようだった。 ルートディレクトリに「tmp」というフォルダを作ってやって実行すると、動いた。 …まあ、Windows仕様ではないから仕方が無いよね。 「mt_cache_dir」の設定を変えてやれば良いんだろうけど。 で、今更ながら「Yacafi」に手を出してみた。 またもや、サーバーでは動くが、手元のローカルサーバーでは動かない。こちらはアクセスがキャンセルされたような反応。 コマンドラインで実行してみると、ちゃんとHTMLが表示されている。 うーむむむむむ。何がいけないのか不明。\n","date":"2010-02-04T01:32:12+09:00","permalink":"https://www.nqou.net/2010/02/04/013212/","title":"色々と動かなかった話"},{"content":" ","date":"2010-01-29T00:39:29+09:00","permalink":"https://www.nqou.net/2010/01/29/003929/","title":"UTF-8のBOMとPerl::Tidyの関係について"},{"content":"devel.nqou.netでは、jqueryFileTreeを使って作ったDirectory Listから、Faceboxを使ってソース表示や画像表示をしていた。 jqueryのコールバックを使って実現していたのだが、今思えばややこしいことをしていた。 今回、ColorBoxで実現するに際しては、iframeで表示することにした。 試行錯誤はしたが、結果的にとてもシンプルになった。 start_colorbox.js しばらくはこれで行こう。\n","date":"2010-01-28T23:42:46+09:00","permalink":"https://www.nqou.net/2010/01/28/234246/","title":"FaceboxでやっていたことをColorBoxで出来るようになった"},{"content":" ","date":"2010-01-25T23:53:50+09:00","permalink":"https://www.nqou.net/2010/01/25/235350/","title":"LightBoxライクなColorBoxを使ってみた"},{"content":" ","date":"2010-01-23T15:11:16+09:00","permalink":"https://www.nqou.net/2010/01/23/151116/","title":"たまにはDBIx::Simpleを使ってみる"},{"content":" ","date":"2010-01-23T10:22:13+09:00","permalink":"https://www.nqou.net/2010/01/23/102213/","title":"PerlのWide characterについて実験してみた"},{"content":"はじめのうちは、USBメモリに入れてPerl自体を持ち歩こうと思っていたのだが、ネットブックごと持ち歩くことになりつつあるので、Portable版はやめることにした。\n","date":"2010-01-16T07:03:50+09:00","permalink":"https://www.nqou.net/2010/01/16/070350/","title":"Strawberry PerlのPortable版をやめた"},{"content":" ","date":"2010-01-07T23:05:50+09:00","permalink":"https://www.nqou.net/2010/01/07/230550/","title":"MENTAがバージョンアップしていた"},{"content":"StrawberryPerlでminicpanを使う時に設定でハマったのでメモ。\nネットブックを買ったので環境整備。StrawberryPerlはportable版を選んでみた。 折角なのでminicpanを使ってみようとしたら、ダウンロード自体は問題ないが、cpanからインストールする時にうまく動かず。 portable版だけかもしれないけど、minicpanのローカル保存の場所が実行時のパラメータに関係なく固定されていた。 それと、Cpan::Config.pmに、オフライン時にminicpanがあれば使うようなコードが書いてあったのだが、どうも、その設定が違っていたようだ。 なんか、fileプロトコルで使っているスラッシュが一つ多いみたい。 ×　file:///C:/strawberry/minicpan ○　file://C:/strawberry/minicpan スラッシュをひとつ消したことで、ちゃんとインストールできるようになった。 ただ、これはこれで微妙な気がする。 参考リンク\n","date":"2010-01-07T21:51:03+09:00","permalink":"https://www.nqou.net/2010/01/07/215103/","title":"Strawberry Perlでminicpanを使えるようになるまで"},{"content":"なんとか上手くいく方法はないものかと。\n基本的には、Perlの内部形式の考え方をおさらいする形になった。 プログラムで扱う前にdecode、出力するときはencodeする。 それは、標準入出力だろうが、データベースだろうが、同じ扱い、ということ。 SQLiteはutf8の入出力が（少なくともver3.6.13では）可能のようだ。 まずは出力の時、データベースに渡すステートメントは「Encode::encode_utf8」してから出力する。 そして入力の時、つまり、データベースからデータを取る時は、とって来た後に「Encode::decode_utf8」する。 イメージは下の図。 今回は出力だけなのでSTDINは使っていないが、binmode STDOUTをencodingで使う場合は、あわせて指定しておくのが定石だと思われる。\n1 2 3 ｜ ｜→（binmode STDIN ）→｜ ｜→（encode_utf8）→｜　｜ ｜DOS画面｜　｜Perl内部｜　｜データベース｜ ｜ ｜←（binmode STDOUT）←｜　｜←（decode_utf8）←｜　｜ 「binmode STDOUT =\u0026gt; \u0026ldquo;:encoding(cp932)\u0026quot;;」とやる場合、printする時は内部形式のまま出力するように書けばいいので、他には何もすることがない。\n他にも挙動を調べたかったので、中身は少し変えた。\nスクリプト\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 # ｕｔｆ８ use 5.8.1; use strict; use warnings; use utf8; use DBI; use Encode; my $lang_code = \u0026#39;cp932\u0026#39;; binmode STDOUT =\u0026gt; \u0026#34;:encoding($lang_code)\u0026#34;; my $database = \u0026#39;:memory:\u0026#39;; # DBD::SQLite ver1.27以降 my @dsn = (\u0026#34;dbi:SQLite:dbname=$database\u0026#34;,); my $dbh = DBI-\u0026gt;connect(@dsn); printn(\u0026#34;ver\u0026#34; . $dbh-\u0026gt;{sqlite_version}); my $create_table = \u0026#39;CREATE TABLE IF NOT EXISTS books (\u0026#39; . \u0026#39;タイトル,\u0026#39; . \u0026#39;著者\u0026#39; . \u0026#39;);\u0026#39;; sub_do($dbh, $create_table); # insert文の実行 my $statement; $statement = qq/insert into books (タイトル, 著者) values (\u0026#39;Perl\u0026#39;, \u0026#39;啓仁\u0026#39;);/; sub_do($dbh, $statement); $statement = qq/insert into books (タイトル, 著者) values (\u0026#39;C++\u0026#39;, \u0026#39;成憲\u0026#39;);/; sub_do($dbh, $statement); $statement = qq/insert into books (タイトル, 著者) values (\u0026#39;C#\u0026#39;, \u0026#39;☺鳳☻\u0026#39;);/; sub_do($dbh, $statement); $statement = q/insert into books (タイトル, 著者) values (\u0026#39;Python\u0026#39;, \u0026#39;☻鳳☺\u0026#39;);/; sub_do($dbh, $statement); $statement = q/insert into books (タイトル, 著者) values (\u0026#39;Java\u0026#39;, \u0026#39;Keva\u0026#39;);/; sub_do($dbh, $statement); # update文の実行 $statement = q/update books set タイトル = \u0026#39;Ruby\u0026#39; where 著者 = \u0026#39;成憲\u0026#39;/; # 著者が\u0026#39;成憲\u0026#39;のタイトルを「Ruby」に更新 sub_do($dbh, $statement); # delete文の実行 $statement = q/delete from books where 著者 = \u0026#39;☻鳳☺\u0026#39;;/; sub_do($dbh, $statement); # select文の実行 my $sth = $dbh-\u0026gt;prepare(\u0026#34;select * from books;\u0026#34;); $sth-\u0026gt;execute; # 各行のフェッチ while (my $row = $sth-\u0026gt;fetchrow_arrayref) { # 各行を出力 my $str = $row-\u0026gt;[0] . \u0026#34;:\u0026#34; . $row-\u0026gt;[1]; $str = Encode::decode_utf8($str); printn($str); } undef $sth; # データベースの切断 $dbh-\u0026gt;disconnect; sub sub_do { my ($dbh, $statement) = @_; $statement = Encode::encode_utf8($statement); $dbh-\u0026gt;do($statement); } sub printn { print @_; print \u0026#34;\\n\u0026#34;; } 実行結果\n1 2 3 4 5 6 7 \u0026#34;\\x{263a}\u0026#34; does not map to cp932. \u0026#34;\\x{263b}\u0026#34; does not map to cp932. ver3.6.13 Perl:啓仁 Ruby:成憲 C#:\\x{263a}鳳\\x{263b} Java:Keva SQLiteは手軽に使えるので、使い方をちゃんと考えてみるのも良いもんだ。\n","date":"2010-01-04T23:19:01+09:00","permalink":"https://www.nqou.net/2010/01/04/231901/","title":"DBD::SQLiteの入出力をちゃんと考えてみる"},{"content":" ","date":"2010-01-03T17:42:05+09:00","permalink":"https://www.nqou.net/2010/01/03/174205/","title":"帰国"},{"content":"ヤフーカフェin成田。 ということで、ポチッと。\n","date":"2009-12-23T12:50:45+09:00","permalink":"https://www.nqou.net/2009/12/23/125045/","title":"恒例のヤフーカフェにて"},{"content":"またアメリカに行ってきます。 ということでポチッと。\n","date":"2009-12-23T07:49:19+09:00","permalink":"https://www.nqou.net/2009/12/23/074919/","title":"恒例のラウンジオーサカにて"},{"content":"国内最後のアクセスということで、ポチッと。\n","date":"2009-05-04T13:35:49+09:00","permalink":"https://www.nqou.net/2009/05/04/133549/","title":"ヤフーカフェにて"},{"content":"成田空港のラウンジから。 ブースがあるのは知っていたけれど、パソコンの貸出しまでしているとは知らなかった。 ということで、記念に書き込んでみた。\n","date":"2009-05-04T10:52:21+09:00","permalink":"https://www.nqou.net/2009/05/04/105221/","title":"IASS in 成田"},{"content":" ","date":"2009-05-04T07:39:48+09:00","permalink":"https://www.nqou.net/2009/05/04/073948/","title":"（恒例の）ラウンジオーサカにて"},{"content":"Vectorを久しぶりに使ったら面白そうなゲームが広告に出ていたので試してみた。 1日5分からでも楽しめる、というのが、どういうことなのかも気になった。 そのゲーム：シミュレーションRPG！ドラゴンクルセイド：Vector オフィシャルの説明は以下のとおり。\n１日5分からでも楽しめる！ 『ドラゴンクルセイド』は、オフライン状態のときもゲームが進行するシステムを採用しているため、 プレイヤーの時間負担をかけません。隙間時間にキャラクターに指示を出したり、 生産の設定などをしておいて、結果を後でじっくり確認するといった遊び方も可能です。\n実際に遊んでみての感想。 このゲームでは、ダイヤというアイテムが課金アイテムとなる。 このダイヤを使うことで、時間を買うことができる、というのが今の印象。 このゲームでは、何か行動すると時間がかかる。 建物を建てるのに30分とか1時間とか。 例えば、ダイヤを使うと、その建物を瞬時に完成させることができる。 オンラインゲームの課金システムはアイテムに課金というのをよく見たが、時間を買うというのはなかなかいいアイデアだと思った。 もう一つ秀逸だと思ったのは、毎日アクセスさせるための仕組み。 プレイヤーは城主になって、内政もしていくのだが、税金の徴収は1日1回、手動で行う必要がある。 本当の序盤は、チュートリアルクエストによってそこそこにお金は手に入るが、すぐに足りなくなる。 お金はかなり重要なのだが、この税収がなければやっていけない。 一般的なゲームなら、この程度のことは自動で行われるのだが、そこをあえて手動にすることでアクセスさせるように作っているのだろう。 これはプレイヤーにとっては面倒だが、なかなかいい仕組みだ。\n","date":"2009-04-26T12:38:37+09:00","permalink":"https://www.nqou.net/2009/04/26/123837/","title":"ドラゴンクルセイドというゲームについて"},{"content":"面白そうなネタを見つけたので、便乗してみた。\n1 my @update = grep { my $a = 1; foreach my $b (@key) { $a = 0 if $_ eq $b; } $a; } @items; Perlで配列Aから配列Bにある要素を取り除くには？ 1 2 my %key = map { $_ =\u0026gt; 1 } @key; my @update = grep { not exists $key{$_} } @items; Re: Perlで配列Aから配列Bにある要素を取り除くには？ 上の二つでは、ハッシュを使うほうが段違いに速い。\nその傾向は大きい配列になるほど顕著になる。\nでも、配列が大きくなると、mapの部分が結構時間がかかるようなので、ハッシュスライスにしてみた。\n1 2 3 my %hash; undef @hash{@key}; my @update = grep { not exists $hash{$_} } @items; その結果、さらに速くなった。\nしかも、配列が大きくなればなるほど効果も上がっている。\nやはり、スライスは使えるテクニックだ。\n参考ベンチの結果とソースは以下のとおり。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env perl use strict; use warnings; use Benchmark qw(:all); use Data::Dumper::Names; $Data::Dumper::Indent = 1; sub p (@) { print Dumper(@_) } use List::Util qw(shuffle); use Perl6::Say; our @items = shuffle(\u0026#34;a\u0026#34; .. \u0026#34;z\u0026#34;); our @key = shuffle(\u0026#34;f\u0026#34; .. \u0026#34;zz\u0026#34;); say join \u0026#39; \u0026#39;, \u0026#39;@items = qw(\u0026#39;, @items, \u0026#39;);\u0026#39;; say join \u0026#39; \u0026#39;, \u0026#39;@key = qw(\u0026#39;, @key, \u0026#39;);\u0026#39;; cmpthese( timethese( 0, { Linear =\u0026gt; sub { my @update = grep { my $a = 1; foreach my $b (@key) { $a = 0 if $_ eq $b; } $a; } @items; }, Hash =\u0026gt; sub { my %key = map { $_ =\u0026gt; 1 } @key; my @update = grep { not exists $key{$_} } @items; }, Hash2a =\u0026gt; sub { my %hash; @hash{@key} = (1) x @key; my @update = grep { not exists $hash{$_} } @items; }, Hash2b =\u0026gt; sub { my %hash; @hash{@key} = (1) x @key; my @update = grep { !$hash{$_} } @items; }, Hash3 =\u0026gt; sub { my %hash; undef @hash{@key}; my @update = grep { not exists $hash{$_} } @items; }, } ) ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @items = qw( b t m e d k w r c s j z n v h g l q o y a u f x i p ); @key = qw( b c d a f e ); Benchmark: running Hash, Hash2a, Hash2b, Hash3, Linear for at least 3 CPU seconds... Hash: 3 wallclock secs ( 3.22 usr + 0.00 sys = 3.22 CPU) @ 30791.86/s (n=99119) Hash2a: 3 wallclock secs ( 3.13 usr + 0.00 sys = 3.13 CPU) @ 38859.88/s (n=121476) Hash2b: 3 wallclock secs ( 3.16 usr + 0.00 sys = 3.16 CPU) @ 38478.30/s (n=121476) Hash3: 3 wallclock secs ( 3.19 usr + 0.00 sys = 3.19 CPU) @ 40126.10/s (n=127922) Linear: 3 wallclock secs ( 3.17 usr + 0.00 sys = 3.17 CPU) @ 14515.13/s (n=46042) Rate Linear Hash Hash2b Hash2a Hash3 Linear 14515/s -- -53% -62% -63% -64% Hash 30792/s 112% -- -20% -21% -23% Hash2b 38478/s 165% 25% -- -1% -4% Hash2a 38860/s 168% 26% 1% -- -3% Hash3 40126/s 176% 30% 4% 3% -- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @items = qw( y f n m b k l x w e p t a z o r q h u g j i s c d v ); @key = qw( bs uy we bq kg cn vq ap ue zr ot hh u ss cq s mv bf qi at ly yv sq hf jw ph yd rb yw wm he br lz lg kd uf ik lh hj rw gs ox xj qo tf ky kf lt pe zg lw ac er el ao sg jd v gl mz my sj sl xa ws lk iu cr xz gy bm ui k cj h yt ez gz rh oh ep gx de md aw gv tn vm hu mm ti m pk ry vi cb rg mt zv uq ew qw no cm wz nk gd nl ut ng vr vf rd au w rt vo pc fu ix xk xw mq px wu ef bk kb jp z li tg ka bp fw sn nr mj af vx vc ff zk zu o ni vy rv dr kr bj zi cw tb fb su fx fd tm zy ob vn iw uc pi xs bu fe qf wv zc uk hz do qg mb wx kp op dk zm aj kc oe ip cx ey jy pr wo bc sx um fl if fz jq yu in tv lb mw rf mx ha nx zd ea vl xb wt gp kh rx gr te py fj uv zx fg eb yb im ge qr ed bx ad aa hx wd lq ii du sp mi yl ud ru ie nj wf qk jt sa ee gi ij fm yz wb je lv pq wa is nt ej st qs tk pn it xh uu y ro gu gt sc pa sh bh vs et cs dh ne rj ku ze wl mp rn pd ai oq tj xu ga yy us un gc ck hs xr bg r ch vu oy to fa tu va oa td eu hg ki rp tc fy gk nn q qm eq dw yc za nm jr zf dq ct uj nz ft pz ba ym nq ub ib mu cd aq so bw eg i tz fo wk qu rq wh kw bb hr xy qd lu ln vg lf dn iq p dj zn zq pv bl tt or pg sd qp az mo uz kx xt an es fc ug xf jb kz pj nv ca ya mr ml pp fk hp al rl sf xm ae ig wj sr ei hq wg io nd kv ce as qe tl tp vp n sk tq x cc rs ev hb sw nb dm mk ko lj jk xx da ds qa wn vt js zh ar sv ma kl ul pl en re be xi wq xp os wr yf hk jg lc lr cz di ci hv od ux yp em iy cp qt vd bi bv am qq gq ps om vk qz np ov ho oz kj oo tx xl gf gh bt up hc dz po ic oi ou yn ht hd se ir mc ld fh la ec lx ia pt rk ol yr dl rr id cu dd dv go xo rc ay nu wi og il kn ra rz cl iv by yx ek xv qx f nf gw bz fv kk cv yo ql ag ke jo jl me ye jj qh ty fq yk ks sy zs ak sb kq yq ns mn hw vb jx vw rm mh ms ur vh gg on jz hl oc pm co vz fp jf ow tr av hm df cf gn ja ta ax qc fi l ri dy ts gm le of ah t nw sz ua jm zz ls fn xn jc zj zo ju ll qv dg cg lp nh g dc wc eo xg ji fr jh pb ys dp ok xq zw wy yg uo wp pf mg uw xe zl tw vv ww bd th gb iz yi bo pw ab yh bn hy oj zp lo gj zb xc jn ih si qj j lm hn fs zt sm pu db xd jv cy nc na ve mf hi dt ex uh qy kt eh vj qb yj dx km ny qn ); Benchmark: running Hash, Hash2a, Hash2b, Hash3, Linear for at least 3 CPU seconds... Hash: 3 wallclock secs ( 3.17 usr + 0.00 sys = 3.17 CPU) @ 681.90/s (n=2163) Hash2a: 3 wallclock secs ( 3.26 usr + 0.00 sys = 3.26 CPU) @ 1994.49/s (n=6512) Hash2b: 3 wallclock secs ( 3.25 usr + 0.00 sys = 3.25 CPU) @ 1997.23/s (n=6491) Hash3: 3 wallclock secs ( 3.23 usr + 0.00 sys = 3.23 CPU) @ 2299.63/s (n=7437) Linear: 3 wallclock secs ( 3.17 usr + 0.00 sys = 3.17 CPU) @ 557.06/s (n=1767) Rate Linear Hash Hash2a Hash2b Hash3 Linear 557/s -- -18% -72% -72% -76% Hash 682/s 22% -- -66% -66% -70% Hash2a 1994/s 258% 192% -- -0% -13% Hash2b 1997/s 259% 193% 0% -- -13% Hash3 2300/s 313% 237% 15% 15% -- ","date":"2009-04-09T00:20:19+09:00","permalink":"https://www.nqou.net/2009/04/09/002019/","title":"配列Aから配列Bの要素を取り除いた配列Cを作る方法"},{"content":" ","date":"2009-03-31T20:54:02+09:00","permalink":"https://www.nqou.net/2009/03/31/205402/","title":"性懲りもなくModule::Setupをインストールしてみた"},{"content":"面白そうなスクリプトを見つけたので試してみた。 はてなブックマークのお気に入り候補を見つけるPerlスクリプト/楽\nが、途中でエラーになった。\n1 2 Not Found Can not parse [http://b.hatena.ne.jp/entry/rss/http://d.hatena.ne.jp/amatubu/20090322#p1]. ソースを見たら、XML::Feedでエラーになったら死ぬ事になっていたが、まあ、飛ばすだけでいいだろうと言うことで、適当に改造して使った。 結果はこんな感じ。\n1 2 3 4 5 6 7 8 9 10 001 : 017 : otsune : http://b.hatena.ne.jp/otsune/ 002 : 017 : lapis25 : http://b.hatena.ne.jp/lapis25/ 003 : 015 : typewhite : http://b.hatena.ne.jp/typewhite/ 004 : 013 : charsbar : http://b.hatena.ne.jp/charsbar/ 005 : 012 : miyagawa : http://b.hatena.ne.jp/miyagawa/ 006 : 011 : naoya : http://b.hatena.ne.jp/naoya/ 007 : 011 : hide-K : http://b.hatena.ne.jp/hide-K/ 008 : 010 : jazzanova : http://b.hatena.ne.jp/jazzanova/ 009 : 009 : bayashi_net : http://b.hatena.ne.jp/bayashi_net/ 010 : 009 : tomisima : http://b.hatena.ne.jp/tomisima/ 少し新しい世界が見えた気がします。\nパッチは以下のとおり。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Index: early-hatena-bookmarkers.pl =================================================================== --- early-hatena-bookmarkers.pl (リビジョン 31631) +++ early-hatena-bookmarkers.pl (作業コピー) @@ -68,8 +68,11 @@ my @my_bookmarks; for my $rss_url (@my_rss) { - my $feed = XML::Feed-\u0026gt;parse( URI-\u0026gt;new($rss_url) ) - or die XML::Feed-\u0026gt;errstr. \u0026#34;\\nCan not parse [$rss_url].\\n\u0026#34;; + my $feed; + unless ($feed = XML::Feed-\u0026gt;parse( URI-\u0026gt;new($rss_url) ) ) { + warn XML::Feed-\u0026gt;errstr. \u0026#34;\\nCan not parse [$rss_url].\\n\u0026#34;; + next; + } for my $item ($feed-\u0026gt;entries) { push @my_bookmarks, \u0026#39;\u0026lt;http://b.hatena.ne.jp/entry/rss/\u0026gt;\u0026#39;. $item-\u0026gt;link; @@ -90,8 +93,11 @@ my %users; for my $url (@bookmarks) { - my $rss = XML::Feed-\u0026gt;parse( URI-\u0026gt;new($url) ) - or die XML::Feed-\u0026gt;errstr. \u0026#34;\\nCan not parse [$url].\\n\u0026#34;; + my $rss; + unless ( $rss = XML::Feed-\u0026gt;parse( URI-\u0026gt;new($url) ) ) { + warn XML::Feed-\u0026gt;errstr. \u0026#34;\\nCan not parse [$url].\\n\u0026#34;; + next; + } my $me = 0; for my $item ($rss-\u0026gt;entries) { ","date":"2009-03-28T08:43:06+09:00","permalink":"https://www.nqou.net/2009/03/28/084306/","title":"はてブのお気に入りを見つけるスクリプトを使ってみた"},{"content":"昔に作ったファイルを見ていて、よくわからないコードが出てきたので調べた。 それは、ハッシュのスライスだった。 未だに覚えられないのは、やはりあまり使わないからだろうなぁ。 で、なんとなく思いついたので、ハッシュを作成するベンチマークを取ってみた。 何も考えずに書くとループして作るだろうなぁ、という感じのループと、そのループを展開したもの、そしてスライス代入と直接代入の4種類。\n1 2 3 4 5 6 7 8 9 10 Benchmark: running Unroll, direct, for, slice for at least 3 CPU seconds... Unroll: 2 wallclock secs ( 3.16 usr + 0.00 sys = 3.16 CPU) @ 264160.01/s (n=833689) direct: 2 wallclock secs ( 3.15 usr + 0.00 sys = 3.15 CPU) @ 287373.38/s (n=906663) for: 3 wallclock secs ( 3.13 usr + 0.00 sys = 3.13 CPU) @ 174892.19/s (n=546713) slice: 3 wallclock secs ( 3.00 usr + 0.00 sys = 3.00 CPU) @ 282924.03/s (n=849055) Rate for Unroll slice direct for 174892/s -- -34% -38% -39% Unroll 264160/s 51% -- -7% -8% slice 282924/s 62% 7% -- -2% direct 287373/s 64% 9% 2% -- ハッシュを直接書くよりはさすがに遅かったが、それにしても2%しか差がないのは驚き。 これは使わない手はないね。 で、ソースは以下のとおり。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 use strict; use warnings; use Benchmark qw(:all); our @la = (1 .. 5); our @lb = (\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;, \u0026#39;four\u0026#39;, \u0026#39;five\u0026#39;); cmpthese( timethese( 0, # 0 is auto { direct =\u0026gt; sub { my %hash = ( 1 =\u0026gt; \u0026#39;one\u0026#39;, 2 =\u0026gt; \u0026#39;two\u0026#39;, 3 =\u0026gt; \u0026#39;three\u0026#39;, 4 =\u0026gt; \u0026#39;four\u0026#39;, 5 =\u0026gt; \u0026#39;five\u0026#39;, ); }, for =\u0026gt; sub { my %hash; for my $i (0 .. 4) { $hash{$la[$i]} = $lb[$i]; } }, Unroll =\u0026gt; sub { my %hash; $hash{$la[0]} = $lb[0]; $hash{$la[1]} = $lb[1]; $hash{$la[2]} = $lb[2]; $hash{$la[3]} = $lb[3]; $hash{$la[4]} = $lb[4]; }, slice =\u0026gt; sub { my %hash; @hash{@la} = @lb; }, } ) ); ","date":"2009-03-28T00:29:19+09:00","permalink":"https://www.nqou.net/2009/03/28/002919/","title":"二つの配列からハッシュを作成するベンチマーク"},{"content":" 1 2 3 4 5 6 7 # ｕｔｆ８ use strict; use warnings; use YAML qw (Dump); sub p (@) { print Dump(@_); } use utf8; binmode STDOUT =\u0026gt; \u0026#39;:encoding(cp932)\u0026#39;; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # ｕｔｆ８ # http://wiki.bit-hive.com/tomizoo/pg/Perl%20%BD%CB%C6%FC%CC%BE%A4%CE%BC%E8%C6%C0 use strict; use warnings; use YAML qw (Dump); sub p (@) { print Dump(@_); } use utf8; binmode STDOUT =\u0026gt; \u0026#39;:encoding(cp932)\u0026#39;; use Calendar::Japanese::Holiday; # 祝日一覧の取得 my $holidays; p $holidays = getHolidays(2008, 5); p $holidays = getHolidays(2008, 5, 1); foreach my $month ( 1 .. 12 ) { $holidays = getHolidays(2009, $month, 1); p { month =\u0026gt; $month, holidays =\u0026gt; $holidays}; } # 祝日かどうかの判定 p my $name = isHoliday(2007, 5, 5); ","date":"2009-03-27T00:03:58+09:00","permalink":"https://www.nqou.net/2009/03/27/000358/","title":"最近使っているPerlスクリプトのひな形"},{"content":"先日のKansai.pmで発表されていた、ループアンローリングを試してみた。 発表のスライド:Cell Challenge 2009 参加記 Wikipedia:ループ展開 - Wikipedia ループアンローリング自体はWikipediaによればループ展開ということだが、目的としてはデータハザード（データ依存のために計算の並列処理が不可能になること）をなるべく回避するのが目的であった。 スライドの30枚目に展開の方法が書いてるので、それを実際に試してみた。 以下、ベンチマークの結果\n1 2 3 4 5 6 7 8 Benchmark: running Unrolling1, Unrolling2, normal for at least 3 CPU seconds... Unrolling1: 3 wallclock secs ( 3.00 usr + 0.00 sys = 3.00 CPU) @ 429810.06/s (n=1289860) Unrolling2: 4 wallclock secs ( 3.05 usr + 0.00 sys = 3.05 CPU) @ 444432.88/s (n=1354187) normal: 3 wallclock secs ( 3.01 usr + 0.00 sys = 3.01 CPU) @ 210117.41/s (n=633504) Rate normal Unrolling1 Unrolling2 normal 210117/s -- -51% -53% Unrolling1 429810/s 105% -- -3% Unrolling2 444433/s 112% 3% -- Unrolling1は普通に展開したもの。 Unrolling2が展開後に計算順序を入れ替えたもの。 normalは普通のforループ。 計算の順序を入れ替えると、ほんの少しだが速くなった。 多少なりともデータハザードがある、ということなのだろう。 ソースは以下のとおり。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 use strict; use warnings; use Benchmark qw(:all); our @la = (1 .. 5); our @lb = (4 .. 8); cmpthese( timethese( 0, # 0 is auto { normal =\u0026gt; sub { my (@lc, @ld); for my $i (0 .. 4) { $lc[$i] = $la[$i] + $lb[$i]; $ld[$i] = $lc[$i] * $lc[$i]; } }, Unrolling1 =\u0026gt; sub { my (@lc, @ld); $lc[0] = $la[0] + $lb[0]; $ld[0] = $lc[0] * $lc[0]; $lc[1] = $la[1] + $lb[1]; $ld[1] = $lc[1] * $lc[1]; $lc[2] = $la[2] + $lb[2]; $ld[2] = $lc[2] * $lc[2]; $lc[3] = $la[3] + $lb[3]; $ld[3] = $lc[3] * $lc[3]; $lc[4] = $la[4] + $lb[4]; $ld[4] = $lc[4] * $lc[4]; }, Unrolling2 =\u0026gt; sub { my (@lc, @ld); $lc[0] = $la[0] + $lb[0]; $lc[1] = $la[1] + $lb[1]; $lc[2] = $la[2] + $lb[2]; $lc[3] = $la[3] + $lb[3]; $lc[4] = $la[4] + $lb[4]; $ld[0] = $lc[0] * $lc[0]; $ld[1] = $lc[1] * $lc[1]; $ld[2] = $lc[2] * $lc[2]; $ld[3] = $lc[3] * $lc[3]; $ld[4] = $lc[4] * $lc[4]; }, } ) ); ","date":"2009-03-26T23:10:21+09:00","permalink":"https://www.nqou.net/2009/03/26/231021/","title":"ループアンローリングとデータハザードのデモをPerlでやってみた"},{"content":"Text::MicroTemplateのソースを見ててわかりましたが、CPANオリジナル版とCodeRepos版では仕様が違うようです。バージョン表記は同じですが。 前の記事でraw_stringの書き方が変わった、と書いていますが、それはCodeRepos版のText::MicroTemplateです。 CPAN版は、以前の書き方でも問題なく書けます。 勝手に作ったアーカイブはCodeRepos版なのでご注意ください。 個人的にはCodeRepos版の方がいいかな、とは思います。 コードを実行するだけの時は「?」、出力が必要な時は「?=」、という具合に、シンプルに覚えられます。\n","date":"2009-03-24T22:30:56+09:00","permalink":"https://www.nqou.net/2009/03/24/223056/","title":"Text::MicroTemplateの秘密"},{"content":"細かい内容については、Kansai.pmのページから誰かがアップしてくれているページが見れるので、個人的な感想とか気になったこととかをメモ。 ・イベント/第11回ミーティング報告 - Kansai.pm 開始前 ・集合場所についたら、すでにそれらしき人たちがいた。 ・オフ会は久しぶりだったので、なんかそういう空気に懐かしさを覚えた。まあ、知らない人が見たら怪しい集団だっただろうなぁ。 ・あまりミーハーではないと思っていたが、はてなオフィスとか、生naoyaさんを見ると、なんだか妙に嬉しくなってにやけてきた。 発表 ・Cell Challenge 2009の規定問題（文字列の編集距離計算）について。 PS3にはとんでもないCPUが使われている、ということを初めて知った。 高速化にはアルゴリズムによって単純計算にする事がとても重要。 ビット並列化とループアンロールが鍵。何かで使えるかな？ ・HTML::ExtractContentについて。 「本文らしさ」をヒューリスティックにスコアリング。 本文の解析が苦手なページもあるが、その辺は補いながら使うのが吉。 ・コルーチン コルーチンというのは、中断や再開ができるサブルーチンのこと。 Perlでコルーチンを使うならCoroだが、色々と足りないのでFiber.pmを作った。 使いどころが思いつかなかったけど、ジェネレータのコードを見て、そういう使い方か、と思った。 ・スペルミス修正プログラム キーワードは編集距離とNグラムインデックスとJaro-Winkler。 辞書にははてなキーワードを使える。 ・PerlMol 馴染みのない分野なので？だらけ。 化学式の原子モデル（？）から3Dモデルで表現することもできそうな感じのソフトウェア？ ・名札メーカー 名刺メーカーではない。 名札から文字がはみ出ないように縮小しているのが特徴的。サンプルは文字が小さすぎて線のように見えたのが面白かった。 ・POPFile 単純ベイズ法によるメールの自動振り分けソフトウェア。結構使っている人がいた。私は知らなかった。 4人チームのうち唯一の日本人メンバーだそうで日本語担当だとか。 ・Kansai.pm活動報告とStrawberryPerl 活動報告は写真が少なかった。今年はもっと活動したいね。 Windowsなら、やっぱりStrawberryPerlはオススメ。 ・Social SKK SKKは知らないのですが、カスタム辞書にPerlのスクリプトが指定できるのか？ 発表が終わったあとにshipitでCPANに登録。登録後、会場の拍手が暖かかった。\n発表後～懇親会 ・最初は様子を見ながら喋ってましたが、徐々に徐々に打ち解けてきたというか。 ・Perlの話なかりになるかと思ったけど、そんなことはなかった。 ・気がついたら3時間くらい過ぎていた。 ・Perlライセンスのモダンな掲示板スクリプトが欲しいなぁって言われた。作るかどうかは知らない。 帰り ・lapis25さんと方向が同じだったので、途中まで（と言っても1時間くらいなので結構）話し込んだ。 ・こっちが一方的に知ってるのがフェアじゃないなぁ、とか思いながら。 ・Perlの話がほとんどでした。というか、結構意図的だったんだけど。 ・MENTAやNanoAはドキュメントが足りないよね～とか。で、その辺をCodeReposのコミッターが支えるような構造になっていけばいいな、とか。 ・まあ、最先端を行ってる人は教育とかドキュメントの整備よりも、新しいモジュールやアプリを開発するほうがコミュニティのためだろう、とかそんな話。 ・Perlへの愛を感じた。 家に着いて ・感想を書きかけたけど、酔いと眠気で全然書けなかった。 まあ、そんな感じでした。\n","date":"2009-03-24T00:30:11+09:00","permalink":"https://www.nqou.net/2009/03/24/003011/","title":"Kansai.pm第11回ミーティングに行ってきました"},{"content":" 1 \u0026lt;?=r $hoge ?\u0026gt; 1 \u0026lt;?= raw_string($hoge) ?\u0026gt; ","date":"2009-03-21T04:24:58+09:00","permalink":"https://www.nqou.net/2009/03/21/042458/","title":"MENTA::TemplateとText::MicroTemplate"},{"content":"前回は失敗したが、CodeReposにあるNanoAで再挑戦してみる。\nNanoAの配布元は0.16が最新だったが、CodeReposの最新版は、バージョンが0.17であった。\nCodeRepos版は開発版ということで、そのまま使えるはずだったのだが、Windows上で使うには少し工夫が必要だった（詳しい説明は「lib/NanoA/Config.pm」に書いてあるので、そちらを読もう）ので、将来のため（？）に手順をメモしておく。 まず、CodeReposからsvnで外部参照ごとチェックアウトする。\n1 svn co http://svn.coderepos.org/share/lang/perl/NanoA/trunk NanoA 次に「nanoa.cgi」と同じフォルダに「nanoa-conf.cgi」という名前のファイルを作成する。その中身はとりあえず以下のとおりにしておく。\n1 data_dir = var ついでに、同じフォルダに新しく「var」というフォルダを作っておく。\nここまでやってから、nanoa.cgiにブラウザでアクセスすると、管理用パスワードの設定画面になる（はず）。\n開発版のまま使うのならこれでOK。\nNanoAには、配布版を作成する機能があるのだが、Windows上では簡単には動かない。\nが、とりあえず、nanoa.cgiを作ればあとは何とかなるので、それもついでにメモしておく。\nnanoa.cgiと同じフォルダの「Makefile.PL」を少し変更する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 Index: Makefile.PL =================================================================== --- Makefile.PL (リビジョン 31380) +++ Makefile.PL (作業コピー) @@ -38,8 +38,8 @@ NANOA_CGI_FILES = MENTA/extlib/Class/Accessor/Lite.pm MENTA/extlib/CGI/ExceptionManager.pm lib/NanoA/Config.pm lib/NanoA/Dispatch.pm lib/NanoA/Plugin.pm lib/NanoA/TemplateLoader.pm lib/NanoA.pm nanoa.pl nanoadir: - $(NOECHO)$(RM_RF) $(NANOADIR); - $(NOECHO)$(MKPATH) $(NANOADIR); + $(NOECHO)$(RM_RF) $(NANOADIR) + $(NOECHO)$(MKPATH) $(NANOADIR) nanoacgi: $(NANOA_CGI_FILES) $(FULLPERLRUN) tools/concat.pl -s -n strict,warnings $(NANOA_CGI_FILES) \u0026gt; $(NANOADIR)/nanoa.cgi この状態で、いつものように「perl Makefile.PL」→「dmake」としたあと「dmake nanoa」とする。\n途中で「tar」がない、あるいは、tarコマンドに失敗した、とか言われるが、「dist-cgi」の中にバージョン名（今回は「0.17」）のフォルダがあり、さらにその中に配布版「nanoa.cgi」ができています。\nあとは、その新しくできた「nanoa.cgi」と同じフォルダに「appフォルダ」と、MENTAから「extlibフォルダ」をコピーしてやれば、ほぼ配布版ができあがり。\n必要なら「.htaccess」や「nanoa-conf.cgi」、「varフォルダ」もコピーすれば使える。\nちなみに、現在のCodeRepos版は、extlibをMENTAと共有して使えるので、devel.nqou.netではextlibをルートにおいてNanoAとMENTAで共有しています。\n","date":"2009-03-20T03:42:44+09:00","permalink":"https://www.nqou.net/2009/03/20/034244/","title":"CodeRepos版NanoAをWindowsで動かす方法"},{"content":" ","date":"2009-03-19T23:54:50+09:00","permalink":"https://www.nqou.net/2009/03/19/235450/","title":"StrawberryPerlにGDをインストールするならPPMを使え"},{"content":" 1 Modification of a read-only value attempted at app/plugin/session.pm line 38. ","date":"2009-03-18T04:09:42+09:00","permalink":"https://www.nqou.net/2009/03/18/040942/","title":"NanoAの最新版がインストールできなくて困った件"},{"content":"日テレアプリで石原さとみを検索しようとしたら文字化けして困ってしまった。 どうにかURIモジュールを使ってやろうと思って調べたら、実はブックマークしていた記事にたどり着いた。 参考:URIモジュールにutf8フラグつきの文字列を食わせたらquery_formのエンコードが化けたでござるの巻 - とあるモバイル系エンジニアの日々 この記事を踏まえた結論としては、query_formを使うときは、「no utf8」のスコープでやるのが良い、ということ。\nこの記事の中では、utf8フラグを落としてからURIモジュールを使う、ということをしているのだが、今回、日テレアプリで使うAPIは、Shift_JISのURIエスケープで渡してやる必要があるので、少しだけ変更する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Webpage: http://appli.ntv.co.jp/appli/api/program/index.html use strict; use warnings; use utf8; use YAML;sub p (@) { print Dump(@_) } use LWP::UserAgent (); use URI (); use Encode (); my $ua = LWP::UserAgent-\u0026gt;new; my $cast = Encode::encode(\u0026#39;cp932\u0026#39;, q{石原さとみ});# %90%CE%8C%B4%82%B3%82%C6%82%DD my $key = \u0026#39;your api key\u0026#39;; my $uri = URI-\u0026gt;new(\u0026#39;http://appli.ntv.co.jp/ntv_WebAPI/program/\u0026#39;); { no utf8; $uri-\u0026gt;query_form( key =\u0026gt; $key, cast =\u0026gt; $cast, ); } p $uri; # __END__ my $res = $ua-\u0026gt;mirror($uri, \u0026#39;ntv-apikey.pl.xml\u0026#39;)-\u0026gt;message; p $res; まず文字列をencodeしてcp932のバイト列へ変換します。 で、これを「use utf8」のスコープ内でquery_formへの代入を実行すると、keyやらcastという裸のワードに文字列フラグが付くのか、「%90%CE%8C%B4%82%B3%82%C6%82%DD」となってほしいところが「%C2%90%C3%8E%C2%8C%C2%B4%C2%82%C2%B3%C2%82%C3%86%C2%82%C3%9D」という風になってしまう。 そこで、「no utf8」のスコープを作って、その中で代入を行うと、あら不思議。 ちゃんと望んだとおりの変換をしてくれました。 これで一件落着です。\n","date":"2009-03-17T00:19:31+09:00","permalink":"https://www.nqou.net/2009/03/17/001931/","title":"URIモジュールのquery_formを上手く使う方法"},{"content":"先日、結果的にクリーンインストールしてしまったPerlに、モジュール群を入れているのだが、Plaggerをインストールする際に必要な「Net-SSLeay」のインストール記事が我ながらわかりにくかったので、もう一度今後のために書いてみる。\nNet-SSLeayの前にOpenSSLをインストールします。 まずはOpenSSLのソースを手に入れる。（OpenSSL: Source, Tarballs） そのソースを解凍する。 コマンドプロンプトを起動して解凍したフォルダ（ここでは仮に「D:\\Downloads\\openssl-0.9.8j」としておく）へ移動し、そのディレクトリで以下のように実行する。\n1 D:\\Downloads\\openssl-0.9.8j\u0026gt; ms\\mingw32 すると、コンパイルが始まるのでしばらく待つ。 コンパイルが終了したら、今度は「out」というフォルダに移り、テストを実行する。\n1 2 D:\\Downloads\\openssl-0.9.8j\u0026gt;cd out D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;..\\ms\\test すると、テストが始まるのでしばらく待つ。 テストが終わって、エラーがなさそうなら各種フォルダを作る。\n1 2 3 4 5 D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;md c:\\openssl D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;md c:\\openssl\\bin D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;md c:\\openssl\\lib D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;md c:\\openssl\\include D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;md c:\\openssl\\include\\openssl フォルダができたら、ファイル群をコピーする。\n1 2 3 4 5 6 7 D:\\Downloads\\openssl-0.9.8j\\out\u0026gt;cd .. D:\\Downloads\\openssl-0.9.8j\u0026gt;copy /b outinc\\openssl\\* c:\\openssl\\include\\openssl D:\\Downloads\\openssl-0.9.8j\u0026gt;copy /b out\\libssl32.a c:\\openssl\\lib D:\\Downloads\\openssl-0.9.8j\u0026gt;copy /b out\\libeay32.a c:\\openssl\\lib D:\\Downloads\\openssl-0.9.8j\u0026gt;copy /b libssl32.dll c:\\openssl\\bin D:\\Downloads\\openssl-0.9.8j\u0026gt;copy /b libeay32.dll c:\\openssl\\bin D:\\Downloads\\openssl-0.9.8j\u0026gt;copy /b out\\openssl.exe c:\\openssl\\bin とりあえずopensslについての操作は以上です。ひとまずコマンドプロンプトは閉じます。 次に、Net-SSLeayです。 cpanからNet-SSLeayの最新版を取ってくる。 Florian Ragwitz / Net-SSLeay - search.cpan.org それを解凍して、コマンドプロンプトを起動し、そのフォルダ（今回は「D:\\Downloads\\Net-SSLeay-1.35」としておく）へ移動する。 そして、以下のように実行する。\n1 D:\\Downloads\\Net-SSLeay-1.35\u0026gt;perl Makefile.PL perl.exeにパスが通っていない場合は、perl.exeへのフルパスで実行してやる必要があります。 ともかく、perl.exeでMakefile.PLを実行してやるということです。 手元の環境では以下のようなメッセージが出ました。\n1 2 3 4 5 6 7 Cannot determine perl version info from lib/Net/SSLeay.pm Cannot determine license info from lib/Net/SSLeay.pm *** Found OpenSSL-0.9.8j installed in C:\\OpenSSL *** Be sure to use the same compiler and options to compile your OpenSSL, perl, and Net::SSLeay. Mixing and matching compilers is not supported. Do you want to run external tests? These tests *will* *fail* if you do not have network connectivity. [n] 「C:\\OpenSSLになにかインストールされてますよ。同じコンパイラやオプションでNet-SSLeayをコンパイルしてください。」的な意味です。 あと、接続テストをするかどうかを訊かれていますが、ここではテストを飛ばします。 その後、いくつかライブラリが見つからない、というメッセージが出ますが、Makefileが作成されますので、makeします。\n1 D:\\Downloads\\Net-SSLeay-1.35\u0026gt;dmake 実行が終わるまでしばらく待ちます。 終わったら、opensslでコンパイルしたDLLを作業フォルダにコピーします。\n1 D:\\Downloads\\Net-SSLeay-1.35\u0026gt;copy /b c:\\openssl\\bin\\*.dll blib\\arch\\auto\\Net\\SSLeay おそらく2個のファイルがコピーされると思います。 あとは、インストールです。\n1 D:\\Downloads\\Net-SSLeay-1.35\u0026gt;dmake install 念のためperldocでインストールできているか確認します。\n1 D:\\Downloads\\Net-SSLeay-1.35\u0026gt;perldoc Net::SSLeay エラーが出なければインストール完了です。 お疲れさまでした。\n","date":"2009-03-15T04:12:24+09:00","permalink":"https://www.nqou.net/2009/03/15/041224/","title":"StrawberryPerlにNet-SSLeayをインストールする"},{"content":"StrawberryPerlのサイトに行ったらバージョンアップしていたことに気がついて（遅いけど）、上書きインストールをするつもりでそのままインストールした。 その時、やたらと時間がかかるなぁと思っていたら、インストールしていたモジュール群がきれいさっぱりなくなっていた。 つまり、自動的にアンインストールしたあと、インストールされていたのだ。 苦労して入れたモジュールもあったのに、失敗したなぁ。 次からはzipでインストールするようにしよう。\n","date":"2009-03-08T22:05:51+09:00","permalink":"https://www.nqou.net/2009/03/08/220551/","title":"StrawberryPerlを上書きのつもりでクリーンインストールしてしまった"},{"content":" ","date":"2009-03-06T01:02:29+09:00","permalink":"https://www.nqou.net/2009/03/06/010229/","title":"Kansai.pm第11回ミーティングに行ってきます（予定）"},{"content":"自分のブログをブックマークしてくれた人のはてなダイアリーのリストを返すスクリプトがあった。 Web::Scraperではてブスクレイピング しかし、リニューアル後のはてなには対応していなかったので、勝手に改造して使うことにした。 まあ、ダイアリーやってない人も多いんだけどね。\nソースコード。\n1 2 3 4 5 6 7 8 9 10 11 12 use strict; use warnings; use URI; use Web::Scraper; use List::MoreUtils qw/uniq/; my $uri = URI-\u0026gt;new(\u0026#39;http://b.hatena.ne.jp/bookmarklist?url=http://weblog.nqou.net\u0026#39;); my $scraper = scraper { process \u0026#39;//ul[@class=\u0026#34;comment\u0026#34;]/li/a[1]\u0026#39;, \u0026#39;users[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; result \u0026#39;users\u0026#39;; }; my $res = $scraper-\u0026gt;scrape($uri); print join \u0026#34;\\n\u0026#34;, map { s/b.hatena/d.hatena/;$_} uniq(@{$res}); ","date":"2009-03-05T23:05:22+09:00","permalink":"https://www.nqou.net/2009/03/05/230522/","title":"勝手に改造-Web::Scraperではてブスクレイピング"},{"content":"最近からかもしれないけど、Last.fmでmp3の無料ダウンロードをやっているようだ。 参考：Last.fm からのおすすめ無料mp3 - Last.fm ちょうどWWW::Mechanizeを試していたので、それとWeb::Scraperを組み合わせてダウンロードするスクリプトを作った。\nアカウントを持っているのが前提です。 アカウント情報は以下のように、YAMLで記述しておきます。 ソースコードをこのまま使う場合は、スクリプトのあるディレクトリに「lastfm.freemp3.yaml」という名前で保存しておきます。\n1 2 3 4 --- config: id: xxxxxxxx pw: ******** 最後は改行で終了しておく必要があります。たぶん。 ソースコードをこのまま使う場合は、スクリプトのあるディレクトリに「lastfm」というディレクトリが必要です。 実行すると、そのディレクトリにダウンロードしていきます。 また、保存する時に「mirror」を使うと、通常はファイルの比較をして再ダウンロードを防いでくれるのですが、Last.fmのサーバーの仕様なのかわかりませんが、その機能が効いていません。 その辺はもう少しどうにかしたいですね。 結構ダウンロードに時間がかかるので。 ソースコード。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 use strict; use warnings; use utf8; use Perl6::Say; use Encode; use Config::YAML; my $config = Config::YAML-\u0026gt;new( config =\u0026gt; \u0026#39;./lastfm.freemp3.yaml\u0026#39; ); use Web::Scraper; use WWW::Mechanize; use File::Basename; use List::MoreUtils qw(uniq); my $uri = q{https://www.last.fm/login}; my $mech = WWW::Mechanize-\u0026gt;new( autocheck =\u0026gt; 1, agent =\u0026gt; q{Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9.0.6) Gecko/2009011913 Firefox/3.0.6 (.NET CLR 3.5.30729)}, ); # スタート $mech-\u0026gt;get($uri); # ログイン sleep 1; $mech-\u0026gt;form_number(2); $mech-\u0026gt;set_fields( username =\u0026gt; $config-\u0026gt;{id}, password =\u0026gt; $config-\u0026gt;{pw}, ); $mech-\u0026gt;submit; # フリーMP3のページ sleep 1; $uri = q{http://www.last.fm/home/freemp3s}; $mech-\u0026gt;get($uri); # MP3リンクを取得 sleep 1; my ( $scraper, $result ); $scraper = scraper { process \u0026#39;a[href=~/\\.mp3$/]\u0026#39;, \u0026#39;hrefs[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; result \u0026#39;hrefs\u0026#39;; }; $result = $scraper-\u0026gt;scrape( $mech-\u0026gt;content, $mech-\u0026gt;uri ); foreach my $mp3 ( uniq @{$result} ) { my $filename = basename($mp3); print \u0026#34;try fetch : $mp3 : \u0026#34;; say $mech-\u0026gt;mirror( $mp3, sprintf( \u0026#34;%s/%s\u0026#34;, \u0026#39;lastfm\u0026#39;, $filename ) )-\u0026gt;message; sleep 1; } ","date":"2009-03-02T03:48:17+09:00","permalink":"https://www.nqou.net/2009/03/02/034817/","title":"WWW::MechanizeとWeb::ScraperでLast.fmからfreemp3をダウンロードする"},{"content":"わかってしまえば単純なことでした。\n1 process \u0026#39;a[href=~/\\.jpe?g$/]\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; XPathでも同じようにできます。\n1 process \u0026#39;//a[@href =~ /\\.jpe?g$/]\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; Web::Scraperにはフィルタの概念があって、取得してからごにょごにょできるので、そっちのほうばかり調べていました。 例えば以下のようなHTMLの場合、そのまま取得すると、前後に改行が入ってしまいます。\n1 2 3 \u0026lt;title\u0026gt; タイトルなのだ \u0026lt;/title\u0026gt; で、それを取得する時に、前後の改行を削除してやることができます。\n1 process \u0026#39;title\u0026#39;, \u0026#39;title\u0026#39; =\u0026gt; [\u0026#39;TEXT\u0026#39;, sub { s/^\\s+//o; s/\\s+$//o; } ]; こういう機能をフィルタと呼んでいます。 その機能を先に知ったので、取得したあとに拡張子を調べてマッチした場合だけ追加する、という方法を探していたのですが、考えてみれば、取得してからきれいにするよりも、最初からきれいに取るほうがいいですね。\n以上を踏まえて書き直したのが以下のコード。 ついでだったので、Acme::PerlTidyを使って、自動的にコードの整形をしてもらいました。 実行時には不要なので、削除して使ってもまったく問題ありません。 CPAN：☼ 林永忠 ☼ / Acme-PerlTidy - search.cpan.org\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 use Acme::PerlTidy; use strict; use warnings; use Web::Scraper; use URI (); use LWP::Simple qw(mirror); use File::Basename qw(basename); my $uri = URI-\u0026gt;new(\u0026#34;http://weblog.nqou.net\u0026#34;); my $scraper = scraper { process \u0026#39;a[href=~/\\.jpe?g$/]\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; result \u0026#39;urls\u0026#39;; }; my $result = $scraper-\u0026gt;scrape($uri); foreach my $link (@{$result}) { my $filename = basename($link); mirror($link, \u0026#39;./images/\u0026#39; . $filename); sleep 1; } ","date":"2009-03-01T14:07:28+09:00","permalink":"https://www.nqou.net/2009/03/01/140728/","title":"Web::Scraperで正規表現を使って必要なリンクだけを取得する方法"},{"content":"かなーり今更感がありますが。 モジュール自体は、大分前にウェブにあったスクリプトをコピペして使ったときにインストール済みでしたが、なんとなく難しそうで敬遠していたところもありました。 が、やってみると簡単かつパワフルなモジュールであることがわかりました。 参考：use Web::Scraper; - 今日のCPANモジュール XPathがなかなかわからないのですが、CSSセレクタでもいけるのが超絶簡単です。 例えば、aタグのhref属性を取得する場合のprocessは以下のとおり。\n1 process \u0026#39;a\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; で、この場合だと、href属性がないaタグも対象になってしまうので、未定義（undef）が入る場合があります。 なので、href属性があるものだけを対象としたのが以下のprocessです。\n1 process \u0026#39;a[href]\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; 同じものをXPathで書くと以下のとおり。\n1 process \u0026#39;//a[@href]\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; で、リンクをたどる場合は画像を取得するのが基本（？）なので、そういうスクリプトを書いてみました。 何番煎じかわかりませんが。\nソースコード。 このスクリプトを使う場合は、画像の保存用に、スクリプトと同じディレクトリに「images」というディレクトリをあらかじめ用意する必要があります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 use strict; use warnings; use Web::Scraper; use URI (); use LWP::Simple qw(mirror); use File::Basename qw(basename); my $uri = URI-\u0026gt;new(\u0026#34;http://weblog.nqou.net\u0026#34;); my $scraper = scraper { process \u0026#39;a[href]\u0026#39;, \u0026#39;urls[]\u0026#39; =\u0026gt; \u0026#39;@href\u0026#39;; result \u0026#39;urls\u0026#39;; }; my $result = $scraper-\u0026gt;scrape($uri); foreach my $link (@{$result}) { if ($link =~ /\\.jpe?g$/) { my $filename = basename($link); mirror($link, \u0026#39;./images/\u0026#39; . $filename); sleep 1; } } 理想を言えば、scraperで取得する時に、正規表現で必要なリンクだけ取得できればいいんですが。 やり方はありそうなんですよね。\n","date":"2009-02-28T02:45:57+09:00","permalink":"https://www.nqou.net/2009/02/28/024557/","title":"Web::Scraperに入門した"},{"content":"RSSもいいけど、今後のことを思えばAtomも欠かせません。 ざっくりとCPANを漁っていくつか見繕ってベンチマークしました。 ついでにXPathでAtomを解析してみました。 いまいち納得はいきませんが、とりあえず同じ出力を得ることができたので良しとします。\n1 2 3 4 5 6 7 8 9 10 11 12 Benchmark: running Data::Feed, XML::Atom, XML::Feed, XML::FeedPP, XML::LibXML for at least 3 CPU seconds... Data::Feed: 3 wallclock secs ( 3.14 usr + 0.00 sys = 3.14 CPU) @ 413.88/s (n=1300) XML::Atom: 3 wallclock secs ( 3.20 usr + 0.00 sys = 3.20 CPU) @ 525.76/s (n=1684) XML::Feed: 3 wallclock secs ( 3.28 usr + 0.02 sys = 3.30 CPU) @ 415.23/s (n=1369) XML::FeedPP: 3 wallclock secs ( 3.19 usr + 0.00 sys = 3.19 CPU) @ 120.49/s (n=384) XML::LibXML: 3 wallclock secs ( 3.16 usr + 0.05 sys = 3.20 CPU) @ 1105.81/s (n=3543) Rate XML::FeedPP Data::Feed XML::Feed XML::Atom XML::LibXML XML::FeedPP 120/s -- -71% -71% -77% -89% Data::Feed 414/s 243% -- -0% -21% -63% XML::Feed 415/s 245% 0% -- -21% -62% XML::Atom 526/s 336% 27% 27% -- -52% XML::LibXML 1106/s 818% 167% 166% 110% -- Atomは「Perl - Google ブログ検索」な感じの10件です。 結果から見ると、やはりXML::LibXMLの一人勝ち。XPathさえきっちり書くことができるなら、これを使うのが良いでしょうね。 XML::Atom（実際はXML::Atom::Feedですが）は、PPを除いた他の二つよりは少し速いです。これはAtomに特化しているからかもしれませんが。 XML::FeedとData::Feedはほぼ同じ程度でした。 また、XML::FeedPPは残念な結果でした。しかし、Atomだから遅いというわけではなく、LibXMLとの比較だと同じ程度なので、単に比べたモジュールが高速なものが多かった、ということでしょう。 ソースは以下のとおり。\nソースコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 use strict; use warnings; use Data::Dumper; use Benchmark qw(:all); use FileHandle; use XML::LibXML; use XML::Atom::Feed; use Data::Feed; use XML::Feed; use XML::FeedPP; my $feed_file = q{../atom.xml}; my $fh = FileHandle-\u0026gt;new($feed_file) or die \u0026#34;cannot open $feed_file: $!\u0026#34;; local $/; # slurp mode our $content = $fh-\u0026gt;getline; $fh-\u0026gt;close; cmpthese(timethese(0, { \u0026#39;XML::Atom\u0026#39; =\u0026gt; \\\u0026amp;with_xml_atom, \u0026#39;Data::Feed\u0026#39; =\u0026gt; \\\u0026amp;with_data_feed, \u0026#39;XML::Feed\u0026#39; =\u0026gt; \\\u0026amp;with_xml_feed, \u0026#39;XML::FeedPP\u0026#39; =\u0026gt; \\\u0026amp;with_xml_feedpp, \u0026#39;XML::LibXML\u0026#39; =\u0026gt; \\\u0026amp;with_xml_libxml, })); sub with_xml_libxml { my @links =(); my $parser = XML::LibXML-\u0026gt;new; my $doc = $parser-\u0026gt;parse_string($content); my @nodes = $doc-\u0026gt;findnodes( qq{//*[name()=\u0026#39;entry\u0026#39;]/*[name()=\u0026#39;link\u0026#39;]} ); for my $node (@nodes) { push @links, $node-\u0026gt;getAttribute(\u0026#39;href\u0026#39;); } # print Dumper \\@links; } sub with_xml_feedpp { my @links = (); my $feed = XML::FeedPP-\u0026gt;new($content); foreach my $item ( $feed-\u0026gt;get_item() ) { push @links, $item-\u0026gt;link; } # print Dumper \\@links; } sub with_xml_feed { my @links = (); my $atom = XML::Feed-\u0026gt;parse(\\$content); for my $entry ($atom-\u0026gt;entries) { push @links, $entry-\u0026gt;link; } # print Dumper \\@links; } sub with_data_feed { my @links = (); my $atom = Data::Feed-\u0026gt;parse(\\$content); for my $entry ($atom-\u0026gt;entries) { push @links, $entry-\u0026gt;link; } # print Dumper \\@links; } sub with_xml_atom { my @links = (); my $atom = XML::Atom::Feed-\u0026gt;new(\\$content); for my $entry ($atom-\u0026gt;entries) { for my $link ($entry-\u0026gt;link) { push @links, $link-\u0026gt;href; } } # print Dumper \\@links; } ","date":"2009-02-28T01:46:16+09:00","permalink":"https://www.nqou.net/2009/02/28/014616/","title":"Atomのパース速度の比較"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 Benchmark: running XML::LibXML::SAX, XML::Parser, XML::SAX::Expat, XML::SAX::ExpatXS, XML::SAX::PP for at least 3 CPU seconds... XML::LibXML::SAX: 3 wallclock secs ( 3.03 usr + 0.00 sys = 3.03 CPU) @ 20.79/s (n=63) XML::Parser: 3 wallclock secs ( 3.11 usr + 0.01 sys = 3.12 CPU) @ 57.30/s (n=179) XML::SAX::Expat: 3 wallclock secs ( 3.27 usr + 0.00 sys = 3.27 CPU) @ 18.38/s (n=60) XML::SAX::ExpatXS: 3 wallclock secs ( 3.30 usr + 0.00 sys = 3.30 CPU) @ 67.33/s (n=222) XML::SAX::PP: 3 wallclock secs ( 3.25 usr + 0.00 sys = 3.25 CPU) @ 4.00/s (n=13) Rate XML::SAX::PP XML::SAX::Expat XML::LibXML::SAX XML::Parser XML::SAX::ExpatXS XML::SAX::PP 4.00/s -- -78% -81% -93% -94% XML::SAX::Expat 18.4/s 360% -- -12% -68% -73% XML::LibXML::SAX 20.8/s 420% 13% -- -64% -69% XML::Parser 57.3/s 1333% 212% 176% -- -15% XML::SAX::ExpatXS 67.3/s 1584% 266% 224% 18% -- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 use strict; use warnings; use Benchmark qw(:all); use Perl6::Say; use FileHandle; use XML::Simple; use Data::Dumper; my $rss_file = \u0026#34;../satomi.xml\u0026#34;; my $fh = FileHandle-\u0026gt;new($rss_file) or die \u0026#34;cannot open $rss_file: $!\u0026#34;; local $/; # slurp mode our $content = $fh-\u0026gt;getline; $fh-\u0026gt;close; sub parse { my $xml = XML::Simple-\u0026gt;new-\u0026gt;XMLin($content); # say Dumper $xml; } cmpthese(timethese(0, { \u0026#39;XML::Parser\u0026#39; =\u0026gt; \\\u0026amp;with_xml_parser, \u0026#39;XML::LibXML::SAX\u0026#39; =\u0026gt; \\\u0026amp;with_xml_libxml_sax, \u0026#39;XML::SAX::ExpatXS\u0026#39; =\u0026gt; \\\u0026amp;with_xml_sax_expatxs, \u0026#39;XML::SAX::Expat\u0026#39; =\u0026gt; \\\u0026amp;with_xml_sax_expat, \u0026#39;XML::SAX::PP\u0026#39; =\u0026gt; \\\u0026amp;with_xml_sax_pp, })); sub with_xml_parser { $XML::Simple::PREFERRED_PARSER = \u0026#39;XML::Parser\u0026#39;; parse(); } sub with_xml_sax_pp { $XML::Simple::PREFERRED_PARSER = \u0026#39;XML::SAX::PurePerl\u0026#39;; parse(); } sub with_xml_libxml_sax { $XML::Simple::PREFERRED_PARSER = \u0026#39;XML::LibXML::SAX\u0026#39;; parse(); } sub with_xml_sax_expatxs { $XML::Simple::PREFERRED_PARSER = \u0026#39;XML::SAX::ExpatXS\u0026#39;; parse(); } sub with_xml_sax_expat { $XML::Simple::PREFERRED_PARSER = \u0026#39;XML::SAX::Expat\u0026#39;; parse(); } ","date":"2009-02-23T23:10:43+09:00","permalink":"https://www.nqou.net/2009/02/23/231043/","title":"XML::Simple におけるパーサーの実行速度比較"},{"content":"色々と触発されてやってみた。 参考： Perl で XML の処理はどれが速いかベンチ : NDO::Weblog iandeth. - XML::Simple は遅い説における意外な落とし穴 XML::Simple におけるパーサーの実行速度比較 - naoyaのはてなダイアリー\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Benchmark: running XML::FeedPP, XML::LibXML, XML::RSS, XML::RSS::LibXML, XML::RSS::Parser, XML::RSSLite, XML::Simple, regexp for at least 3 CPU seconds... XML::FeedPP: 2 wallclock secs ( 3.02 usr + 0.00 sys = 3.02 CPU) @ 55.37/s (n=167) XML::LibXML: 3 wallclock secs ( 3.25 usr + 0.02 sys = 3.27 CPU) @ 496.02/s (n=1620) XML::RSS: 4 wallclock secs ( 3.27 usr + 0.00 sys = 3.27 CPU) @ 2.76/s (n=9) XML::RSS::LibXML: 4 wallclock secs ( 3.25 usr + 0.00 sys = 3.25 CPU) @ 49.54/s (n=161) XML::RSS::Parser: 3 wallclock secs ( 3.19 usr + 0.00 sys = 3.19 CPU) @ 3.76/s (n=12) XML::RSSLite: 3 wallclock secs ( 3.14 usr + 0.00 sys = 3.14 CPU) @ 112.10/s (n=352) XML::Simple: 3 wallclock secs ( 3.14 usr + 0.00 sys = 3.14 CPU) @ 61.13/s (n=192) regexp: 4 wallclock secs ( 3.28 usr + 0.00 sys = 3.28 CPU) @ 6340.14/s (n=20802) Rate XML::RSS XML::RSS::Parser XML::RSS::LibXML XML::FeedPP XML::Simple XML::RSSLite XML::LibXML regexp XML::RSS 2.76/s -- -27% -94% -95% -95% -98% -99% -100% XML::RSS::Parser 3.76/s 37% -- -92% -93% -94% -97% -99% -100% XML::RSS::LibXML 49.5/s 1697% 1216% -- -11% -19% -56% -90% -99% XML::FeedPP 55.4/s 1909% 1371% 12% -- -9% -51% -89% -99% XML::Simple 61.1/s 2118% 1524% 23% 10% -- -45% -88% -99% XML::RSSLite 112/s 3967% 2878% 126% 102% 83% -- -77% -98% XML::LibXML 496/s 17894% 13078% 901% 796% 711% 342% -- -92% regexp 6340/s 229906% 168336% 12698% 11350% 10272% 5556% 1178% -- 読み込んだRSSファイルは、「はてなブックマーク - タグ - 石原さとみ（タグ「石原さとみ」を含む新着エントリー）」な感じの20件です。 正規表現はパターンがちがちで応用は利きませんが、速さはピカイチ。 XML::LibXMLはXPathがよくわからないのでアレですが、使いこなせれば速さも申し分なしです。 XML::RSSLiteが結構頑張っている印象ですね。関数呼び出しなのが、この中では違和感ありますが。 XML::Simpleのパーサーは、無難にXML::Parserを指定することでそれなりに速いです。ただ、手元の環境だとXML::SAX::ExpatXSが最速だったのですが。 ま、環境によるんでしょうね。 XML::FeedPPがかなり健闘していると思います。ファイル構成もシンプル（1枚だけ）だし、汎用性もあるし、レンタルサーバーにも最適でしょうね。 これからRSSなどを扱うならXML::FeedPPが便利でしょうね。 ソースコードは以下のとおり。 使う場合はRSSファイルを適宜用意してください。\nソースコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 use strict; use warnings; use Data::Dumper; use Benchmark qw(:all); use FileHandle; use XML::LibXML; use XML::RSS; use XML::Simple; $XML::Simple::PREFERRED_PARSER = \u0026#39;XML::Parser\u0026#39;; use XML::RSS::LibXML; use XML::RSS::Parser; use XML::FeedPP; use XML::RSSLite; my $rss_file = \u0026#34;../satomi.xml\u0026#34;; my $fh = FileHandle-\u0026gt;new($rss_file) or die \u0026#34;cannot open $rss_file: $!\u0026#34;; local $/; # slurp mode our $content = $fh-\u0026gt;getline; $fh-\u0026gt;close; cmpthese(timethese(0, { \u0026#39;regexp\u0026#39; =\u0026gt; \\\u0026amp;with_regexp, \u0026#39;XML::Simple\u0026#39; =\u0026gt; \\\u0026amp;with_xml_simple, \u0026#39;XML::RSS\u0026#39; =\u0026gt; \\\u0026amp;with_xml_rss, \u0026#39;XML::LibXML\u0026#39; =\u0026gt; \\\u0026amp;with_xml_libxml, \u0026#39;XML::RSS::LibXML\u0026#39; =\u0026gt; \\\u0026amp;with_xml_rss_libxml, \u0026#39;XML::RSS::Parser\u0026#39; =\u0026gt; \\\u0026amp;with_xml_rss_parser, \u0026#39;XML::FeedPP\u0026#39; =\u0026gt; \\\u0026amp;with_xml_feedpp, \u0026#39;XML::RSSLite\u0026#39; =\u0026gt; \\\u0026amp;with_xml_rsslite, })); sub with_xml_rsslite { my @links = (); my %result; parseRSS(\\%result, \\$content); for my $item (@{$result{item}}) { push @links, $item-\u0026gt;{link}; } # print Dumper \\@links; } sub with_xml_feedpp { my @links = (); my $feed = XML::FeedPP-\u0026gt;new($content); foreach my $item ( $feed-\u0026gt;get_item() ) { push @links, $item-\u0026gt;link; } # print Dumper \\@links; } sub with_xml_rss_parser { my @links = (); my $parser = XML::RSS::Parser-\u0026gt;new; my $feed = $parser-\u0026gt;parse_string($content); foreach my $item ( $feed-\u0026gt;query(\u0026#39;item\u0026#39;) ) { push @links, $item-\u0026gt;query(\u0026#39;link\u0026#39;)-\u0026gt;text_content; } # print Dumper \\@links; } sub with_regexp { my $pattern = \u0026#34;\u0026lt;item .*?\u0026gt;.*?\u0026lt;link\u0026gt;(.*?)\u0026lt;/link\u0026gt;.*?\u0026lt;/item\u0026gt;\u0026#34;; my @links = ($content =~ m/$pattern/smg); # print Dumper \\@links; } sub with_xml_simple { my @links = (); my $parser = XML::Simple-\u0026gt;new; my $data = $parser-\u0026gt;XMLin($content, ForceArray =\u0026gt; 1); for my $item (@{$data-\u0026gt;{item}}) { push @links, $item-\u0026gt;{link}[0]; } # print Dumper \\@links; } sub with_xml_rss { my @links = (); my $rss = XML::RSS-\u0026gt;new; $rss-\u0026gt;parse($content); for my $item (@{$rss-\u0026gt;{items}}) { push @links, $item-\u0026gt;{link}; } # print Dumper \\@links; } sub with_xml_libxml { my @links =(); my $parser = XML::LibXML-\u0026gt;new; my $doc = $parser-\u0026gt;parse_string($content); my @nodes = $doc-\u0026gt;findnodes( \u0026#34;//*[local-name()=\u0026#39;item\u0026#39;]/*[local-name()=\u0026#39;link\u0026#39;]/text()\u0026#34; ); for my $node (@nodes) { push @links, $node-\u0026gt;nodeValue; } # print Dumper \\@links; } sub with_xml_rss_libxml { my @links = (); my $rss = XML::RSS::LibXML-\u0026gt;new; $rss-\u0026gt;parse($content); for my $item (@{$rss-\u0026gt;{items}}) { push @links, $item-\u0026gt;{link}; } # print Dumper \\@links; } ","date":"2009-02-23T22:43:28+09:00","permalink":"https://www.nqou.net/2009/02/23/224328/","title":"RSSのパース速度の比較"},{"content":"名前付けに困っていたところに、CPAN 長いネームスペース大会 - にぽたん研究所やCPAN 階層の深いモジュール王選手権 - id:kazuhookuのメモ置き場をみて、CPANモジュールからアイデアをもらおうと思ってやってみた。 とりあえず1000回以上使われていたのは以下の名前。 （2009/02/20時点）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 3060 times: Net 2581 times: XML 2287 times: Plugin 1964 times: Bio 1743 times: Data 1696 times: HTML 1427 times: API 1346 times: WWW 1310 times: Test 1296 times: Class 1176 times: eBay 1140 times: Apache 1105 times: DateTime 1083 times: Text さすがに、Net,XML,HTML,WWWなど、ウェブ関係が多いようです。 あと、Textが多いのはPerlの面目躍如でしょうか。テキスト処理は十八番ですからね。 ちなみに、200回以上使われている名前は、138個。 100回以上200回未満は、171個。 10回以上100回未満は、2109個。 5回以上10回未満は、1686個。 2回以上5回未満は、5803個。 1回だけは、21289個でした。\nソースコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/perl use strict; use warnings; use CPAN::Config; use IO::Uncompress::Gunzip qw($GunzipError); use constant PRINT_TIMES =\u0026gt; 1000; my $package_file = sprintf \u0026#34;%s/modules/02packages.details.txt.gz\u0026#34;, $CPAN::Config-\u0026gt;{keep_source_where}; my %ranking = (); my $z = IO::Uncompress::Gunzip-\u0026gt;new($package_file) or die \u0026#34;$GunzipError\\n\u0026#34;; while (my $line = $z-\u0026gt;getline) { my($package) = split /\\s+/, $line, 2; my @names = split /::/, $package; foreach my $name (@names) { $ranking{$name}++; } } $z-\u0026gt;close; my $number = 1; for my $name (sort { $ranking{$b} \u0026lt;=\u0026gt; $ranking{$a} } keys %ranking) { last if $ranking{$name} \u0026lt; PRINT_TIMES(); printf \u0026#34;%5d times: %s\\n\u0026#34;, $ranking{$name}, $name; } 200回以上1000回未満の名前は以下のとおり。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 988 times: File 956 times: DBIx 943 times: Object 927 times: CGI 861 times: Template 850 times: POE 820 times: Mail 818 times: TimeZone 763 times: App 746 times: DataType 742 times: Catalyst 732 times: Locale 702 times: Config 700 times: Component 658 times: Meta 635 times: Simple 620 times: Perl 611 times: Filter 609 times: DBI 599 times: Server 593 times: DB 591 times: Search 582 times: HTTP 573 times: Base 561 times: Tools 545 times: Devel 544 times: Parse 530 times: Model 524 times: Parser 513 times: Games 507 times: Acme 500 times: Lingua 498 times: Math 489 times: Tk 489 times: Module 469 times: Engine 465 times: Amazon 462 times: Util 458 times: Win32 453 times: Client 452 times: Image 450 times: ICal 442 times: WebService 441 times: Session 439 times: UMMF 434 times: Call 432 times: Yahoo 428 times: Run 426 times: IO 409 times: Schema 381 times: Log 365 times: Jifty 357 times: SQL 355 times: Tie 353 times: Wx 348 times: View 333 times: Google 333 times: Command 330 times: Pod 324 times: Business 320 times: Response 315 times: PDF 315 times: Marketing 312 times: Cache 311 times: Graph 307 times: Request 306 times: Crypt 306 times: Apache2 305 times: Widget 305 times: Message 304 times: Driver 304 times: Backend 292 times: Paper 291 times: Specs 291 times: Utils 288 times: Element 284 times: Node 281 times: Protocol 281 times: Web 281 times: PiseApplication 278 times: Geo 278 times: MooseX 274 times: Tree 274 times: Graphics 273 times: DRI 273 times: SOAP 272 times: Audio 270 times: RDF 268 times: Email 268 times: America 268 times: Validate 267 times: Field 267 times: Date 264 times: Application 263 times: Kwiki 263 times: Query 260 times: Controller 260 times: Enum 258 times: Info 256 times: Language 255 times: Form 255 times: Exception 251 times: Algorithm 250 times: Encode 249 times: Critic 245 times: Action 243 times: Plagger 236 times: Agent 235 times: Bundle 232 times: Rose 223 times: Store 222 times: Finance 219 times: Type 218 times: Chart 218 times: Storage 217 times: String 217 times: Value 217 times: UI 215 times: Core 207 times: AFP 206 times: Handler 206 times: Error 204 times: Gtk2 200 times: Policy ","date":"2009-02-22T00:11:27+09:00","permalink":"https://www.nqou.net/2009/02/22/001127/","title":"CPAN よく使われるネーム王選手権"},{"content":"メールマガジンの「Perlで書く」を読んでいたら、なんとなく試してみたくなったので、実行してみた。 continue構文は使ったことない。 使いどころがわからないというか、意識したこともなかった。 参考\nベンチマークコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #!/usr/bin/perl use strict; use warnings; use Benchmark qw(:all); use Perl6::Say; sub confirm ($) { # say shift; } cmpthese( 100000, { sub_foreach_normal =\u0026gt; sub { my $sum = 0; foreach my $i (1 .. 100) { $sum += $i; } confirm $sum; }, sub_while_continue =\u0026gt; sub { my $sum = 0; my $i = 1; while ($i \u0026lt; 101) { $sum += $i; } continue { $i++; } confirm $sum; }, sub_for =\u0026gt; sub { my $sum = 0; for (my $i = 1; $i \u0026lt; 101; $i++) { $sum += $i; } confirm $sum; }, } ); ","date":"2009-02-21T00:23:19+09:00","permalink":"https://www.nqou.net/2009/02/21/002319/","title":"continue構文とやらを使ってみた"},{"content":"相変わらず「モダンPerl入門」を読み進めている。 「2.3 Composite」まで進んだが、ここのサンプルソースが結構間違っていた。 カンマが抜けていたり、関数名が違っていたり。 そのあたりは簡単に予想できたのだけど、大変だったのは「Shape::Composite」に 「use MooseX::AttributeHelpers」がなかったために、わけのわからないエラーに悩まされたことだ。 気づいてみれば、この章の始めのほうにもMooseX::AttributeHelpersを多用するとは書いてあるのだが、以下のようなエラーからはとても思いつかなかった。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Could not load class (Moose::Meta::Attribute::Custom::Collection::Array) because : Can\u0026#39;t locate Moose/Meta/Attribute/Custom/Collection/Array.pm in @INC (@INC contains: lib C:/strawberry/perl/lib C:/strawberry/perl/site/lib .) at C:/strawberry/perl/site/lib/Class/MOP.pm line 153. Could not load class (Collection::Array) because : Can\u0026#39;t locate Collection/Array.pm in @INC (@INC contains: lib C:/strawberry/perl/lib C:/strawberry/perl/site/lib .) at C:/strawberry/perl/site/lib/Class/MOP.pm line 153. at C:/strawberry/perl/site/lib/Class/MOP.pm line 135 Class::MOP::load_first_existing_class(\u0026#39;Moose::Meta::Attribute::Custom::Collection::Array\u0026#39;, \u0026#39;Collection::Array\u0026#39;) called at C:/strawberry/perl/site/lib/Moose/Util.pm line 143 Moose::Util::resolve_metaclass_alias(\u0026#39;Attribute\u0026#39;, \u0026#39;Collection::Array\u0026#39;) called at C:/strawberry/perl/site/lib/Moose/Meta/Attribute.pm line 97 Moose::Meta::Attribute::interpolate_class(\u0026#39;Moose::Meta::Attribute\u0026#39;, \u0026#39;provides\u0026#39;, \u0026#39;HASH(0x1160f6c)\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;default\u0026#39;, \u0026#39;CODE(0x1041e44)\u0026#39;, ...) called at C:/strawberry/perl/site/lib/Moose/Meta/Attribute.pm line 86 Moose::Meta::Attribute::interpolate_class_and_new(\u0026#39;Moose::Meta::Attribute\u0026#39;, \u0026#39;shapes\u0026#39;, \u0026#39;provides\u0026#39;, \u0026#39;HASH(0x1160f6c)\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;default\u0026#39;, ...) called at C:/strawberry/perl/site/lib/Moose/Meta/Class.pm line 510 Moose::Meta::Class::_process_new_attribute(\u0026#39;Moose::Meta::Class=HASH(0x104fb9c)\u0026#39;, \u0026#39;shapes\u0026#39;, \u0026#39;provides\u0026#39;, \u0026#39;HASH(0x1160f6c)\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;default\u0026#39;, ...) called at C:/strawberry/perl/site/lib/Moose/Meta/Class.pm line 503 Moose::Meta::Class::_process_attribute(\u0026#39;Moose::Meta::Class=HASH(0x104fb9c)\u0026#39;, \u0026#39;shapes\u0026#39;, \u0026#39;provides\u0026#39;, \u0026#39;HASH(0x1160f6c)\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;default\u0026#39;, ...) called at C:/strawberry/perl/site/lib/Moose/Meta/Class.pm line 202 Moose::Meta::Class::add_attribute(\u0026#39;Moose::Meta::Class=HASH(0x104fb9c)\u0026#39;, \u0026#39;shapes\u0026#39;, \u0026#39;provides\u0026#39;, \u0026#39;HASH(0x1160f6c)\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;default\u0026#39;, ...) called at C:/strawberry/perl/site/lib/Moose.pm line 89 Moose::has(\u0026#39;Shape::Composite\u0026#39;, \u0026#39;shapes\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;rw\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;auto_deref\u0026#39;, ...) called at C:/strawberry/perl/site/lib/Moose/Exporter.pm line 201 Moose::Exporter::__ANON__(\u0026#39;shapes\u0026#39;, \u0026#39;metaclass\u0026#39;, \u0026#39;Collection::Array\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;rw\u0026#39;, \u0026#39;isa\u0026#39;, \u0026#39;ArrayRef\u0026#39;, \u0026#39;auto_deref\u0026#39;, 1, ...) called at lib/Shape/Composite.pm line 15 require Shape/Composite.pm called at p051.pl line 8 main::BEGIN() called at lib/Shape/Composite.pm line 0 eval {...} called at lib/Shape/Composite.pm line 0 Compilation failed in require at p051.pl line 8. BEGIN failed--compilation aborted at p051.pl line 8. 最終的なShape::Compositeのソースは以下のとおり。\nlib/Shape/Composite.pm\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package Shape::Composite; use Moose; use MooseX::AttributeHelpers; with \u0026#39;Shape\u0026#39;; has \u0026#39;shapes\u0026#39; =\u0026gt; ( metaclass =\u0026gt; \u0026#39;Collection::Array\u0026#39;, is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;ArrayRef\u0026#39;, auto_deref =\u0026gt; 1, default =\u0026gt; sub { [] }, provides =\u0026gt; { push =\u0026gt; \u0026#39;shape_add\u0026#39;, }, ); no Moose; no MooseX::AttributeHelpers; sub resize { my ($self, $factor) = @_; foreach my $shape ( $self-\u0026gt;shapes ) { $shape-\u0026gt;resize( $factor ); } } sub print { my $self = shift; foreach my $shape ( $self-\u0026gt;shapes ) { $shape-\u0026gt;print; } } 1; ","date":"2009-02-15T02:16:45+09:00","permalink":"https://www.nqou.net/2009/02/15/021645/","title":"「use MooseX::AttributeHelpers」が抜けているとわけがわからないエラーになる件"},{"content":" ","date":"2009-02-14T22:04:50+09:00","permalink":"https://www.nqou.net/2009/02/14/220450/","title":"Perlの裾野が広がらない問題について"},{"content":"「モダンPerl入門」相変わらずゆっくりと読んでます。 別名というか、英語表記で「PRAGMATIC Perl」と書いてあります。 Pragmaticというのは「実際的な」とか「実用的な」「実利的な」といった意味のようです。 で、ようやく第一章を読み終わりました。 近代的なオブジェクト指向ということで、主にMooseの紹介でした。 その中で、Moose::Roleが出てきましたが、この考え方が面白いです。 面白いというか、すっと腑に落ちたという感じです。 基本的考え方として、役割を定義するクラスを作って、それを継承することで別のクラスに意味づけをする、という風に理解しています。 Moose::Roleでは継承の仕組みが拡張されていて、指定したメソッドを必ず備えるように縛ることができます。 MovableTypeでも、最近はカテゴリーとタグがありますが、従来の継承はカテゴリー、Moose::Roleで拡張される「役割」はタグ、というイメージでしょうか。 CPAN:Moose::Role - The Moose Role で、例としてキャッシュのアダプターが紹介されていましたが、CPANに同等の機能を持つMooseX::Role::WithCacheというモジュールがある、ということでしたが、名前が違っていました。 正しくはMooseX::WithCacheでした。 いきなりcpanコマンドでインストールしようとしたら、存在しないというエラーが返ってきてビックリしました。 CPAN:Daisuke Maki / MooseX-WithCache - search.cpan.org ただ、問題なのは、この辺を勉強してもレンタルサーバーでは使えない、ということなんですね。\n","date":"2009-02-14T10:59:50+09:00","permalink":"https://www.nqou.net/2009/02/14/105950/","title":"Moose::Roleが興味深い"},{"content":" 1 2 3 use Moose (); $n = 999; print $n; 1 2 3 use Moose; $n = 999; print $n; 1 2 3 4 Moose does not export its sugar to the \u0026#39;main\u0026#39; package. Global symbol \u0026#34;$n\u0026#34; requires explicit package name at D:\\WebApp\\copal\\copal.tmp line 2. Global symbol \u0026#34;$n\u0026#34; requires explicit package name at D:\\WebApp\\copal\\copal.tmp line 3. Execution of D:\\WebApp\\copal\\copal.tmp aborted due to compilation errors. ","date":"2009-02-12T23:36:29+09:00","permalink":"https://www.nqou.net/2009/02/12/233629/","title":"自動的にstrictが有効になる理由"},{"content":"というようなエントリーをちらほら見かけた。 で、今日、Amazonからうちにも届いた。\n","date":"2009-02-12T00:46:53+09:00","permalink":"https://www.nqou.net/2009/02/12/004653/","title":"モダンPerl入門が届いた"},{"content":" 1 2 3 4 5 6 use strict; use warnings; use File::Copy::Recursive qw(rcopy); my $from_dir = \u0026#34;.\u0026#34;; my $to_dir = \u0026#34;/temp\u0026#34;; rcopy($from_dir, $to_dir); 1 2 3 4 5 6 7 use warnings; use strict; use File::Copy::Recursive qw(rcopy); use Path::Class; my $from_dir = dir(\u0026#34;.\u0026#34;); my $to_dir = dir(\u0026#34;\u0026#34;, \u0026#34;temp\u0026#34;); rcopy($from_dir, $to_dir); ","date":"2009-02-11T01:11:02+09:00","permalink":"https://www.nqou.net/2009/02/11/011102/","title":"Perlでファイルをサブディレクトリごとコピーする"},{"content":" ","date":"2009-02-08T03:10:34+09:00","permalink":"https://www.nqou.net/2009/02/08/031034/","title":"Zeitgeistをパワーアップ"},{"content":" ","date":"2009-02-04T02:49:01+09:00","permalink":"https://www.nqou.net/2009/02/04/024901/","title":"まほでんわーるどの攻略法"},{"content":" ","date":"2009-02-04T00:06:25+09:00","permalink":"https://www.nqou.net/2009/02/04/000625/","title":"「モダンPerl入門」を注文した"},{"content":" ","date":"2009-02-02T20:45:00+09:00","permalink":"https://www.nqou.net/2009/02/02/204500/","title":"Blackbirdとやらを使ってみようじゃないか"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 Summary of my perl5 (revision 5 version 10 subversion 0) configuration: Platform: osname=MSWin32, osvers=5.1, archname=MSWin32-x86-multi-thread uname=\u0026#39;\u0026#39; config_args=\u0026#39;undef\u0026#39; hint=recommended, useposix=true, d_sigaction=undef useithreads=define, usemultiplicity=define useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef use64bitint=undef, use64bitall=undef, uselongdouble=undef usemymalloc=n, bincompat5005=undef Compiler: cc=\u0026#39;gcc\u0026#39;, ccflags =\u0026#39; -s -O2 -DWIN32 -DHAVE_DES_FCRYPT -DPERL_IMPLICIT_CONTE XT -DPERL_IMPLICIT_SYS -fno-strict-aliasing -DPERL_MSVCRT_READFIX\u0026#39;, optimize=\u0026#39;-s -O2\u0026#39;, cppflags=\u0026#39;-DWIN32\u0026#39; ccversion=\u0026#39;\u0026#39;, gccversion=\u0026#39;3.4.5\u0026#39;, gccosandvers=\u0026#39;\u0026#39; intsize=4, longsize=4, ptrsize=4, doublesize=8, byteorder=1234 d_longlong=undef, longlongsize=8, d_longdbl=define, longdblsize=12 ivtype=\u0026#39;long\u0026#39;, ivsize=4, nvtype=\u0026#39;double\u0026#39;, nvsize=8, Off_t=\u0026#39;long long\u0026#39;, lseek size=8 alignbytes=8, prototype=define Linker and Libraries: ld=\u0026#39;g++\u0026#39;, ldflags =\u0026#39;-s -L\u0026#34;C:\\strawberry\\perl\\lib\\CORE\u0026#34; -L\u0026#34;C:\\strawberry\\c\\li b\u0026#34;\u0026#39; libpth=C:\\strawberry\\c\\lib libs= -lmsvcrt -lmoldname -lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr -lwinmm -lversion -lodbc32 -lodbccp32 perllibs= -lmsvcrt -lmoldname -lkernel32 -luser32 -lgdi32 -lwinspool -lcomdl g32 -ladvapi32 -lshell32 -lole32 -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr -lw inmm -lversion -lodbc32 -lodbccp32 libc=-lmsvcrt, so=dll, useshrplib=true, libperl=libperl510.a gnulibc_version=\u0026#39;\u0026#39; Dynamic Linking: dlsrc=dl_win32.xs, dlext=dll, d_dlsymun=undef, ccdlflags=\u0026#39; \u0026#39; cccdlflags=\u0026#39; \u0026#39;, lddlflags=\u0026#39;-mdll -s -L\u0026#34;C:\\strawberry\\perl\\lib\\CORE\u0026#34; -L\u0026#34;C:\\st rawberry\\c\\lib\u0026#34;\u0026#39; Characteristics of this binary (from libperl): Compile-time options: MULTIPLICITY PERL_DONT_CREATE_GVSV PERL_IMPLICIT_CONTEXT PERL_IMPLICIT_SYS PERL_MALLOC_WRAP PL_OP_SLAB_ALLOC USE_ITHREADS USE_LARGE_FILES USE_PERLIO Built under MSWin32 Compiled at Oct 19 2008 15:47:04 @INC: C:/strawberry/perl/lib C:/strawberry/perl/site/lib . 1 2 3 4 Rate sub_each sub_foreach sub_for sub_each 28.4/s -- -9% -10% sub_foreach 31.2/s 10% -- -2% sub_for 31.6/s 11% 2% -- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/perl use strict; use warnings; use Benchmark qw(:all); use Digest::MD5 (); # use Data::Dumper; my %hash; for my $i (1 .. 10000) { my $digest = Digest::MD5::md5($i); $hash{ $digest } = $i; } cmpthese( 100, { sub_for =\u0026gt; sub { my @array; for my $key (keys %hash) { push @array, { -key =\u0026gt; $key, -val =\u0026gt; $hash{$key} }; } # print Dumper(\\@array); }, sub_foreach =\u0026gt; sub { my @array; foreach my $key (keys %hash) { push @array, { -key =\u0026gt; $key, -val =\u0026gt; $hash{$key} }; } # print Dumper(\\@array); }, sub_each =\u0026gt; sub { my @array; while ( my ($key, $value) = each %hash) { push @array, { -key =\u0026gt; $key, -val =\u0026gt; $value }; } # print Dumper(\\@array); }, }); 1 2 3 4 Rate sub_each sub_foreach sub_for sub_each 2.68/s -- -11% -14% sub_foreach 3.00/s 12% -- -3% sub_for 3.11/s 16% 3% -- 1 2 3 4 Rate sub_each sub_for sub_foreach sub_each 21692/s -- -19% -20% sub_for 26896/s 24% -- -1% sub_foreach 27233/s 26% 1% -- ","date":"2009-02-02T19:56:25+09:00","permalink":"https://www.nqou.net/2009/02/02/195625/","title":"hashの全ての要素に何かするベンチマーク　その２"},{"content":"あまり意識したことが無かった。\n結果\n1 2 3 4 Rate sub_each sub_for sub_foreach sub_each 17928/s -- -27% -27% sub_for 24710/s 38% -- -0% sub_foreach 24710/s 38% 0% -- ベンチマークコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/perl use strict; use warnings; use Benchmark qw(:all); # use Data::Dumper; my %hash; for my $key ( \u0026#34;a\u0026#34; .. \u0026#34;z\u0026#34; ) { $hash{$key} = int rand 100; } cmpthese( 100000, { sub_for =\u0026gt; sub { my @array; for my $key (keys %hash) { push @array, { -key =\u0026gt; $key, -val =\u0026gt; $hash{$key} }; } # print Dumper(\\@array); }, sub_foreach =\u0026gt; sub { my @array; foreach my $key (keys %hash) { push @array, { -key =\u0026gt; $key, -val =\u0026gt; $hash{$key} }; } # print Dumper(\\@array); }, sub_each =\u0026gt; sub { my @array; while ( my ($key, $value) = each %hash) { push @array, { -key =\u0026gt; $key, -val =\u0026gt; $value }; } # print Dumper(\\@array); }, }); ","date":"2009-02-02T12:45:39+09:00","permalink":"https://www.nqou.net/2009/02/02/124539/","title":"hashの全ての要素に何かするベンチマーク"},{"content":" 1 2 3 4 5 6 7 8 // for menu $(\u0026#34;#menu ul.list-item-list\u0026#34;).css({ display:\u0026#34;none\u0026#34; }); var effect_speed = \u0026#39;fast\u0026#39;; $(\u0026#34;#menu ul.list li.list-item\u0026#34;).hover( function () { $(this).children(\u0026#34;ul.list-item-list\u0026#34;).slideDown(effect_speed); }, function () { $(this).children(\u0026#34;ul.list-item-list\u0026#34;).slideUp(effect_speed); }); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* for menu */ #menu, #menu ul, #menu ul li { margin: 0; padding: 0; } #menu { height: 40px; position: relative; } #menu ul { list-style:none; } #menu ul.list { float:left; position: absolute; top: 0; left: 0; } #menu ul li.list-item { color: #192a33;/* HSV 201 50 20 */ background-color: #e6d7c3;/* HSV 34 15 90 */ float:left; position: relative; text-align: center; width: 260px; height: 40px; line-height: 40px; } #menu ul li.list-item p { font-weight: bold; margin: 0; padding: 0; } #menu ul li.list-item:hover { color: #e6d7c3;/* HSV 34 15 90 */ background-color: #665f57;/* HSV 34 15 40 */ } #menu ul.list-item-list li.list-item { color: #192a33;/* HSV 201 50 20 */ background-color: #e6d7c3;/* HSV 34 15 90 */ } ","date":"2009-02-02T01:20:00+09:00","permalink":"https://www.nqou.net/2009/02/02/012000/","title":"実験スクリプトの移植"},{"content":"NANOChatをMENTA化する時に「menta.nqou.net」というヴァーチャルホストを作ったが、NanoAとかYacafiにも興味が出てきたので、何でも突っ込めるように「devel.nqou.net」というヴァーチャルホストに変更した。\nそのうち、mentaの方は消します。\nとりあえず、ソースを簡単に公開できるようにソースビューアを作った。名前はsourcereaderだけど。\n一応ソースのハイライトもするようにした。\n作りかけて思ったけど、フレームワークを使って作るのがいかに簡単かというのがわかった。\n大したスクリプトでもないのに、結構時間がかかった。\nついでに、jqueryFileTreeからソースを見ることができるようにした。\n単純にリンクしても良かったが、折角なので何かを使うことにした。\nその何かはfaceboxという名前のjQueryのプラグイン。\nとりあえず動くようにはなったけど、そのうち変えるかも。\n今さっき気づいたけど、prettyPhotoのシリーズにprettyPopinというのがあった。\n使えるかどうかはわからないけど、そのうち試してみよう。\njQuery popin solution - prettyPopin - by Stephane Caron ","date":"2009-01-29T03:09:33+09:00","permalink":"https://www.nqou.net/2009/01/29/030933/","title":"開発（という名の実験）スクリプトを公開するバーチャルホストを作った"},{"content":" 1 \u0026lt;a href=\u0026#34;javascript:void(0);\u0026#34; onclick=\u0026#34;$.jGrowl(\u0026#39;これがメッセージです\u0026#39;);\u0026#34;\u0026gt;メッセージを出してみる\u0026lt;/a\u0026gt; ","date":"2009-01-21T02:36:39+09:00","permalink":"https://www.nqou.net/2009/01/21/023639/","title":"さりげなくメッセージを出すjQueryのライブラリ「jGrowl」"},{"content":" ","date":"2009-01-20T00:06:27+09:00","permalink":"https://www.nqou.net/2009/01/20/000627/","title":"jQueryを使ってブラウザ上でスライドショー"},{"content":"なんだこれは！！\n","date":"2009-01-19T23:42:59+09:00","permalink":"https://www.nqou.net/2009/01/19/234259/","title":"JavaScript版スーパーマリオブラザーズがすごすぎ :教えて君.net"},{"content":"ふとplaggerを使いたくなってインストールした。 StrawberryPerlはCPANは簡単に使えるが、plaggerのように依存モジュールの多いプログラムをインストールするのは手間がかかる、というのが今の感想。 ActivePerlの場合は、有志が必要なモジュールをppmにしてくれているのでインストールしやすくなっている。 モジュールのインストールで一番困ったのは、メールを送るのに必要なNet::SMTP::TLSの依存モジュールのNet::SSLeay。 これが入らないとGmailからメールを送ることができない。（まあ、他にもやり方はあるかもしれないけど） 検索して色々と調べてみたが、一番有用な情報はモジュールのドキュメントに書いてあった。 コンパイル済みのバイナリを使うのではなく、自分でコンパイルしたファイルを使う、というのがうまくいく秘訣のようだ。 README.Win32 本文中で出てくるバージョンは、 Strawberry Perl 5.8.8-alpha-2 OpenSSL 0.9.8e source openssl-0.9.8e.tar.gz だが、それぞれ、 strawberry-perl-5.10.0.3.exe（Strawberry Perl） openssl-0.9.8j.tar.gz（OpenSSL: The Open Source toolkit for SSL/TLS） で、問題なくインストールできた。\n","date":"2009-01-18T15:52:18+09:00","permalink":"https://www.nqou.net/2009/01/18/155218/","title":"Net-SSLeayのWindowsXPへのインストール"},{"content":" ","date":"2009-01-18T03:40:41+09:00","permalink":"https://www.nqou.net/2009/01/18/034041/","title":"最近のお気に入りエディタ「Programmer's Notepad」"},{"content":" ","date":"2009-01-15T23:49:43+09:00","permalink":"https://www.nqou.net/2009/01/15/234943/","title":"NANOChatのMENTA化、その4（一応完成）"},{"content":" ","date":"2009-01-12T00:01:55+09:00","permalink":"https://www.nqou.net/2009/01/12/000155/","title":"Desktop Tower Defenseが面白い"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #ｕｔｆ８ use strict; use warnings; use utf8; use Data::Dumper; sub p ($) { print Data::Dumper::Dumper(shift); } package Point; use base qw/Class::Accessor::Fast/; __PACKAGE__-\u0026gt;mk_accessors(qw/x y/); package main; my $p = Point-\u0026gt;new; p $p; $p-\u0026gt;x(128); $p-\u0026gt;y(256); eval { $p-\u0026gt;z(32); }; warn $@ if $@; p $p-\u0026gt;x; p $p-\u0026gt;y; p $p; 1 2 3 4 5 6 7 8 Can\u0026#39;t locate object method \u0026#34;z\u0026#34; via package \u0026#34;Point\u0026#34; at D:\\devel\\test\\point.pl line 18. $VAR1 = bless( {}, \u0026#39;Point\u0026#39; ); $VAR1 = 128; $VAR1 = 256; $VAR1 = bless( { \u0026#39;y\u0026#39; =\u0026gt; 256, \u0026#39;x\u0026#39; =\u0026gt; 128 }, \u0026#39;Point\u0026#39; ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 use utf8; use Data::Dumper; sub p ($) { use warnings; use strict \u0026#39;refs\u0026#39;; print Data::Dumper::Dumper(shift @_); } package Point; sub BEGIN { use warnings; use strict \u0026#39;refs\u0026#39;; require base; do { \u0026#39;base\u0026#39;-\u0026gt;import(\u0026#39;Class::Accessor::Fast\u0026#39;) }; } use warnings; use strict \u0026#39;refs\u0026#39;; \u0026#39;Point\u0026#39;-\u0026gt;mk_accessors(\u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;); package main; my $p = \u0026#39;Point\u0026#39;-\u0026gt;new; p $p; $p-\u0026gt;x(128); $p-\u0026gt;y(256); eval { do { $p-\u0026gt;z(32) } }; warn $@ if $@; p($p-\u0026gt;x); p($p-\u0026gt;y); p $p; ","date":"2009-01-07T01:45:34+09:00","permalink":"https://www.nqou.net/2009/01/07/014534/","title":"Class::Accessor::Fastを触ってみる"},{"content":" ","date":"2009-01-06T21:38:41+09:00","permalink":"https://www.nqou.net/2009/01/06/213841/","title":"最近聴いた曲の歌詞が見れるサイト「LastLyrics 」"},{"content":" 1 2 3 package main; my $fetcher = FlickrFetcher-\u0026gt;new_with_options(); $fetcher-\u0026gt;run(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 package FlickrFetcher; use Moose; use Moose::Util::TypeConstraints; use Params::Coerce (); use Digest::MD5 qw(md5_hex); use Encode; use LWP::UserAgent; use Path::Class; use POSIX qw(ceil); use WebService::Simple; use WebService::Simple::Parser::XML::Simple; use XML::Simple; use Perl6::Say; our $VERSION = \u0026#39;0.01\u0026#39;; with \u0026#39;MooseX::Getopt\u0026#39;; subtype \u0026#39;Dir\u0026#39; =\u0026gt; as \u0026#39;Object\u0026#39; =\u0026gt; where { $_-\u0026gt;isa(\u0026#39;Path::Class::Dir\u0026#39;) }; coerce \u0026#39;Dir\u0026#39; =\u0026gt; from \u0026#39;Str\u0026#39; =\u0026gt; via { Path::Class::Dir-\u0026gt;new($_) }; MooseX::Getopt::OptionTypeMap-\u0026gt;add_option_type_to_map( \u0026#39;Dir\u0026#39; =\u0026gt; \u0026#39;=s\u0026#39; ); has \u0026#39;keyword\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Str\u0026#39;, required =\u0026gt; 1 ); has \u0026#39;dir\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Dir\u0026#39;, required =\u0026gt; 1, coerce =\u0026gt; 1 ); has \u0026#39;api_key\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Str\u0026#39; ); has \u0026#39;license\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Int\u0026#39; ); has \u0026#39;_perpage\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;ro\u0026#39;, isa =\u0026gt; \u0026#39;Int\u0026#39;, default =\u0026gt; 500 ); has \u0026#39;_flickr\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;WebService::Simple\u0026#39; ); has \u0026#39;_ua\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;ro\u0026#39;, isa =\u0026gt; \u0026#39;LWP::UserAgent\u0026#39;, default =\u0026gt; sub { LWP::UserAgent-\u0026gt;new( keep_alive =\u0026gt; 1 ) } ); sub BUILD { my ( $self, $args ) = @_; unless ( $self-\u0026gt;api_key ) { if ( my $api_key = $ENV{FLICKR_API_KEY} ) { $self-\u0026gt;api_key($api_key); } else { die \u0026#34;api_key is required\\n\u0026#34;; } } my $xs = XML::Simple-\u0026gt;new( KeepRoot =\u0026gt; 1, keyattr =\u0026gt; [] ); my $parser = WebService::Simple::Parser::XML::Simple-\u0026gt;new( xs =\u0026gt; $xs ); my $flickr = WebService::Simple-\u0026gt;new( base_url =\u0026gt; \u0026#34;http://api.flickr.com/services/rest/\u0026#34;, param =\u0026gt; { api_key =\u0026gt; $self-\u0026gt;api_key }, response_parser =\u0026gt; $parser, ); $self-\u0026gt;_flickr($flickr); } __PACKAGE__-\u0026gt;meta-\u0026gt;make_immutable; no Moose; sub run { my $self = shift; mkdir $self-\u0026gt;dir-\u0026gt;relative if !-d $self-\u0026gt;dir-\u0026gt;is_absolute; say \u0026#34;search keyword : \u0026#34; . $self-\u0026gt;keyword; my $photo_total = $self-\u0026gt;photo_total( $self-\u0026gt;keyword ); say \u0026#34;total count : \u0026#34; . $photo_total; my $pages = ceil( $photo_total / $self-\u0026gt;_perpage ); for my $current_page ( 1 .. $pages ) { say \u0026#34;search page : $current_page\u0026#34;; $self-\u0026gt;search( $self-\u0026gt;keyword, $current_page, $self-\u0026gt;_perpage ); } } sub search { my ( $self, $keyword, $page , $perpage) = @_; my $response = $self-\u0026gt;_flickr-\u0026gt;get( { method =\u0026gt; \u0026#34;flickr.photos.search\u0026#34;, text =\u0026gt; $keyword, per_page =\u0026gt; $perpage, sort =\u0026gt; \u0026#39;date-posted-desc\u0026#39;, extras =\u0026gt; \u0026#39;date_upload\u0026#39;, page =\u0026gt; $page, license =\u0026gt; $self-\u0026gt;license || \u0026#34;\u0026#34;, } ); my $xml = $response-\u0026gt;parse_response; $self-\u0026gt;fetch($xml-\u0026gt;{rsp}-\u0026gt;{photos}-\u0026gt;{photo}); } sub fetch { my ( $self, $photo_ref ) = @_; $photo_ref = ref $photo_ref eq \u0026#39;ARRAY\u0026#39; ? $photo_ref : [$photo_ref];# 要素が一つのとき対策 for my $photo ( @$photo_ref ){ my $url = $self-\u0026gt;photo_url( $photo-\u0026gt;{id} ); my $file = $self-\u0026gt;dir-\u0026gt;file( md5_hex($url) . \u0026#34;.jpg\u0026#34; ); my $res; eval { $res = $self-\u0026gt;_ua-\u0026gt;mirror( $url, $file ); };# 「Transfer truncated」対策。ここから if ($@) { say $@; } else { say \u0026#34;try to fetch : \u0026#34; . $res-\u0026gt;status_line . \u0026#34; : $url\u0026#34;; }# ここまで } } sub photo_url { my ( $self, $photo_id ) = @_; my $response = $self-\u0026gt;_flickr-\u0026gt;get( { method =\u0026gt; \u0026#34;flickr.photos.getSizes\u0026#34;, photo_id =\u0026gt; $photo_id } ); my $xml = $response-\u0026gt;parse_response; my $largest_ref = pop @{ $xml-\u0026gt;{rsp}-\u0026gt;{sizes}-\u0026gt;{size} }; return $largest_ref-\u0026gt;{source}; } sub photo_total { my ( $self, $keyword ) = @_; my $response = $self-\u0026gt;_flickr-\u0026gt;get( { method =\u0026gt; \u0026#34;flickr.photos.search\u0026#34;, text =\u0026gt; $keyword, per_page =\u0026gt; 1, license =\u0026gt; $self-\u0026gt;license || \u0026#34;\u0026#34;, } ); my $xml = $response-\u0026gt;parse_response; return $xml-\u0026gt;{rsp}-\u0026gt;{photos}-\u0026gt;{total}; } 1; __END__ =head1 NAME flickr_fetcher.pl - Fetch Flickr photos by keyword =head1 SYNOPSIS ./flickr_fetcher.pl --keyword hoge --dir hoge --api_key yourflickrapikey =head1 AUTHOR Yusuke Wada E\u0026lt;lt\u0026gt;yusuke (at) kamawada.comE\u0026lt;gt\u0026gt; =head1 LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. =cut 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/perl # ｕｔｆ８ use strict; use warnings; use FlickrFetcher; fetch({ keyword =\u0026gt; \u0026#39;石原さとみ\u0026#39;, dir =\u0026gt; \u0026#39;satomi_ishihara\u0026#39;, }); sub fetch { my $rh_arg = shift; my $fetcher = FlickrFetcher-\u0026gt;new_with_options( %{$rh_arg} ); $fetcher-\u0026gt;run(); } ","date":"2009-01-06T00:47:16+09:00","permalink":"https://www.nqou.net/2009/01/06/004716/","title":"flickr_fetcher.plをモジュールにしてみました。"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 sub BUILD { my ( $self, $args ) = @_; unless ( $self-\u0026gt;api_key ) { if ( my $api_key = $ENV{FLICKR_API_KEY} ) { $self-\u0026gt;api_key($api_key); } else { die \u0026#34;api_key is required\\n\u0026#34;; } } unless ( $self-\u0026gt;keyword ) { $self-\u0026gt;keyword(\u0026#39;石原さとみ\u0026#39;); } unless ( $self-\u0026gt;dir ) { $self-\u0026gt;dir(\u0026#39;satomi_ishihara\u0026#39;); } my $xs = XML::Simple-\u0026gt;new( KeepRoot =\u0026gt; 1, keyattr =\u0026gt; [] ); my $parser = WebService::Simple::Parser::XML::Simple-\u0026gt;new( xs =\u0026gt; $xs ); my $flickr = WebService::Simple-\u0026gt;new( base_url =\u0026gt; \u0026#34;http://api.flickr.com/services/rest/\u0026#34;, param =\u0026gt; { api_key =\u0026gt; $self-\u0026gt;api_key }, response_parser =\u0026gt; $parser, ); $self-\u0026gt;_flickr($flickr); } 1 2 3 4 has \u0026#39;keyword\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Str\u0026#39; ); has \u0026#39;dir\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Dir\u0026#39;, coerce =\u0026gt; 1 ); has \u0026#39;api_key\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Str\u0026#39; ); has \u0026#39;license\u0026#39; =\u0026gt; ( is =\u0026gt; \u0026#39;rw\u0026#39;, isa =\u0026gt; \u0026#39;Int\u0026#39; ); ","date":"2009-01-05T22:38:56+09:00","permalink":"https://www.nqou.net/2009/01/05/223856/","title":"「flickr_fetcher.pl」を勝手に改造して活用してみた"},{"content":"MENTAで行き詰っているので、気分転換に。\nPipes: Rewire the web どんなことをするのか、というのは、解説するよりも実際に見てみるほうが良いかもしれません。\nBrowse Pipes: Browse Pipes 私は各種ソーシャルブックマークからperlタグがついている記事を集めたりしています。\n","date":"2009-01-03T23:28:20+09:00","permalink":"https://www.nqou.net/2009/01/03/232820/","title":"Yahoo.comのPipesが便利"},{"content":"私は寝てましたが。\nありえないと思いながら、パソコンではどうなってるのかやってみたくなったので、実際にやってみた。\n1 2 3 4 5 6 7 use strict; use warnings; use Perl6::Say; my $time = 1230767999; for ( 0 .. 2 ) { say scalar localtime $time++; } 結果はやってみてください。 timeの値ですが、以下のように計算できます。\n1 2 use Time::Local; print scalar timelocal(59,59,8,1,0,109); それにしても、Perl6::Sayは便利ですね。 \u0026ldquo;\\n\u0026quot;が不要というのはとても使い勝手が良いです。\n","date":"2009-01-02T00:55:40+09:00","permalink":"https://www.nqou.net/2009/01/02/005540/","title":"うるう秒の瞬間"},{"content":" 1 C:\\\u0026gt; cpan -i Module::Setup 1 C:\\\u0026gt; cpan -f Module::Collect 1 C:\\\u0026gt; cpan -f Module::Setup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 C:\\home\\nqou\u0026gt; module-setup --init Creating *****\\.module-setup\\flavors\\default\\template\\Makefile.PL Creating *****\\.module-setup\\flavors\\default\\template\\t\\00_compile.t Creating *****\\.module-setup\\flavors\\default\\template\\xt\\01_podspell.t Creating *****\\.module-setup\\flavors\\default\\template\\xt\\02_perlcritic.t Creating *****\\.module-setup\\flavors\\default\\template\\xt\\03_pod.t Creating *****\\.module-setup\\flavors\\default\\template\\xt\\perlcriticrc Creating *****\\.module-setup\\flavors\\default\\template\\Changes Creating *****\\.module-setup\\flavors\\default\\template\\lib\\____var-module_path-var____.pm Creating *****\\.module-setup\\flavors\\default\\template\\MANIFEST.SKIP Creating *****\\.module-setup\\flavors\\default\\template\\README Creating *****\\.module-setup\\flavors\\default\\template\\.shipit Creating directory *****\\.module-setup\\flavors\\default\\additional Dump config *****\\.module-setup\\flavors\\default\\additional\\config.yaml Creating directory *****\\.module-setup\\flavors\\default\\plugins Creating directory *****\\.module-setup\\flavors\\default\\template Do you use SVN? [yN] [n] y You chose version control system: SVN Do you use SVK? [yN] [n] Do you use Git? [yN] [n] Your name: [Default Name] Your email: [default {at} example.com] Dump config *****\\.module-setup\\flavors\\default\\config.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 C:\\home\\nqou\u0026gt; module-setup My::Module [1]: default [2]: dmake [3]: xs Select flavor: [1] 1 You chose flavor: default Subversion friendly? [Yn] [y] Creating directory My-Module\\trunk Creating directory My-Module\\tags Creating directory My-Module\\branches Creating directory My-Module\\trunk Creating My-Module\\trunk\\.shipit Creating My-Module\\trunk\\Changes Creating My-Module\\trunk\\Makefile.PL Creating My-Module\\trunk\\MANIFEST.SKIP Creating My-Module\\trunk\\README Creating My-Module\\trunk\\lib\\My\\Module.pm Creating My-Module\\trunk\\t\\00_compile.t Creating My-Module\\trunk\\xt\\01_podspell.t Creating My-Module\\trunk\\xt\\02_perlcritic.t Creating My-Module\\trunk\\xt\\03_pod.t Creating My-Module\\trunk\\xt\\perlcriticrc Check Makefile.PL? [Yn] [y] n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package Module::Setup::Plugin::Test::Dmake; use strict; use warnings; use base \u0026#39;Module::Setup::Plugin\u0026#39;; sub register { my($self, ) = @_; $self-\u0026gt;add_trigger( check_skeleton_directory =\u0026gt; \\\u0026amp;check_skeleton_directory ); } sub check_skeleton_directory { my $self = shift; return unless $self-\u0026gt;dialog(\u0026#34;Check Makefile.PL? [Yn] \u0026#34;, \u0026#39;y\u0026#39;) =~ /[Yy]/; !$self-\u0026gt;system(\u0026#39;perl\u0026#39;, \u0026#39;Makefile.PL\u0026#39;) or die $?; !$self-\u0026gt;system(\u0026#39;dmake\u0026#39;, \u0026#39;test\u0026#39;) or die $?; !$self-\u0026gt;system(\u0026#39;dmake\u0026#39;, \u0026#39;manifest\u0026#39;) or die $?; !$self-\u0026gt;system(\u0026#39;dmake\u0026#39;, \u0026#39;distclean\u0026#39;) or die $?; } 1; 1 2 3 4 5 6 7 8 9 --- author: Default Name email: \u0026#39;default {at} example.com\u0026#39; plugins: - Config::Basic - Template - Test::Dmake - Additional - VC::SVN ","date":"2009-01-01T22:12:52+09:00","permalink":"https://www.nqou.net/2009/01/01/221252/","title":"Module::Setupを試してみる"},{"content":"PHPやRubyのソースを見ながら、試行錯誤で作ってみた。 Perlということでplにしたけど、実際にはMENTAディレクトリ内での実行のため、拡張子はcgiに変更した。 久しぶりにモジュールを使わずに一から作ったらなかなか大変だった。 古いソースを引っ張り出して基本的な変換（アンエスケープ）をしたり、ファイルやディレクトリの一覧を得るのに、readdirを使ったり。 調べないと全然覚えてない。 しかし、セキュリティ的に微妙な気がする。 とりあえず、「.」から始まるファイルやディレクトリは見せないようにはした。 さりげなく使っているけど、最近覚えたData::Dumperの技。\n1 use Data::Dumper;sub p { print Data::Dumper::Dumper(shift) } こうすることで、デバッグするときは\n1 p(\\@args); というふうに簡単に出力することができる。 便利だね。\njqueryFileTree.pl\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #!/usr/bin/perl # jQuery File Tree Perl Connector # Version 0.01 # https://www.nqou.net # 31 Dec 2008 # Output a list of files for jQuery File Tree use strict; use warnings; use utf8; # use Data::Dumper;sub p { print Data::Dumper::Dumper(shift) } print \u0026#34;Content-type: text/html;\\n\\n\u0026#34;; my @args = \u0026lt;\u0026gt;; # p(\\@args); my %params = (map { split /=/ } @args); # p(\\%params); foreach my $value (values %params) { uri_unescape(\\$value); } # p(\\%params); my $target = $params{dir} || \u0026#39;./\u0026#39;;# 省略時は現在のディレクトリ（元々の仕様は最上位ディレクトリ） die \u0026#34;Error!\u0026#34; if $target =~ /\\.\\./;# さかのぼり禁止 die \u0026#34;Error!\u0026#34; unless -d $target;# ディレクトリ以外禁止 our @files; search_dir($target); # p(\\@files); print qq{\u0026lt;ul class=\u0026#34;jqueryFileTree\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt;}; foreach my $file (@files) { if (-d $file) { my ($dir) = $file =~ m!/([^/]*?)$!o; print qq{\u0026lt;li class=\u0026#34;directory collapsed\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; rel=\u0026#34;$file/\u0026#34;\u0026gt;$dir\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;}; } elsif (-f _) { my ($ext) = $file =~ /([^\\.]+)$/o; my ($filename) = $file =~ m!/([^/]*?)$!o; print qq{\u0026lt;li class=\u0026#34;file ext_${ext}\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; rel=\u0026#34;$file\u0026#34;\u0026gt;$filename\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;}; } else { print \u0026#34;Error!\u0026#34;; } } print qq{\u0026lt;/ul\u0026gt;}; # ディレクトリを走査 sub search_dir { my $dir = shift; my @f; opendir my $dh, $dir or die \u0026#34;can not open `$dir`: $!\u0026#34;; foreach my $file (sort {$a cmp $b} readdir $dh) { next if $file =~ /^\\./o; my $path = qq{$dir$file}; if (-f $path) { push @f, $path } elsif (-d _) { push @files, $path; } } closedir $dh; push @files, @f;# ディレクトリ、ファイルの順にする } # アンエスケープ sub uri_unescape { my $str = shift; $$str =~ s/%([0-9a-fA-F]{2})/pack(\u0026#34;H2\u0026#34;, $1)/eg; } ","date":"2008-12-31T01:08:56+09:00","permalink":"https://www.nqou.net/2008/12/31/010856/","title":"jqueryFileTree.plを作ってみた"},{"content":" 1 PHP Notice: Undefined variable: root in *****/jqueryFileTree.php on line 21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ? my $title = shift; \u0026lt;!doctype html\u0026gt; \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34; xml:lang=\u0026#34;ja\u0026#34; lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;\u0026lt;? if ($title) { ?\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; ?\u0026gt;\u0026lt;? } ?\u0026gt;menta.nqou.net\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;./jquery.easing.1.3.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;./jqueryFileTree.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;\u0026lt;?= static_file_path(\u0026#34;default.css\u0026#34;) ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;./jqueryFileTree.css\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; $(document).ready(function () { $(\u0026#39;#fileTree\u0026#39;).fileTree({ root: \u0026#39;./\u0026#39;, }, function(file) { alert(file); }); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;? if ($title) { ?\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; ?\u0026gt;\u0026lt;? } ?\u0026gt;menta.nqou.net\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; if $title ?\u0026gt;menta.nqou.net\u0026lt;/h1\u0026gt; ","date":"2008-12-30T20:29:42+09:00","permalink":"https://www.nqou.net/2008/12/30/202942/","title":"後置型のifとMENTAとjQueryFileTree、そしてPHP"},{"content":" 1 2 3 4 5 6 7 8 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; $(document).ready(function(){ $(\u0026#39;pre code\u0026#39;).addClass(\u0026#34;prettyprint\u0026#34;); prettyPrint(); }); \u0026lt;/script\u0026gt; ","date":"2008-12-30T01:42:23+09:00","permalink":"https://www.nqou.net/2008/12/30/014223/","title":"jQueryを使ってgoogle-code-prettifyを自動的に適用してみた"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/perl use strict; use LWP::Simple; use File::Basename; use Digest::MD5 qw(md5_hex); use Perl6::Say; my $uri = shift or die \u0026#34;uri please!. \u0026#34;; my $content = get($uri); my @l = $content =~ m{\u0026lt;a.*?href=\u0026#34;?(http://[^ ]+?\\.jpe?g)\u0026#34;?}gi;# 苦肉の策 # my @l = $content =~ m{\u0026lt;a.*?href=\u0026#34;(http://[^\u0026#34;]+\\.jpe?g)\u0026#34;}gi;# オリジナル my $dir = md5_hex($uri); mkdir $dir or die unless -d $dir; say \u0026#34;make dir \u0026gt; \u0026#34; . $dir; foreach (@l) { my $filename = basename($_); mirror($_, sprintf(\u0026#34;%s/%s\u0026#34;, $dir, $filename)); say \u0026#34;save image \u0026gt; \u0026#34; . $filename; sleep 1; }; open my $fh, \u0026#34;\u0026gt;\u0026#34;, \u0026#34;$dir/uri.txt\u0026#34; or die; print $fh $uri; close $fh; ","date":"2008-12-29T22:48:36+09:00","permalink":"https://www.nqou.net/2008/12/29/224836/","title":"google-code-prettifyを試してみた"},{"content":"遅々として進みませんが。 JSONを使って読み書きをすることにしたのですが。 そもそも、アプリケーションの設定をどう呼ぶか、とか、テンプレートからJSON等のモジュールをどうやって使うか、とかいう根本的なところで悪戦苦闘してました。 menta.cgiには、「あなたのアプリの設定」とされている部分があるのですが、それをどのようにして呼ぶのかをソースを見ながら試してみました。 どのように呼ぶのを想定しているのかは不明ですが、とりあえずの解決策としては、\n1 ? my $self = MENTA-\u0026gt;config-\u0026gt;{application} として、$selfに入れてから使うようにしました。 設定を以下のようにした場合、\n1 2 3 4 5 # あなたのアプリの設定 application =\u0026gt; { limit =\u0026gt; 30, member_filename =\u0026gt; \u0026#39;member.cgi\u0026#39;, }, それぞれ以下のようにして使えます。\n1 2 $self-\u0026gt;{limit} # 30 $self-\u0026gt;{member_filename} # member.cgi で、JSON等のモジュールをどうやって使うかですが。 とりあえず安直に考えて、\n1 ? use JSON としてから、関数形式で使うことにしました。 しかし、ここで一つ罠がありました。 JSONで使おうとした関数は「to_json」と「from_json」なのですが、単純に書いてしまうと、それぞれ、「to.pl」と「from.pl」というプラグインを探しにいってしまうのです。 まあ、関数をそのまま呼び出せないのであれば、パッケージ名をつけてやればよい、ということで、それぞれ「JSON::to_json」と「JSON::from_json」というように呼び出して解決できました。 解決したので、それはそれでよかったのですが、なんとなくプラグイン化してみました。 関数名を「json_to」と「json_from」という名前にして、「json.pl」を呼び出すようにしました。 プラグインというには微妙ですが、とりあえず機能的には問題ないということで。\napp/controller/nanochat/enter.mt\n1 2 3 4 5 6 ?= render(\u0026#39;nanochat/header.mt\u0026#39;, \u0026#39;名前を教えてほしいの。\u0026#39;) ?= render(\u0026#39;nanochat/member.mt\u0026#39;) \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;工事中なの。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ?= render(\u0026#39;nanochat/footer.mt\u0026#39;) app/controller/nanochat/member.mt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ? my $self = MENTA-\u0026gt;config-\u0026gt;{application} ? my $datafile = MENTA-\u0026gt;data_dir() . $self-\u0026gt;{member_filename} ? my $members = json_from(file_read($datafile)) ? my @new_members \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;今は、 ? foreach my $member (sort {$b-\u0026gt;{now} \u0026lt;=\u0026gt; $a-\u0026gt;{now}} @{$members}) { # 更新時間の新しい順でソート ? if (time - $member-\u0026gt;{now} \u0026lt; $self-\u0026gt;{limit} * 60) { # タイムアウトしていない場合 ? push @new_members, $member \u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;?= $member-\u0026gt;{name} ?\u0026gt;\u0026lt;/strong\u0026gt; さんと ? } ? } \u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;なの\u0026lt;/strong\u0026gt;\u0026lt;?= @new_members ? \u0026#34; \u0026#34; : \u0026#34; だけ\u0026#34; ?\u0026gt;がいるの。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ? file_write($datafile, json_to(\\@new_members)) plugins/json.pl\n1 2 3 4 5 6 7 package MENTA::Plugin::JSON; use MENTA::Plugin; # JSONを使う用 use JSON; sub json_to { to_json(shift) } sub json_from { from_json(shift) } 1; ","date":"2008-12-29T07:27:02+09:00","permalink":"https://www.nqou.net/2008/12/29/072702/","title":"NANOChatのMENTA化、その3"},{"content":" ","date":"2008-12-17T01:07:53+09:00","permalink":"https://www.nqou.net/2008/12/17/010753/","title":"プラグイン「MTHatenaStar」を入れてみた"},{"content":"ほんの少し進んだ。 「入口」では、今現在滞在中のメンバーを出力するわけですが、そのデータはファイルに保存しておく必要があります。 ファイルの読み書きは標準のプラグイン「file.pl」にあるので、それを使ってデータをやり取りすれば良さそうです。 さっくりとソースを見ると、ファイルの中身は一度に読み書きしているようです。 MENTAではextlibにJSONが入っているので、そいつを使う事にします。 JSONを使うとオブジェクトを文字列に変換できるので、データを保存するのが非常に簡単になります。 昔は色々と考えながらデータを書いていましたが、そんな作業からも開放されました。 今までは割と標準モジュールしか使えないという縛りがありましたが、今後はそれもなくなりますね。 ま、とりあえず簡単にサンプルを書いてみました。\nサンプルコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use strict; use warnings; use JSON; print $JSON::VERSION; print \u0026#34;\\n\u0026#34;; my $obj = { a =\u0026gt; 1, b =\u0026gt; [2, 3], c =\u0026gt; {c1 =\u0026gt; 4, c2 =\u0026gt; 5}, d =\u0026gt; 6, }; my $json_text = to_json($obj); print $json_text; print \u0026#34;\\n\u0026#34;; my $r_obj = from_json($json_text); use Data::Dumper; print Dumper($r_obj); 実行結果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 4.02 {\u0026#34;b\u0026#34;:[2,3],\u0026#34;a\u0026#34;:1,\u0026#34;d\u0026#34;:6,\u0026#34;c\u0026#34;:{\u0026#34;c1\u0026#34;:4,\u0026#34;c2\u0026#34;:5}} $VAR1 = { \u0026#39;a\u0026#39; =\u0026gt; 1, \u0026#39;b\u0026#39; =\u0026gt; [ 2, 3 ], \u0026#39;c\u0026#39; =\u0026gt; { \u0026#39;c2\u0026#39; =\u0026gt; 5, \u0026#39;c1\u0026#39; =\u0026gt; 4 }, \u0026#39;d\u0026#39; =\u0026gt; 6 }; ","date":"2008-12-16T03:47:25+09:00","permalink":"https://www.nqou.net/2008/12/16/034725/","title":"NANOChatのMENTA化、その2"},{"content":"Perlといえば、何はなくともCPANです。 で、そのCPANには沢山のモジュールがあります。 で、そのモジュールはおおよそ決まった様式にのっとって記述されています。 そのあたりのフレームワークがPerlには用意されています。 まあ、受け売りですが。 参考： はじめてのPerlモジュール開発メモ/楽 Part1 正しいPerl/CGIの書き方：ITpro で、この記事にしたがって、正しい作成手順でモジュールを作ってみようということで試してみました。 が、結果的には微妙なことになってしまいました。 Module::StarterとModule::Starter::PBPのインストール、そして、Module::Starter::PBPのセットアップまでは無事終了しました。 いざ、モジュールの作成です。 サンプルどおりモジュール名だけを入力してみると「authorが必須ですよ」というエラーが出た。\n1 2 3 C:\\nqou\u0026gt;module-starter --module=My::First Must specify an author at C:/strawberry/perl/site/lib/Module/Starter/App.pm line 97 Module::Starter::PBPのセットアップをするとホームディレクトリに「config」というファイルができて、起動時にそれを読み込んでくれるはずなのだが。 まあ、仕方なく、authorとemailを指定して実行した。 ファイルやディレクトリができたようなので中身を確認すると、なんだか数が足りない。 Build.PLが無いですよ。 現在入っているPerlはActivePerlではないですが、念のため「Clone」をインストールしようとしましたが、すでに入っていました。 うーむ。 Module::Starterのバージョンが1.50でしたので、記事の当時（1.42とか1.47とか）からバージョンがあがっているのが原因なのかもしれません。 試してみたかったのに、残念。\n","date":"2008-12-16T00:58:15+09:00","permalink":"https://www.nqou.net/2008/12/16/005815/","title":"Module::StarterとかPBPとか"},{"content":" 1 ? my $title = shift 1 ?= render(\u0026#39;header.mt\u0026#39;, \u0026#39;インデックス\u0026#39;) 1 \u0026lt;title\u0026gt;\u0026lt;? if ($title) { ?\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; ?\u0026gt;\u0026lt;? } ?\u0026gt;menta.nqou.net\u0026lt;/title\u0026gt; 1 2 3 if ($title) { print \u0026#34;$title - \u0026#34; } 1 \u0026lt;h1\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; if $title ?\u0026gt;menta.nqou.net\u0026lt;/h1\u0026gt; 1 2 3 4 5 6 7 8 9 ? my $title = shift \u0026lt;!doctype html\u0026gt; \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34; xml:lang=\u0026#34;ja\u0026#34; lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;\u0026lt;? if ($title) { ?\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; ?\u0026gt;\u0026lt;? } ?\u0026gt;menta.nqou.net\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; if $title ?\u0026gt;menta.nqou.net\u0026lt;/h1\u0026gt; 1 2 3 \u0026lt;p\u0026gt;Powered by MENTA \u0026lt;?= $MENTA::VERSION ?\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 ?= render(\u0026#39;header.mt\u0026#39;, \u0026#39;インデックス\u0026#39;) \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a name=\u0026#34;menta.nanochat\u0026#34; href=\u0026#34;\u0026lt;?= uri_for(\u0026#39;nanochat/index\u0026#39;) ?\u0026gt;\u0026#34;\u0026gt;NANOChat\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ?= render(\u0026#39;footer.mt\u0026#39;) 1 2 3 4 5 6 7 8 9 10 11 ? my $title = shift \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;\u0026lt;?= static_file_path(\u0026#39;nanochat.css\u0026#39;) ?\u0026gt;\u0026#34; title=\u0026#34;Default\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;ROBOTS\u0026#34; content=\u0026#34;NOINDEX\u0026#34;\u0026gt; \u0026lt;title\u0026gt;\u0026lt;? if ($title) { ?\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; ?\u0026gt;\u0026lt;? } ?\u0026gt;NANOChat\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body onload=\u0026#34;obj = document.forms[0];if(obj)obj.elements[0].focus();\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;nano\u0026#34;\u0026gt;\u0026lt;? if ($title) { ?\u0026gt;\u0026lt;?= \u0026#34;$title - \u0026#34; ?\u0026gt;\u0026lt;? } ?\u0026gt;NANOChat\u0026lt;/h2\u0026gt;\u0026lt;hr\u0026gt; 1 2 3 4 5 6 ? my $cost = sprintf \u0026#34;%.2f\u0026#34;, times \u0026lt;hr\u0026gt; \u0026lt;p class=\u0026#34;nano\u0026#34;\u0026gt;このお仕事に \u0026lt;?= $cost ?\u0026gt; 秒くらいかかったの。\u0026lt;/p\u0026gt; \u0026lt;address\u0026gt;\u0026lt;a href=\u0026#34;\u0026lt;?= uri_for(\u0026#39;#nanochat\u0026#39;) ?\u0026gt;\u0026#34; title=\u0026#34;このスクリプトの最新版はこのリンク先にあるの。\u0026#34;\u0026gt;NANOChat Ver0.12\u0026lt;/a\u0026gt;\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 ?= render(\u0026#39;nanochat/header.mt\u0026#39;, \u0026#39;いらっしゃいなの。\u0026#39;) \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;ここの入退室管理を任されてる \u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;なの\u0026lt;/strong\u0026gt; なの。よろしくなの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;この部屋へ入るにはクッキーが必要なの。退室するときにちゃんと消してあげるから、名札だと思ってつけてほしいの。今つけた人は、ついてるかどうかわからないから１回読みなおしてほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;JavaScriptが使えると、マウスを使わなくてもチャットできるの。とってもおすすめなの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;あと、$limit分くらい何も発言しないと部屋から追い出されちゃうの。気をつけてほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;あ、ホームページ（http://から書くの）とかメールアドレス（mailto:から書くの）とかを書くと、リンクしてあげるの。よくわからないから発言を全部リンクしちゃうけど、そのくらいは許してほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;準備ができたら\u0026lt;a href=\u0026#34;\u0026lt;?= uri_for(\u0026#39;nanochat/enter\u0026#39;) ?\u0026gt;\u0026#34;\u0026gt;入口\u0026lt;/a\u0026gt;で名前を教えてほしいの。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ?= render(\u0026#39;nanochat/footer.mt\u0026#39;) ","date":"2008-12-14T03:25:17+09:00","permalink":"https://www.nqou.net/2008/12/14/032517/","title":"NANOChatのMENTA化、その1"},{"content":" ","date":"2008-12-13T03:47:32+09:00","permalink":"https://www.nqou.net/2008/12/13/034732/","title":"今日のMENTA、3回目"},{"content":"ゴールデンロア以来、久々に面白いゲームを見つけて、今現在はまってます。\nプレイヤーは最初のキャラクターでもありますが、実際にはキャラクターに指示を出すブルジョアみたいな感じです。 もっとも、最初はまったくお金を持っていない状態からのスタートですが。 この手のタイプのゲームだと、クラスチェンジできるレベルで、きっちりとクランスチェンジしたいので、ついつい頑張ってあーでもないこーでもない、と試行錯誤するのですが、その試行錯誤がとても楽しいです。\nで、プレイするのも楽しいのですが、ゲームを作っている私にとっては、このゲームのアイディアに感心しました。\n一つはもちろん、全体的なシステム。 プレイヤーはキャラクターの指示係という位置づけです。サッカーの監督ゲームの様な感じでしょうか。 キャラクターには「退却」以外の命令ができませんので、ダンジョンを進んだり戦闘したりするのは全て自動です。 このゲームはオンラインゲームではありませんが、プレイヤーがキャラクターに命令して、キャラクターがリアルタイムで動く、というのは、オンラインゲームでも使える手法です。 ゴールデンロアも、方針を入力しておけば、あとは自動で冒険に出発してくれるオンラインゲームでした。\nもう一つはダンジョンのシステム。 ダンジョンのエリアは「広さ」と「敵の多さ」という二つのパラメータで表現しています。 この二つのパラメータと「エリアの数」でダンジョンのバリエーションが驚くほど豊富になります。 「広さ」は、次のエリアに行く「階段」を見つける確率に影響します。 最後のエリアで「階段」を見つけると、そのダンジョンをクリアした事になります。 「敵の多さ」は、敵に遭遇する確率で、敵を倒すとそのエリアで敵に遭遇する確率が下がっていきます。 そして、ダンジョンをクリアすると「敵の多さ」が少し回復します。\nこの単純なことで、\n1.クリアするまでは徐々に難易度が下がっていき、 2.クリアすればするほど難易度の高い状態に維持される、\nのです。 面白い仕組みです。\nこのダンジョンのシステムは何かの機会で使ってみたいですね。\n","date":"2008-12-13T00:46:47+09:00","permalink":"https://www.nqou.net/2008/12/13/004647/","title":"まほでんわーるどが面白い"},{"content":" 1 C:\\strawb~1\\perl\\bin\\perl.exe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 Summary of my perl5 (revision 5 version 10 subversion 0) configuration: Platform: osname=MSWin32, osvers=5.1, archname=MSWin32-x86-multi-thread uname=\u0026#39;\u0026#39; config_args=\u0026#39;undef\u0026#39; hint=recommended, useposix=true, d_sigaction=undef useithreads=define, usemultiplicity=define useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef use64bitint=undef, use64bitall=undef, uselongdouble=undef usemymalloc=n, bincompat5005=undef Compiler: cc=\u0026#39;gcc\u0026#39;, ccflags =\u0026#39; -s -O2 -DWIN32 -DHAVE_DES_FCRYPT -DPERL_IMPLICIT_CONTEXT -DPERL_IMPLICIT_SYS -fno-strict-aliasing -DPERL_MSVCRT_READFIX\u0026#39;, optimize=\u0026#39;-s -O2\u0026#39;, cppflags=\u0026#39;-DWIN32\u0026#39; ccversion=\u0026#39;\u0026#39;, gccversion=\u0026#39;3.4.5\u0026#39;, gccosandvers=\u0026#39;\u0026#39; intsize=4, longsize=4, ptrsize=4, doublesize=8, byteorder=1234 d_longlong=undef, longlongsize=8, d_longdbl=define, longdblsize=12 ivtype=\u0026#39;long\u0026#39;, ivsize=4, nvtype=\u0026#39;double\u0026#39;, nvsize=8, Off_t=\u0026#39;long long\u0026#39;, lseeksize=8 alignbytes=8, prototype=define Linker and Libraries: ld=\u0026#39;g++\u0026#39;, ldflags =\u0026#39;-s -L\u0026#34;C:\\strawberry\\perl\\lib\\CORE\u0026#34; -L\u0026#34;C:\\strawberry\\c\\lib\u0026#34;\u0026#39; libpth=C:\\strawberry\\c\\lib libs= -lmsvcrt -lmoldname -lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr -lwinmm -lversion -lodbc32 -lodbccp32 perllibs= -lmsvcrt -lmoldname -lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -lnetapi32 -luuid -lws2_32 -lmpr -lwinmm -lversion -lodbc32 -lodbccp32 libc=-lmsvcrt, so=dll, useshrplib=true, libperl=libperl510.a gnulibc_version=\u0026#39;\u0026#39; Dynamic Linking: dlsrc=dl_win32.xs, dlext=dll, d_dlsymun=undef, ccdlflags=\u0026#39; \u0026#39; cccdlflags=\u0026#39; \u0026#39;, lddlflags=\u0026#39;-mdll -s -L\u0026#34;C:\\strawberry\\perl\\lib\\CORE\u0026#34; -L\u0026#34;C:\\strawberry\\c\\lib\u0026#34;\u0026#39; Characteristics of this binary (from libperl): Compile-time options: MULTIPLICITY PERL_DONT_CREATE_GVSV PERL_IMPLICIT_CONTEXT PERL_IMPLICIT_SYS PERL_MALLOC_WRAP PL_OP_SLAB_ALLOC USE_ITHREADS USE_LARGE_FILES USE_PERLIO Built under MSWin32 Compiled at Oct 19 2008 15:47:04 @INC: C:/strawberry/perl/lib C:/strawberry/perl/site/lib . ","date":"2008-12-12T22:11:28+09:00","permalink":"https://www.nqou.net/2008/12/12/221128/","title":"さようなら、ActivePerl。こんにちは、StrawberryPerl。"},{"content":"zipファイルは、lang_perl_MENTA_tags_release-0.09-r25814.zipになっていました。 マニュアルとデモとが分かれています。 マニュアルのほうには、実際のサーバーで使うためのアップロード方法だけでなく、ディレクトリ構造も紹介されています。 デモのほうは、（個人的に必須な）Session管理のデモもありました。 そろそろ何か作りたくなってきました。 今見るととても恥ずかしいですが、Perlを覚えたての頃に作った、HTMLの出力にこだわったチャットがあります。 今となっては、スタイルシートでレイアウトするのは当たり前ですが、この当時はスタイルシートもブラウザの実装が中途半端で使う人も少なかったんじゃないかと思います。 まあ、そんな遺物をMENTAを使って書き直してみようかなと、ふと思いました。 使い道があるのかと訊かれれば、まずないでしょうが。 そんな昔に書いたソースコードを、恥ずかしげもなく「続き」に書いてみました。 perltidyで味付けはしましたが。 コメントが痛々しいですが、当時はこういうテーマも面白いなという思い付きだったので大目に見ましょう。\nファイル構成 nanochat.cgi (705) : メインスクリプト main.log (606) : 会話記録用ファイル member.log (606) : メンバー記録用ファイル nanochat.css (604) : スタイルシート main.logとmember.logは空ファイルでOK（のはず）。 サンプル nanochat.cgi\nusr/bin/perl # ↑は「#!/usr/local/bin/perl」が一般的みたいなの。 # 動かないときはプロバイダに訊くの。 #BEGIN{ # print \u0026#34;Content-type: text/plain\\n\\n\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;STDOUT\u0026#34;); # $|=1; #} # ↑はエラーが出て困った時にコメントを外すの。 require 5.005; use strict; # ↑はさわったらだめなの。 # いくつか設定することがあるの。 my @max_list = qw(10 20 30 40 50); # 入口では表示する件数を選べるの。 # ここに書いたのがドロップダウンに表示されるの。 # でも、あんまり大きい数はいやなの。 # 数字以外も書けるけど、書いたらいやなの。 my $return_uri = \u0026#39;../nanochat.htm\u0026#39;; # 「戻るの。」でリンクする場所を決める事ができるの。 my $ss_uri = \u0026#39;./nanochat.css\u0026#39;; # スタイルシートの場所なの。 # このファイルはスクリプトと同じ場所だと効かない事があるらしいの。 # そういう人はスタイルシートを他の場所において、ここを変えるの。 # その時は「http://」から書いたほうが確実なの。 my $timeout = 1800; # 書込みしてない人はクッキーの期限が切れるの。 # その時間を決める事ができるの。単位は秒なの。 my $main_log = \u0026#39;./main.log\u0026#39;; # 会話の中身を記録するファイルの名前なの。 # 最初はこの名前だから、そのまま使うときは変えなくてもいいの。 my $member_log = \u0026#39;./member.log\u0026#39;; # 誰が居るかを記録するファイルの名前なの。 # 最初はこの名前だから、そのまま使うときは変えなくてもいいの。 my $nano = \u0026#39;なの\u0026#39;; # これを変えたらなのじゃなくなるの。でもべつにいいの。 my $script_uri = $ENV{SCRIPT_NAME} || \u0026#39;./nanochat.cgi\u0026#39;; # このファイルの名前を変えたら、右側の方にその名前を書くの。 # ここから・・・ my $msg_max = ( sort { $b \u0026lt;=\u0026gt; $a } @max_list )[0]; my $msg_min = ( sort { $a \u0026lt;=\u0026gt; $b } @max_list )[0]; my $script_name = \u0026#39;NANOChat\u0026#39;; my $print_str = \u0026#39;\u0026#39;; my $print_header = \u0026#39;\u0026#39;; my %members = (); my %ip = (); my @logs = (); my @logs_now = (); # ここまでは変えたらいやなの。 # お仕事できなくなるの。 check_env(); # ↑はうまく動くか試してるの。ちゃんと動いたら消してもいいの。 # 心配な人は消さなくてもいいの。 # ここから最後までは細かい事をやってるの。 # わからない人はさわったらダメなの。 main(); print_exit(); sub main { my $cookie = get_cookie(); # HTMLのチェック用なの。 # $cookie = \u0026#39;,10\u0026#39;; # $cookie = \u0026#39;61,10\u0026#39;; # $ENV{QUERY_STRING} = \u0026#39;logout=1\u0026#39;; # ここまでなの。でも、下のほうにもう少しあるの。 if ( defined $cookie ) { my ( $name, $tmp ) = split /,/, $cookie, 3; if ($name) { $name = pack( \u0026#34;H*\u0026#34;, $name ); check_max($tmp); } my %form = (); # (ua =\u0026gt; $ENV{HTTP_USER_AGENT}); foreach ( split /[\u0026amp;;]/, $ENV{QUERY_STRING} ) { my ( $key, $value ) = split /=/, $_, 2; if ( $value =~ /[%\\+]/ ) { my $space = \u0026#34;(?:\\xA1\\xA1)\u0026#34;; $value =~ tr/+/ /; $value =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack(\u0026#34;H2\u0026#34;, $1)/eg; $value =~ s/\u0026amp;/\u0026amp;amp;/g; $value =~ s/\u0026lt;/\u0026lt;/g; $value =~ s/\u0026gt;/\u0026gt;/g; $value =~ s/\\t/ /g; $value =~ s/^(\\s|$space)+//o; $value =~ s/(\\s|$space)+$//o; $value =~ s/ / \u0026amp;nbsp;/g; $value =~ tr/\\x0D\\x0A//d; } $form{$key} = $value; } member_read(); # HTMLチェック用なの。 # $members{\u0026#39;a\u0026#39;} = time; $ip{\u0026#39;a\u0026#39;} = \u0026#39;127.0.0.1\u0026#39;; # これだけなの。 if ( exists $form{logout} ) { ref_logout( \\%form, $name ); print_exit(); } elsif ( exists $form{login} and $name eq \u0026#39;\u0026#39; ) { ref_login( \\%form ); $name = $form{n}; check_max( $form{max} ); } log_read(); if ($name) { $form{msg} ne \u0026#39;\u0026#39; and ref_make_log( \\%form, $name ); my $cname = unpack( \u0026#34;H*\u0026#34;, $name ); $print_header = \u0026#34;Set-Cookie: $script_name=$cname,$msg_max; expires=\u0026#34; . gmtime( time + $timeout ) . \u0026#34;\\n\u0026#34;; reload($name); } else { stock_header(\u0026#39;名前を教えてほしいの。\u0026#39;); stock_member(); my $sel = qq(\u0026lt;select name=\u0026#34;max\u0026#34;\u0026gt;); my $sd = qq( selected); foreach (@max_list) { $sel .= qq(\u0026lt;option value=\u0026#34;$_\u0026#34;$sd\u0026gt;$_ 件\u0026lt;/option\u0026gt;); $sd = \u0026#39;\u0026#39;; } $sel .= \u0026#39;\u0026lt;/select\u0026gt;\u0026#39;; $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;$script_uri\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;n\u0026#34; size=\u0026#34;20\u0026#34; maxlength=\u0026#34;20\u0026#34; tabindex=\u0026#34;1\u0026#34;\u0026gt; ←ここに名前を書いてほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;書いたら、表示するメッセージ数を $sel にして \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;部屋に入るの。\u0026#34; tabindex=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;login\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;logout\u0026#34; value=\u0026#34;やっぱり帰るの。\u0026#34; tabindex=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;hr\u0026gt; EOM stock_log($msg_min); stock_footer(); } } else { $print_header = \u0026#34;Set-Cookie: $script_name=,10; expires=\u0026#34; . gmtime( time + $timeout ) . \u0026#34;\\n\u0026#34;; stock_header(\u0026#39;いらっしゃいなの。\u0026#39;); my $limit = int( $timeout / 60 ); $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;ここの入退室管理を任されてる \u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$nano\u0026lt;/strong\u0026gt; なの。よろしくなの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;この部屋へ入るにはクッキーが必要なの。退室するときにちゃんと消してあげるから、名札だと思ってつけてほしいの。今つけた人は、ついてるかどうかわからないから１回読みなおしてほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;JavaScriptが使えると、マウスを使わなくてもチャットできるの。とってもおすすめなの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;あと、$limit分くらい何も発言しないと部屋から追い出されちゃうの。気をつけてほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;あ、ホームページ（http://から書くの）とかメールアドレス（mailto:から書くの）とかを書くと、リンクしてあげるの。よくわからないから発言を全部リンクしちゃうけど、そのくらいは許してほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;準備ができたら\u0026lt;a href=\u0026#34;$script_uri\u0026#34;\u0026gt;入口\u0026lt;/a\u0026gt;で名前を教えてほしいの。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; EOM stock_footer(); } } sub member_read { open IN, $member_log or die; my $member = \u0026lt;IN\u0026gt;; my $ip = \u0026lt;IN\u0026gt;; close IN; chomp $member; chomp $ip; %members = split /\\t/, $member; %ip = split /\\t/, $ip; foreach ( keys %members ) { if ( $timeout \u0026lt; time - $members{$_} ) { delete $members{$_}; delete $ip{$_}; } } } sub member_write { my $member = join( \u0026#34;\\t\u0026#34;, %members ); my $ip = join( \u0026#34;\\t\u0026#34;, %ip ); open OUT, \u0026#34;\u0026gt; $member_log\u0026#34; or die; print OUT $member . \u0026#34;\\n\u0026#34;; print OUT $ip . \u0026#34;\\n\u0026#34;; close OUT; } # ファイルを最後の方から読むの。 # Perlメモ（http://www.din.or.jp/~ohzaki/perl.htm）を参考にしたの。 # でも、ほとんどそのままなの。 sub log_read { my $bufsize = 1024; my $pos = 0; open IN, $main_log or die; binmode(IN); my $size = ( -s IN ) / $bufsize; $pos += $size \u0026lt;=\u0026gt; ( $pos = int($size) ); my $buf_tmp = \u0026#39;\u0026#39;; while ( $pos-- ) { my $buf = \u0026#39;\u0026#39;; my @lines = (); seek( IN, $bufsize * $pos, 0 ); read( IN, $buf, $bufsize ); $buf .= $buf_tmp; ( $buf_tmp, @lines ) = $buf =~ /[^\\x0D\\x0A]*\\x0D?\\x0A?/g; pop(@lines); unshift( @logs, @lines ); next if @logs \u0026lt; $msg_max; last; } close IN; unshift( @logs, $buf_tmp ) if $buf_tmp; # 最後まで読んでる事も多いから必要なの。 # @logs = @logs[-$msg_max .. -1] if @logs \u0026gt; $msg_max; # 本当は余ったら切らないといけないの。 # でも、表示する時に切るから放っておくの。 } sub log_write { open OUT, \u0026#34;\u0026gt;\u0026gt; $main_log\u0026#34; or die; seek OUT, 0, 2; print OUT \u0026#34;$_\\n\u0026#34; foreach reverse @logs_now; close OUT; return if %members; $msg_max = ( sort { $b \u0026lt;=\u0026gt; $a } @max_list )[0]; @logs = (); log_read(); open OUT, \u0026#34;\u0026gt; $main_log\u0026#34; or die; foreach (@logs) { tr/\\x0D\\x0A//d; $_ or next; print OUT \u0026#34;$_\\n\u0026#34;; } close OUT; } sub ref_login { my ($f) = @_; $f-\u0026gt;{n} or error_exit(\u0026#34;名前を教えてほしいって言ってるの。名無しさんはいやなの。\u0026#34;); $f-\u0026gt;{n} eq $nano and error_exit( qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$f-\u0026gt;{n}\u0026lt;/strong\u0026gt; はわたしなの。同じ名前はいやなの。) ); exists $members{ $f-\u0026gt;{n} } and $ip{ $f-\u0026gt;{n} } ne $ENV{REMOTE_ADDR} and error_exit( qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$f-\u0026gt;{n}\u0026lt;/strong\u0026gt; さんはもういるの。名前を変えてほしいの。) ); $members{ $f-\u0026gt;{n} } = time; exists $ip{ $f-\u0026gt;{n} } and return; $ip{ $f-\u0026gt;{n} } = $ENV{REMOTE_ADDR}; ref_make_log( { msg =\u0026gt; qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$f-\u0026gt;{n}\u0026lt;/strong\u0026gt; さんが入室したの。仲良くしてなの。), }, $nano ); } sub ref_logout { my ( $f, $name ) = @_; $print_header = \u0026#34;Set-Cookie: $script_name=,0; expires=Sat Jan 1 00:00:00 2000\\n\u0026#34;; if ( delete $members{$name} and delete $ip{$name} ) { ref_make_log( { msg =\u0026gt; qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$name\u0026lt;/strong\u0026gt; さんが退室したの。ちょっと淋しいの。), }, $nano ); %members or ref_make_log( { msg =\u0026gt; \u0026#39;誰もいなくなったの。淋しいの。\u0026#39;, }, $nano ); stock_header(\u0026#39;ばいばいなの。\u0026#39;); $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$name\u0026lt;/strong\u0026gt; さん、ありがとうなの。また来てほしいの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;そういえば、ブラウザに履歴がいっぱいあると思うの。ごめんねなの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;$return_uri\u0026#34;\u0026gt;戻るの。\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; EOM log_write(); member_write(); stock_footer(); } else { stock_header(\u0026#39;残念なの。\u0026#39;); $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;今度はちゃんと入ってほしいの。また来てなの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;$return_uri\u0026#34;\u0026gt;戻るの。\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; EOM stock_footer(); } } sub get_cookie { return undef unless my $http_cookie = $ENV{HTTP_COOKIE}; $http_cookie =~ tr/ //d; foreach ( split( /;/, $http_cookie ) ) { my ( $key, $value ) = split( /=/, $_, 2 ); next if $key ne $script_name; return $value; } return undef; } sub ref_make_log { my ( $f, $name ) = @_; my $str = \u0026#39;\u0026#39;; my @date = localtime; if ( index( $f-\u0026gt;{msg}, \u0026#34;http://\u0026#34; ) == 0 or index( $f-\u0026gt;{msg}, \u0026#34;mailto:\u0026#34; ) == 0 ) { $f-\u0026gt;{msg} = qq(\u0026lt;a href=\u0026#34;$f-\u0026gt;{msg}\u0026#34;\u0026gt;$f-\u0026gt;{msg}\u0026lt;/a\u0026gt;); } $f-\u0026gt;{msg} .= sprintf \u0026#34; \u0026lt;small\u0026gt;(%ld/%02d/%02d %02d:%02d:%02d)\u0026lt;/small\u0026gt;\u0026#34;, $date[5] + 1900, $date[4] + 1, @date[ 3, 2, 1, 0 ]; if ( $name eq $nano ) { $str = qq(\u0026lt;p class=\u0026#34;nano\u0026#34;\u0026gt;); } else { $str = \u0026#34;\u0026lt;p\u0026gt;\u0026#34;; $members{$name} = time; } unshift @logs_now, qq($str\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$name\u0026lt;/strong\u0026gt; ： $f-\u0026gt;{msg}\u0026lt;/p\u0026gt;); } sub reload { stock_header( $nano . \u0026#39;チャットなの。\u0026#39; ); stock_member(); $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;$script_uri\u0026#34;\u0026gt; \u0026lt;p\u0026gt;あなたは \u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$_[0]\u0026lt;/strong\u0026gt; さんなの。改行するとたぶん送信するの。何も書いてない時は再読込になるの。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;msg\u0026#34; size=\u0026#34;80\u0026#34; value=\u0026#34;\u0026#34; tabindex=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;送信するの。\u0026#34; tabindex=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;logout\u0026#34; value=\u0026#34;退室するの。\u0026#34; tabindex=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;hr\u0026gt; EOM stock_log($msg_max); stock_footer(); if (@logs_now) { log_write(); member_write(); } } sub stock_member { my $cnt = 0; $print_str .= qq(\u0026lt;p class=\u0026#34;nano\u0026#34;\u0026gt;今は、 ); foreach ( sort { $members{$b} \u0026lt;=\u0026gt; $members{$a} } keys %members ) { $print_str .= qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$_\u0026lt;/strong\u0026gt; さんと ); ++$cnt; } my $only = $cnt ? \u0026#34; \u0026#34; : \u0026#34; だけ\u0026#34;; $print_str .= qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$nano\u0026lt;/strong\u0026gt;$onlyがいるの。\u0026lt;/p\u0026gt;\\n); } sub stock_log { my $cnt = 0; @logs_now or @logs or return; $print_str .= qq(\u0026lt;div class=\u0026#34;logs\u0026#34;\u0026gt;); foreach ( @logs_now, reverse @logs ) { $_[0] \u0026lt; ++$cnt and last; tr/\\x0D\\x0A//d; $print_str .= $_; } $print_str .= \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; } sub stock_header { $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$ss_uri\u0026#34; title=\u0026#34;Default\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;ROBOTS\u0026#34; content=\u0026#34;NOINDEX\u0026#34;\u0026gt; \u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body onload=\u0026#34;obj = document.forms[0];if(obj)obj.elements[0].focus();\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;nano\u0026#34;\u0026gt;$_[0]\u0026lt;/h2\u0026gt;\u0026lt;hr\u0026gt; EOM } sub stock_footer { my $cost = sprintf \u0026#34;このお仕事に %.2f 秒くらいかかったの。\u0026#34;, times; my $copy = qq(\u0026lt;a href=\u0026#34;http://www.age.ne.jp/x/nobu3/perl/nanochat.htm\u0026#34; title=\u0026#34;このスクリプトの最新版はこのリンク先にあるの。\u0026#34;\u0026gt;$script_name Ver0.12\u0026lt;/a\u0026gt;); $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;hr\u0026gt; \u0026lt;p class=\u0026#34;nano\u0026#34;\u0026gt;$cost\u0026lt;/p\u0026gt; \u0026lt;address\u0026gt;$copy\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; EOM } sub error_exit { $print_str = \u0026#39;\u0026#39;; stock_header(\u0026#39;そんな事したらダメなの。\u0026#39;); $print_str .= \u0026lt;\u0026lt;EOM; \u0026lt;div class=\u0026#34;nano\u0026#34;\u0026gt; \u0026lt;p\u0026gt;$_[0]\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;お仕事の邪魔しないでほしいの。\u0026lt;a href=\u0026#34;$script_uri\u0026#34;\u0026gt;入口まで戻るの。\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; EOM stock_footer(); print_exit(); } sub print_exit { $print_str =~ tr/\\x0D\\x0A//d; print \u0026#34;Content-Type: text/html; charset=euc-jp\\n\u0026#34;; print \u0026#34;Content-Language: ja\\n\u0026#34;; print \u0026#34;Content-Script-Type: text/javascript\\n\u0026#34;; print \u0026#34;Content-Style-Type: text/css\\n\u0026#34;; print \u0026#34;Pragma: no-cache\\n\u0026#34;; print \u0026#34;Cache-Control: no-cache\\n\u0026#34;; $print_header and print $print_header; printf \u0026#34;Content-Length: %ld\\n\u0026#34;, length $print_str; print \u0026#34;\\n\u0026#34;; print $print_str; exit; } sub check_max { my ($num) = @_; $num = $msg_min if $num =~ /\\D/; $msg_max = $msg_max \u0026lt; $num ? $msg_max : $num \u0026lt; $msg_min ? $msg_min : $num; } sub check_env { my $str = \u0026#39;\u0026#39;; -r $main_log or $str .= $main_log . \u0026#39;が読めないの。\u0026lt;br\u0026gt;\u0026#39;; -w $main_log or $str .= $main_log . \u0026#39;に書けないの。\u0026lt;br\u0026gt;\u0026#39;; -r $member_log or $str .= $member_log . \u0026#39;が読めないの。\u0026lt;br\u0026gt;\u0026#39;; -w $member_log or $str .= $member_log . \u0026#39;に書けないの。\u0026lt;br\u0026gt;\u0026#39;; ord(\u0026#39;漢\u0026#39;) == 0xb4 or $str .= qq(\u0026lt;strong class=\u0026#34;name\u0026#34;\u0026gt;$nano\u0026lt;/strong\u0026gt; は、eucが好きなの。変えてほしいの。\u0026lt;br\u0026gt;); $str and error_exit($str); } __END__ Ver 0.10 (2000/12/27) 公開版。 Ver 0.11 (2001/04/19) 入室時の２重投稿チェックをして入室ミスをなるべく防ぐようにした。 ログの表示件数を正確にした。 URIとMailに自動リンク。ただしとっても手抜き。 出力するHTMLをHTML4.01Strict相当にした。 Ver 0.12 (2001/04/26) 名前の変更ができてしまうのを修正。 最大表示件数のチェックを強化。 ロボット対策をつけた。 スタイルシートを若干変更。 nanochat.css\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /***********************/ /* for NANOChat */ /* Designed by NANO(?) */ /***********************/ body{ color: #642; background-color: #fed; } a:link{ color: #c36; } a:visited{ color: #63c; } a:active, a:hover{ color: #f63; text-decoration: none; } .nano{ color: #862; } .name{ color: #621; } h2, form{ margin: 1px 5px; } p{ margin: 1px 5px; text-indent: 0.6em; } input{ margin: 0; text-indent: 0; } div.logs p{ padding: 1px 5px; border-width: 0px 0px 1px 0px; border-style: solid; border-color: #9cf; } small{ font-size: 80%; color: #ac8; } address{ text-align: right; font-size: 80%; font-family: \u0026#34;Times New Roman\u0026#34;, Times, serif; } ","date":"2008-12-04T03:19:35+09:00","permalink":"https://www.nqou.net/2008/12/04/031935/","title":"今日のMENTA、2回目"},{"content":" 1 static/menta-logo.png/ を処理する方法がわかりません at lib/MENTA.pm line 96, \u0026lt;DATA\u0026gt; line 16. 1 \u0026lt;img src=\u0026#34;\u0026lt;?= static_file_path(\u0026#39;menta-logo.png\u0026#39;) ?\u0026gt;\u0026#34; alt=\u0026#34;Web Application Framework - MENTA\u0026#34; title=\u0026#34;Web Application Framework - MENTA\u0026#34; /\u0026gt; ","date":"2008-11-21T03:00:15+09:00","permalink":"https://www.nqou.net/2008/11/21/030015/","title":"今日のMENTA"},{"content":"MTでつけたタグを管理するのにも丁度良いので、HatenaBookmarkerプラグインを使って、ブログ記事をはてなブックマークに登録しているのだが、最近、余計な仕事もしてくれているようだ。 トラックバックを受け取ったときに、その記事をブックマークしにいくのだ。 しかも、なぜかパーマリンクが間違って（ファイル名が日付と時間になって）いる。 解決できないかとソースを見ているのだが、さっぱりわからない。 トラックバックを受け取ったときに動作しないようにできればまったく問題ないとは思うのだが。 お手上げ。\n","date":"2008-11-21T01:14:11+09:00","permalink":"https://www.nqou.net/2008/11/21/011411/","title":"MTのプラグイン(hatenabookmarker)で困ったことが起きている"},{"content":" ","date":"2008-11-21T00:52:33+09:00","permalink":"https://www.nqou.net/2008/11/21/005233/","title":"Perlのソースをブログに書くために"},{"content":" 1 ...lang\\perl\\MENTA\\tags\\release-0.03\u0026gt;perl bin/cgi-server.pl 1 HTTP::Server::Simple: You can connect to your server at http://localhost:5555/ ","date":"2008-11-20T01:33:21+09:00","permalink":"https://www.nqou.net/2008/11/20/013321/","title":"Perlの超軽量フレームワーク「MENTA」を追っかける"},{"content":"スクリプトのutf8化計画に役立つであろうコードを書いた。 スクリプトのあるディレクトリ以下のファイルを走査して、ファイルの文字コードをeuc-jpからutf8に変換するスクリプトだ。 それにしても、作るのに妙に時間がかかった。 徐々に勘を取り戻せればいいのだけど。 で、色々と調べながら書いていたら、面白いモジュールを色々と見つけた。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/perl use strict; use warnings; use Fatal qw/open close/; use Encode; use Encode::Guess qw/euc-jp shiftjis 7bit-jis/; use File::Find::Rule; my $rule = File::Find::Rule-\u0026gt;new; $rule-\u0026gt;file; $rule-\u0026gt;name( \u0026#39;*.cgi\u0026#39;, \u0026#39;*.pm\u0026#39; ); my @files = $rule-\u0026gt;in( \u0026#39;.\u0026#39; ); foreach my $file (@files) { print $file . \u0026#34;\\n\u0026#34;; euc2utf8($file); } sub euc2utf8 { my $filename = shift; if (-f $filename) { my $fh; open $fh, \u0026#34;\u0026lt;\u0026#34;, $filename; my $doc; { local $/ = undef; $doc = \u0026lt;$fh\u0026gt;; } close $fh; my $enc = guess_encoding($doc); ref($enc) or die \u0026#34;Can\u0026#39;t guess: $enc\u0026#34;; open $fh, \u0026#34;\u0026gt;\u0026#34;, $filename . \u0026#34;.utf8\u0026#34;; Encode::from_to($doc, $enc, \u0026#34;utf8\u0026#34;); print $fh $doc; close $fh; } } ","date":"2008-11-17T00:27:23+09:00","permalink":"https://www.nqou.net/2008/11/17/002723/","title":"久しぶりにPerlのコードを書いた"},{"content":"iTunesをバージョンアップしたら新機能ができていた。 というのも2ヶ月前の話。 自分自身のライブラリの中で、聴いていない曲というのもかなりあって、ライブラリの再発見というか、聴いていない（あるいは、iTunesでは聴いてないことになっている）曲から優先的聴く曲を選ぶツールとして役立っている。 まあ、曲自体が似通っているのか、好きな曲を数曲選んでGeniusにかけると、同じ曲がそれぞれのリストに入ってくるのだが。 それでも、無作為に聴くよりも好みの曲が聴ける精度は高いです。 最近は、新しい曲を聴くよりも、好きな曲ばかりを再生するようになっていますが。\n","date":"2008-11-16T17:45:17+09:00","permalink":"https://www.nqou.net/2008/11/16/174517/","title":"iTunes8の新機能「Genius」を使ってみた"},{"content":"先日ラスベガスに行ったときに、ラジオでかかっていて耳についた曲が「I Don\u0026rsquo;t Wanna Be In Love (Dance Floor Anthem)」だった。\nオフィシャル Good Charlotte\n試聴サイト MySpace.com - Good Charlotte - Waldorf, MARYLAND - Rock / Rock / Powerpop - www.myspace.com/goodcharlotte\n車で移動して、もうすぐ目的地というタイミングでよくかかっていた。 誰の曲かさっぱりわからないのだが、気になって気になって仕方なかった。 ラスベガスを離れる前に、なんとか放送局と時間から曲を探り当てたときの達成感はなんともいえなかった。 ちなみにその放送局 Mix 94.1 Today’s Best Music Mix // Las Vegas - Homepage\n","date":"2008-09-17T23:01:04+09:00","permalink":"https://www.nqou.net/2008/09/17/230104/","title":"Good Charlotte"},{"content":"長旅から帰ってきました。 とりあえず、気分も新たにデザインを変えてみました。 こういうことが簡単にできるのも、ブログシステムがあるからこそですね。 感謝です。\n","date":"2008-09-14T23:58:55+09:00","permalink":"https://www.nqou.net/2008/09/14/235855/","title":"帰着"},{"content":"公衆トイレの落書きもインターナショナルだった。 ハングルあり、英語あり、日本語あり。 英語で「独島は日本じゃない」という落書きがあった。 その下に日本語で「竹島は日本だ」という落書きがあった。 言葉だけで言えばどちらも正しい。 日本では「竹島」と呼んでいる島が、韓国では「独島」と呼ばれているのだから。 問題はそういうことではない、というのは分かっているが、もう少し頭のいい落書きはないものかと思った。\n","date":"2008-09-06T14:42:14+09:00","permalink":"https://www.nqou.net/2008/09/06/144214/","title":"トイレの落書き in NRT"},{"content":"成田空港のヤフーカフェにいます。 ラウンジオーサカに比べて、ネット環境は大分マシです。 ただ、使用頻度がかなり多いのでしょう。 キーボードの文字がかすれてしまったのか、一部に文字のシールが貼ってあります。 日本にいるのは（というか、すでに出国はしているので日本にいるのか微妙ですが）あと２時間弱となりました。 いつも思いますが、気がつくとあまり時間がなくなっている。 出国までにかなり時間がかかっているはずですが、そんなに経っているように感じないというか。 人間の感覚というのは、結構いい加減なものなのかなと。 特に時間に関しては。 改めてそう思いました。\n","date":"2008-09-06T14:15:05+09:00","permalink":"https://www.nqou.net/2008/09/06/141505/","title":"YAHOO! CAFEにて"},{"content":"ただいま伊丹空港内ラウンジオーサカ。 ここのネット環境はあまりよくないのだろうか？ 以前はそれほど感じなかったのだが、かなり遅い。 まあ、それだけです。 では、まずは羽田に向けて出発です。\n","date":"2008-09-06T08:52:06+09:00","permalink":"https://www.nqou.net/2008/09/06/085206/","title":"ラウンジオーサカにて"},{"content":"この前、作曲家の坂本龍一が出演しているテレビ番組を見た。 相変わらず番組名はわからない。 で、その中でカーボンオフセットについての話題があった。 例えば、コンサートを開くのに使った分のCO2（二酸化炭素）を吸収する分の緑を育成する費用を募金する。\nその時に、ひとつの例としてコンサートを開く、という事に対して具体的に数字を出していたのだが、それが思った以上に安かった。 まあ、それだけ「コンサート」からは二酸化炭素が排出されない、という事なのでしょうけど。 しかし、私にはそれが釈然としなかったのです。\nそれは、お金さえ出せばいいのか？という疑問。 この言葉が私の口から出ることに違和感を持つ人もいるでしょう。 私は、お金で解決できることはお金で解決すればよい、と公言して憚らないので。 しかし、この問題はお金で解決できる問題なのでしょうか？ むしろ、お金を出す、という事によって、二酸化炭素を排出することの意味をすり替えるだけなのではないか？ お金を出すことで、二酸化炭素を排出することを正当化させることになるのではないか？ 排出した分はお金払ってるんだから問題ないでしょ？という意識が芽生えてしまうのではないか？ 最初に思ったのはそういうことでした。 あと、例えばコンサートを開く場合、使うのは電気だけではありません。 機材を運んだりするのに使うトラックもその対象に含めるべきではないでしょうか？ そして、コンサートを見に来るお客さんの交通手段。 また、人間は呼吸するだけで酸素を消費し、二酸化炭素を排出します。 それらも含めると、とんでもなく大きな金額になるのではないか。 カーボンオフセット自体を否定するつもりはありません。 まったく募金しないよりははるかにましでしょう。 しかし、カーボンオフセットが、自然エネルギー使用することの免罪符として存在しているようで危険だなと思いました。\n","date":"2008-09-02T00:41:12+09:00","permalink":"https://www.nqou.net/2008/09/02/004112/","title":"カーボンオフセットへの懸念"},{"content":"コレジャナイロボは、少し前（？）にテレビで見た。 そのコレジャナイロボの商品説明には以下のようなことが書いてあるらしい。 テレビで見たときは少し違っていたと思うのだが、記憶違いもよくあることなので、あまり気にしない。\nのほほ～んと読んでいたのだが、徐々にそうもいかなくなってきた。 なかなか深い教訓があったのだ。\n「コレじゃない」がわかれば、コレ以外を求める努力をしようよ。 与えられたものに不満を言うだけじゃなく、自分で手に入れることを覚えようよ。 そういうメッセージも込められているようだ。\nこのメッセージを見て、改めて考えてみた。 なんというか、理想をずっと探していた。 現実から目をそむけて、現実ではない理想と比較しようとしていた。 でも、形にならない理想を探しても見つかるはずもない。 でも、それを見つかるものと信じて。 こんな現実は間違っている、何が理想なのかはうまく言えないけど、とにかく間違っている。 って感じで。 とにかく、今、自分の置かれている状況に不満ばかり言って、自分ができることを考えることをしなかった。 若い頃は理想っぽい何かを語る自分自身に酔いしれていたと思う。 でも、そうやって不満を言っていても、状況が変わるわけではない。 飲んだ席で会社に対して不満を言っていれば、誰かがその不満を解消してくれるわけでもない。 飲んだ席で社長に直談判しても、それで会社が変わったりするわけでもない。 現実というのは、そんなに簡単にはいかない。 少なくとも、うちの会社は、そんな簡単な会社ではなかった。 それにようやく気づいて、転職しようと思ってそういう情報を仕入れたり、転職サイトに登録してみたり。 でも、今度は世間の現実を目の当たりにした。 理想っぽい何かを語っているうちに現実に置き去りにされていた。 一般的な転職市場は、未経験は27歳程度が上限で、経験者で35歳くらいまでというのが大半だった。 辞めても行く先がなければ、今の会社で働くしかない。 ある意味開き直ってみると、今のポジションでもやろうと思えばできること、というのは、意外と多いことに気づいた。 今は、その「できること」に力を注いでいる。 ここ最近の自分の身の回りにあったこと。 それが、コレジャナイロボの思想にあった。\n","date":"2008-08-27T23:54:18+09:00","permalink":"https://www.nqou.net/2008/08/27/235418/","title":"コレジャナイロボに深い思想を見た"},{"content":"なんというか、変な出来事があるものですね。\nCMじゃないけど、オール電化にしてよかったわ～、です。 ただ、この種の問題は十分起こる可能性はあります。 関西電力でも、エコキュートや電気温水器などの販売促進のために、街の電気屋さんを使うこともあるでしょう。 このような行き過ぎた販売促進活動はやめてほしいものですね。\n","date":"2008-08-27T23:08:06+09:00","permalink":"https://www.nqou.net/2008/08/27/230806/","title":"オール電化にしてよかったと思った瞬間"},{"content":"うちのチャンネル権は常に妻が持っている。 私はテレビをあまり見ないからだ。 あまりにも頻繁に変えるので、時には文句をいうこともあるが。 先日、いつものようにテレビを見るともなく見ていたら、普段はほとんど見ない映画を、わりと長く見ているようだった。 途中で気づいたのだが、確か少し前にテレビでこの話を見ていたような記憶があった。 たぶん、主人公である「エリン・グルーウェル」のドキュメンタリーだったのだろう。 それに気づいたあたりから、テレビのほうに集中することにした。 まあ、名前はあとで調べたのだが。 その映画番組は「フリーダム・ライターズ」だった。\n序盤のストーリーは以下のとおり。\nそして、クラスの中で人種の違いを基にしたちょっとした事件が起こり、それをきっかけにエリンは生徒たちのことを知りたいと感じるようになった。 ある日、ラインゲームというゲームを行った。 教室の中央にテープで線を引き、質問をして当てはまるなら線の近くまで進み、そうでないなら壁際にとどまる、という単純な仕組みのゲームだ。 質問は、最初は単純なものだったが、徐々に生徒たちの生活の範囲へと及んでいく。 銃口を向けられたことがあるか、友人をギャングに殺されたことがあるか、それは二人以上か、三人以上か。 その質問の中で、先生が生徒のことを知るだけでなく、生徒同士がお互いを見る目を変えていく。 肌の色や人種が違っていても、育った環境に大きな違いはないのだと。 こうして人種差別がなくなったクラスの生徒と、それを成し遂げた先生が設立したのがフリーダム・ライターズ基金(Freedom Writers Foundation)だそうです。 このクラスが大きく方向転換したのは、ラインゲームで生徒たちがお互いのことを理解した時からだと思う。 今までの先生は、生徒を理解しようとしなかったし、生徒同士の交流については意に介さなかった。 1対多の交流は難しいのだろうが、それ以上に、その「多」同士の交流が難しい。 後は、月並みだけど、誠意を持って人と向き合えば通じる、というか。 そういうのが、大事なんだな、と思った。 それにしても、この映画を見て感じたことを記録しようと思って書き始めたのだが、ぜんぜん言葉が出てこない。 自分自身が感じた事を言葉で表現できない、というのは、うまく書こう、というような気持ちがあるからかもしれない。 そういえば、昔から読書感想文とか苦手でした。 感想文じゃなくて、作者に手紙を書いてみる、というのもいいかもしれない。\n","date":"2008-08-27T00:52:22+09:00","permalink":"https://www.nqou.net/2008/08/27/005222/","title":"「フリーダム・ライターズ」を見て思ったこと"},{"content":" ","date":"2008-08-25T23:38:36+09:00","permalink":"https://www.nqou.net/2008/08/25/233836/","title":"MTOS4.21にアップグレード"},{"content":" ","date":"2008-08-25T01:21:51+09:00","permalink":"https://www.nqou.net/2008/08/25/012151/","title":"Perlスクリプトを書くエディタを探して三千里"},{"content":"とあるメールマガジンの中で、記憶に留めておきたい事が書いてあったので引用。\nこれを実践するためのポイントは以下の二つである、と書いています。\n失敗を恐れないこと 考えないこと 私には「失敗するのではないか、ということを言い訳にして行動しない」ということもあります。 行動することが面倒な場合は、特にそうです。 行動する前に、言い訳を考え始めてしまうのです。\n時には考える前に行動（しかも、面倒がらずに）することも大切かもね。\n","date":"2008-08-22T02:36:12+09:00","permalink":"https://www.nqou.net/2008/08/22/023612/","title":"「事あれ主義」に感じたこと"},{"content":"コロンブスの卵の逸話は有名だと思う。 小山 昇氏：こころ豊かで安全な経営とは何か / SAFETY JAPAN [小山 昇氏] / 日経BP社 この人のコラムをコメントも含めて読んでいると、まさにコロンブスの卵の現代版のように感じる。 いくつかのコラムは、ある特定のパターンがある。 ひょっとすると小山氏の発想のパターンなのかもしれない。\nその発想というのは、大胆に言ってしまうと次のようなことだ。\n例えば、 上司が見ていないところではサボりたくなる、という人がいる。 サボりたくなるのは人の弱さである。 だから「サボれなくなる仕組み」を作る。\n久しぶりにコラムを読んで、こういう「仕組み」の話が多いなぁ、と思って、まとめエントリーを書こうとしたら、それもそのはず。 コラムの最初の方に、まとめに近いものが書いてありました。\nそういう「仕組み」を作るのはとても難しい。 しかし、その「仕組み」を作る発想法は、知ってしまえばなるほどな、と思える発想法だ。\nそれをいろいろな形に応用するのも発想次第なのです。\n発想法自体は単純ですが、その発想法を活かせるかどうかは、仕組み作りの難しさを理解できるかどうか、にかかっている気がする。\n","date":"2008-08-22T02:09:28+09:00","permalink":"https://www.nqou.net/2008/08/22/020928/","title":"「仕組み」を作る発想法とその活かしかたについての思いつき"},{"content":"MT4.1の時にテンプレートにタグの閉じ忘れがあった件を思い出したので、クリーンインストールしたMTOS4.2のテンプレートをのぞいてみた。 そしたら、中身が全然変わっていた。 ずいぶんと項目が少なくなったようだ。 バージョンアップしたから変わったのか、それとも、オープンソースにしたから変わったのか。 MTOS4.2のテンプレートで以前の部分に相当するのは「ブログ記事の概要」でしょうね、たぶん。 タグの閉じ忘れは治っていました。 オープンソース版を折角選んだのだから、以前のテンプレートは捨ててしまったほうが良かったかなぁ、と少し後悔しました。 そのうち、テンプレートを初期化したくなるかもしれません（ぇ\n","date":"2008-08-21T01:43:03+09:00","permalink":"https://www.nqou.net/2008/08/21/014303/","title":"MTOSをクリーンインストールしてわかったこと"},{"content":"MTOS4.2でスタイルの変更がエラーになっていた件の続報。 結果から言うと今のところ問題なく動くようになった、という感じです。 ただ、再構築はかなり時間がかかりました。 ちなみに、もうすぐラスベガスに行くのでそれっぽいデザインにしてみました。 で、どのようにしたか、ですが。 とりあえず英語サイトでstylecatcherのコードが無いか探してみたところ、発見できました。\nとりあえず、ここからzipファイルをダウンロードします。\nで、適当に解凍するとtrunkというディレクトリ（フォルダ）ができます。 その深い階層部分に目指すファイルがあります。 深さはこれくらい。\n1 trunk\\StyleCatcher\\plugins\\StyleCatcher\\lib\\StyleCatcher あとは、それ以下にあるファイル（CMS.pm、L10N.pmとL10Nフォルダの中身全部）を、今現在のstylecatcherのファイルと入れ替えてしまうだけ。\n1 MTOS-4.2-ja\\plugins\\StyleCatcher\\lib\\StyleCatcher この対策が正しいかどうかは別にして、とりあえずうちでは動いています。\n","date":"2008-08-21T01:09:53+09:00","permalink":"https://www.nqou.net/2008/08/21/010953/","title":"MTOS4.2の「デザイン」-「スタイル」のスタイル変更に成功"},{"content":"タイトル長すぎ。 で、結果としてはアップグレードしたのと同じで、エラーになった。 検索してみたが、今のところ情報は無いようだ。 探し方が悪いのか？ さて、どうしたものか。\n","date":"2008-08-20T23:45:53+09:00","permalink":"https://www.nqou.net/2008/08/20/234553/","title":"MTOS4.2のクリーンインストールで「デザイン」-「スタイル」を試してみた"},{"content":"アップデートを適当にやったせいなのか、「デザイン」－「スタイル」でのスタイルの変更時にスクリプトエラーが出るようになった。 画像とかは切り替わるのだが、カラムの配置変更ができなくなっているようだ。 むむむむむ。 ログを見ると以下のアクセスで500エラーになっている。\n1 POST /mt/mt.cgi?.r=0.11949529833798522 HTTP/1.1 「.r」の数値はほかにも色々。 結局POSTの中身が問題なのか。 ただ、エラーがダイアログで出てくるので、デバッグ情報を仕込んだとしても、そこから原因を探求するのはなかなか面倒そうだ。 と、いきなり弱気。 とりあえず、クリーンインストールして試してみたいね。\n","date":"2008-08-19T01:13:50+09:00","permalink":"https://www.nqou.net/2008/08/19/011350/","title":"スタイルの変更ができなくなった"},{"content":"毎度の事ながら、シンボリックリンクを使ったアップデートの仕方を忘れる。 以前からMovable Type 備忘録 - シンボリックリンクでMovableType3.32アップグレードを参考にしてアップグレードをしていたのだが、シンボリックリンクを更新するやり方とかをすぐに忘れるので備忘録ということで書いておく。\nまずはファイルを取ってきます。\nで、それをそのままアップロードします。 xreaは、SSHが使えるのでとりあえずSSHでログイン。 telnetでも問題ないはず。 で、zipファイルをそのまま解凍（展開）します。\n1 $ unzip MTOS-4.2-ja.zip ディレクトリ付になっているはずなので、中身はすべて「MTOS-4.2-ja」というディレクトリに展開されるはず。 手元で解凍してからアップロードするととてつもなく時間がかかります。 なので、サーバ上でunzipできる場合は、サーバには圧縮したままアップロードしたほうがいいでしょう。 で、現在のシンボリックリンクを削除する。 仮にシンボリックリンクが「mt」だとすると、以下のコマンドで削除できる。\n1 $ rm mt もちろんだが、その「mt」が置いてあるディレクトリに行ってから実行する必要がある。 で、新しくシンボリックリンクを作成する。 今回は「MTOS-4.2-ja」というディレクトリにインストールしているので、以前と同じく「mt」という名前でシンボリックリンクを作成する。\n1 $ ln -s MTOS-4.2-ja mt とりあえず、ここまでできたところでmt.cgiにアクセスして、mt-upgradeからアップグレードする。 それが完了したら再構築してみる。 いきなりエラーだったが、よく考えてみるとプラグインを全然入れていなかった。 今まで使っていたプラグインは、あえて手元でバックアップしてあるので、それを丸ごとアップロードする。 そして今一度再構築してみる。 テンプレート「ヘッダー」で引っかかった。 「atomやrssのリンクが見つからない」というエラーだった。 ここのrss類はフィードバーナーを使っているので、行儀悪いけどテンプレート内にURLを直書き。 三度目の正直で再構築してみる。 無事終了。 と、一応流れを記録してみた。 これが、次のアップグレードの時に自分自身に対して役立つといいのだが。 今回は、サーバ上で展開する、という技を忘れていて、解凍後にアップロードしたのだが、ファイル数がとんでもないことになっていて、かなり時間がかかった、というのは秘密だ。\n","date":"2008-08-19T00:19:17+09:00","permalink":"https://www.nqou.net/2008/08/19/001917/","title":"MTOS4.2をインストール（にアップグレード）した"},{"content":"今まで、googleのサイトマップに対応したサイトマップを生成していた。 しかし、世の中の検索エンジンはgoogleだけではない。 日本ではyahooが多いし、windowsを標準で使っている人はmsnも多いだろう。 しかし、今のままだとその二つには対応していないことになる。 mt-search.cgiとrobots.txt関係で調べていた中で、sitemapsに対する記事を幾つか見つけた。\n検索エンジンで共通のsitemapが使えるという話です。 世の中は色々な標準化がどんどん進んでいたんですね。\nしかも、もう一年以上前の話なんですが。 ひょっとしたら、改めて変更するまでも無くgoogle用のサイトマップを読むようになっているかもしれませんが、折角知ったので対応してみることにしました。\nsitemaps 0.90の仕様はオフィシャルにあります。\nとはいうものの、ちょっと検索してみると実はすでにMT4用のテンプレートがいくつかのサイトに載っていました。\nとりあえず小粋空間: Sitemaps 0.90 用テンプレート（MT4対応）のほうで作成してみました。 あとは、robots.txtにサイトマップのアドレスを書き加えるだけです。\n簡単ですね。 それにしても、ウェブの紳士協定が徐々に機能するようになってきたんでしょうか。 昔は、当時2大ブラウザといわれたIEとNNの、標準を無視するような独自拡張（当時はそういうのが売りだったのでしょう）をはじめとして、ホームページを作る側にとって非常に難しい問題が沢山ありました。 web製作者側からすれば良い時代になりましたね。\n","date":"2008-08-18T00:36:23+09:00","permalink":"https://www.nqou.net/2008/08/18/003623/","title":"sitemaps0.90に対応したmovabletypeのテンプレート"},{"content":" ","date":"2008-08-17T13:19:43+09:00","permalink":"https://www.nqou.net/2008/08/17/131943/","title":"mt-search.cgiの負荷に対するrobots.txtの効果"},{"content":"昨夜、久しぶりにビールを飲んだ。 薬を飲んでいたのでずっと控えていたのだが、ようやく喉の痛みを感じなくなってきたのでアルコール解禁。 大量の焼肉と共に大量にビールをいただいてきた。 健康っていいね。\n","date":"2008-08-17T11:27:35+09:00","permalink":"https://www.nqou.net/2008/08/17/112735/","title":"完全復活"},{"content":"不摂生をしているつもりはあまりないのだけど、微熱状態がずっと続いている。 まあ、治ったと思ってビールを飲んだのは確かだが。 喉の痛みが昨日よりも悪化している。 昨夜からは下唇に水膨れ（口唇ヘルペス？）もできた。 漢方薬を飲んだおかげか痰は出るのだが、その痰が半固形な感じで唾液と分離している。 我ながら気持ち悪い。 今日一日も用事があるのだが、なるべく養生しておかないとね。\n","date":"2008-08-03T09:19:46+09:00","permalink":"https://www.nqou.net/2008/08/03/091946/","title":"長引く体調不良"},{"content":"木曜日は朝から元気に出勤したのだが。 といっても、喉の痛みは若干あって、時々咳き込む感じ。 喉の奥に何か引っかかっているような感じがしていた。 まあ、でも、そのうち治ると思っていた。 明けて金曜日。 また微熱と頭＆喉の痛みが。 熱は微熱なのだが、頭の痛みが結構ひどい。 喉のほうも木曜日の夜に薬を服用したおかげで痰が出るようにはなったのだが、咳き込むと頭に響いて痛い。 結局会社を休むことに。 バファリンの効き目って24時間くらいあるんですかね？ 木曜日に元気だったのは、バファリンの効能だったんじゃないかと。\n木曜日のうちに資料作りは終わっていたので、休む連絡だけをとりあえずした。 しかし、進捗が心配で途中で連絡すると、追加で私に作ってほしい資料があるということで月曜日まで書類が進まないことが判明した。 ここで追加ですか。 まあ、仕方ないですが。 で、それが気になったわけではないだろうけど、時間がたつにつれて体調がどんどん悪化していった。 熱は微熱のまま下がらないし、喉の痛みも治まらない、咳も止まらない、頭の痛みはひどくなってくる。 結局晩御飯のあと、冬用毛布をかぶって寝た。 3時間くらいで起こされた時、体中が汗でびっしょり。 特に、腕からは玉のような汗で、妻に気持ち悪がられた。 しかし、頭と喉の痛みがぜんぜん取れていなくて、またバファリンを飲むことに。相変わらずポカリスエットで。 あと、麦門冬湯（ばくもんどうとう）という漢方薬も。 おかげで今、こうやってブログを書いているわけですが。 今日もはやめに寝ないと、また明日が大変なことになりそう。\n","date":"2008-08-02T23:30:24+09:00","permalink":"https://www.nqou.net/2008/08/02/233024/","title":"バファリンの効き目"},{"content":"昨日、夕方あたりから急に体調が悪化して、気がつけば39度近い熱が。 とりあえず、キリのいいところまで仕上げて、家に帰った。 あとで考えてみれば、朝からのどが変だった。 帰ってからはとりあえず晩御飯を食べたが、おなかがすいているのに食べるのが思った以上にしんどくてだんだん食欲が無くなっていった。 ともかく、食べられるだけ食べたあと、両脇とおでこと首裏にひえピタを貼って、冬用の毛布をかぶって寝た。\n目が覚めると、3時間くらい経っていた。 汗だくだったので着替えて水分補給。 ポカリスエットがうすく感じる。 頭ががんがんしたが、テレビがついていたのでつい見てしまう。 レッドカーペットだった。笑うと頭が痛かった。 キリのいいところで（というか結局最後まで見たが）また寝た。\nそういえば、バファリンをポカリスエットで飲んだ。 次に目が覚めると2時過ぎ。 着替えて水分補給。相変わらずポカリスエットがうすい。 熱を測ると36.9度。 微妙な熱。薬が効いている感じ。 大分元気になってきていたのでシャワーを浴びて汗だけは流す。 おなかがすいていたのでカップめんと551のぶたまんを食す。かなり食欲が戻っていた。 というか、むしろおなかが一杯になって苦しかった。 で、おでこと首裏にひえピタを貼って寝た。 一応目覚ましをいつもの時間より早めに（お風呂に入りたかったので）セットした。 目覚ましで起きた。 熱を測ると36.6度。それにしてもポカリスエットがうすい。 少し頭は痛かったが、熱も下がったし、会社を休んでも仕事が後にずれるだけなので、シャワーを浴びて出勤。 不安だったので、会社近くのコンビニで2リットルのポカリスエットを購入。 やっぱりうすかった。 どれだけ塩分が足りなかったのかと。 実は今ものどが少し痛いが、ポカリスエットの飲みすぎじゃないのかと思うほど飲んだ24時間だった。\n","date":"2008-07-31T23:13:00+09:00","permalink":"https://www.nqou.net/2008/07/31/231300/","title":"体調不良とポカリスエット"},{"content":"TagSupplementalsプラグインは最近入れたばかりだが、ちゃんと使ってみようとドキュメントを見に行ったら、新しくなっていた。\nとりあえず、以前のブログでもやっていた「タグによる関連記事」を表示するようにしてみた。\nまずテンプレートで表示部分を作ります。 デザイン→テンプレートとして、画面右側のクイックフィルタから「テンプレートモジュール」を選び、「モジュールテンプレートを作成」します。 タイトル部分にはわかりやすいように「タグによる関連記事」と入れておきましょう。 このタイトルはインクルードする時に使います。 中身は以下のとおり。\n1 2 3 4 5 6 7 8 9 10 \u0026lt;div class=\u0026#34;trackbacks\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;trackbacks-header\u0026#34;\u0026gt;タグによる関連記事\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;MTRelatedEntries lastn=\u0026#34;10\u0026#34; weight=\u0026#34;idf\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026lt;$MTEntryPermalink$\u0026gt;\u0026#34;\u0026gt; \u0026lt;$MTEntryTitle$\u0026gt; \u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/MTRelatedEntries\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 本当は、classとかちゃんと作りたいところですが、面倒なので見栄えをトラックバックに合わせると言うことでお茶を濁しておきます。 lastnとかweightとかはマニュアルを見てお好みで。 次に、作ったテンプレートをインクルードします。 クイックフィルタから「アーカイブテンプレート」を選び、テンプレートの一覧から「ブログ記事」を選びます。 あまり深く考えずに「ブログ記事の詳細」と「トラックバック」の間に、先ほど作ったテンプレートをインクルードします。\n1 2 3 4 5 6 \u0026lt;$MTInclude module=\u0026#34;ヘッダー\u0026#34; $\u0026gt; \u0026lt;$MTInclude module=\u0026#34;ブログ記事の詳細\u0026#34; $\u0026gt; \u0026lt;$MTInclude module=\u0026#34;タグによる関連記事\u0026#34; $\u0026gt; \u0026lt;$MTInclude module=\u0026#34;トラックバック\u0026#34; $\u0026gt; \u0026lt;$MTInclude module=\u0026#34;コメント\u0026#34; $\u0026gt; \u0026lt;$MTInclude module=\u0026#34;フッター\u0026#34; $\u0026gt; 大体こんな感じです。\n","date":"2008-07-30T00:50:00+09:00","permalink":"https://www.nqou.net/2008/07/30/005000/","title":"TagSupplementalsプラグインが更新されていました"},{"content":"管理規約というのは読んでもよくわからない。 わからないから守れない。 逆に考えて、守るため、守ってもらうためにはわかるようにすれば良い。\nでは、わかるようにするにはどうすればよいか？ 勉強会に参加してもらうようにすれば良い。\nでは、勉強会に参加してもらうにはどうすればよいか？ 参加して良いことがあれば良い。\nでは、どのようなことが「良いこと」か。 短絡的だが、プレゼントがもらえるとか。 子供連れでもOKにするとか。 なかなか難しいね。\n勉強会に行かない理由なんて、いくらでも出てきそうな気がする。\n","date":"2008-07-29T23:27:44+09:00","permalink":"https://www.nqou.net/2008/07/29/232744/","title":"管理規約の勉強会"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/perl use strict; use warnings; use POSIX; my @vars = (1, 0.999, 0.9, 0.1, -0.1, -0.9, -0.999, -1); foreach my $var (@vars) { print \u0026#34;Target is $var\\n\u0026#34;; print \u0026#34;ceil : \u0026#34;, ceil($var), \u0026#34;\\n\u0026#34;; print \u0026#34;floor : \u0026#34;, floor($var), \u0026#34;\\n\u0026#34;; print \u0026#34;int : \u0026#34;, int $var, \u0026#34;\\n\u0026#34;; } ","date":"2008-07-29T00:46:04+09:00","permalink":"https://www.nqou.net/2008/07/29/004604/","title":"Perlで切り上げ（ceil）と切り捨て（floor）を使う"},{"content":"Firefoxがバージョン3（今日の時点で3.0.1）になったので、アドオンとかプラグインとか少しずつ探していたところ、ブログに便利なアドオンを見つけました。 Make Linkというアドオンです。\nこの「独自のリンク形式」で、引用部分を作ってみました。 今回の引用は「楽々引用」ではなく、以下の設定で「Make Link」を使ったものです。\n1 2 3 4 \u0026lt;blockquote cite=\u0026#34;%url%\u0026#34; title=\u0026#34;%title%\u0026#34; class=\u0026#34;blockquote\u0026#34;\u0026gt; \u0026lt;p\u0026gt;%text%\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; \u0026lt;div class=\u0026#34;cite\u0026#34;\u0026gt;[\u0026lt;cite\u0026gt;\u0026lt;a href=\u0026#34;%url%\u0026#34;\u0026gt;%title%\u0026lt;/a\u0026gt;\u0026lt;/cite\u0026gt;]\u0026lt;/div\u0026gt; なかなかうまくいった。 ページのタイトルやURLを簡単に組み合わせて色々と作れるようなので、使い方次第で色々とできそうだ。 しばらくFirefoxを使ってみることにしようか。\n","date":"2008-07-27T01:57:08+09:00","permalink":"https://www.nqou.net/2008/07/27/015708/","title":"勝手にブラウザ選択、Firefoxが大きく前進"},{"content":" ","date":"2008-07-24T00:20:19+09:00","permalink":"https://www.nqou.net/2008/07/24/002019/","title":"最近Perlスクリプトを書いていて愕然とすること"},{"content":"現実逃避？ いえ、息抜きです。\nThe Golden Lore（ゴールデンロア）\nここ最近、本業が忙しくてまとまった時間が取れなかったのだが、息抜きに何かゲームがしたいと思った。 直接操作するのではなく、簡単な行動指針を入力するようなゲームならそんなに時間もかからないし面白そうだと。 そんなゲームがないのかなと思って探したら、ありました。 それが「ゴールデンロア」というゲーム。\n今現在、βテスト中ということで肝心の「簡単な行動指針」が入力できないので、キャラクターを作るだけで、あとは称号を変更するくらいしかすることがない。 それでもゲームなのかと思うのだが、思ったよりは楽しめる。 一日に1回、勝手に冒険に出て、その結果がメールで送られてくる。 最初のキャラクターは2回目の冒険で息を引き取った。 最初の戦いで即死なんて、明らかに敵が強すぎる。 色々と調べてみると、よくキャラクターが死ぬゲームらしい。 今日、二人目のキャラクターも2回目の冒険で死んだ。 無念だが、それをバネにして（？）三人目のキャラクターを登録した。\n","date":"2008-07-23T23:37:14+09:00","permalink":"https://www.nqou.net/2008/07/23/233714/","title":"ゲームらしからぬゲーム：The Golden Lore（ゴールデンロア）"},{"content":"そういえば、この前入れたプラグインの「InsertLink」だが、オフィシャルからのリンク先にあったバージョン1.21は、MT4.1では動かなかったらしい。 ブラウザを立ち上げなおしても機能が動いていないので配布元で調べてみるとMT4.1対応版が出ていた。\n早速使ってみたけど、過去記事へのリンクを作るのに、対象の記事をリストから選ぶことができるのは便利かも。\n","date":"2008-07-23T01:58:14+09:00","permalink":"https://www.nqou.net/2008/07/23/015814/","title":"オフィシャルからのリンク先が不具合ありのまま放置ってどうよ？"},{"content":"しばらく前から認識はしていたのだけど、サーバの仕様ということで放ってある問題がある。 携帯向けにShift_JISに変換して出力する、EUC-JPで書かれたスクリプトがあるのだが、それでMySQL5.1.11と今までのようにDBIを通じて書き込みを行うと、文字化けする、という問題だ。 しかし、CGI::Sessionを通じて同じデータベースの別テーブルに書き込んでいるほうは文字化けしないのだ。 漢字コードを指定するためには「SET NAMES ujis」というSQLを入れるといいらしいので、それをやってみたら、そこはうまくいった。 しかし、今度はもともと文字化けしていなかったほうが文字化けする。 データベースハンドルは同じものを使っているのだけど。 何がどうなんだろうねぇ。\n普通に考えて、CGI::Sessionのほうは、漢字コードを変換してデータベースに書き込んでいるんだろう。 でも、どこでそうなってるのか、ソースを読もうとして挫折。 で、今に至ると。\n","date":"2008-07-23T01:29:51+09:00","permalink":"https://www.nqou.net/2008/07/23/012951/","title":"EUC-JPで書き込むとMySQLで文字化けする？"},{"content":"相変わらず女性ボーカルなメタルバンドを狙って聴いています。\nクリプテリア\n全曲を聴いたわけではありませんが「BLOODANGEL\u0026rsquo;S CRY」の「The Promise」がなかなか良い感じです。\nディレイン\nこれまた全曲聴いたわけではありませんが「Lucidity」の「Sever」や「No Compliance」がなかなか良いです。 高音域の声色がゾッとするほど心に刺さります。\n","date":"2008-07-22T00:52:39+09:00","permalink":"https://www.nqou.net/2008/07/22/005239/","title":"ここ最近気になっているアーティスト"},{"content":"これってクリッカートレーニングのことですよ。\n上記のページで書かれているイルカの例は、おそらく「うまくやるための強化の原理」でも紹介されていることでしょう。 初めて犬を飼う時に、しつけについて色々と調べていた時期があって、クリッカートレーニングはそのときに見つけて知りました。\nマロンにこのトレーニングをやっていた時は、私がクリッカーを手に持つだけで、走って寄ってきたものでした。 動物の学習能力と、それを利用したトレーニング方法を編み出した著者をすごいなと思いました。 しかし、このトレーニング方法は、トレーニングする側の能力も要求されます。 犬を相手にする場合は、犬の動作を集中して見ておかなければなりません。 そして、常に学習させなければなりません。 同じ事を何度もしていると、すぐにマンネリ化してしまい新しい行動をおこなさなくなります。 そうなる前に、難しすぎず簡単すぎずという微妙な難易度の事をトレーニングするのはとても大変でした。 ちなみに、キキはクリッカーの音を怖がってしまってトレーニングになりませんでした。 ショコラには試したことがありません。\n","date":"2008-07-21T23:48:23+09:00","permalink":"https://www.nqou.net/2008/07/21/234823/","title":"コーチングとクリッカートレーニング"},{"content":"なんとなくプラグインを3つほど入れてみた。\nInsertLink RelatedEntries TagSupplementals といっても、とりあえずは導入だけ。 使ってみた感想はあとで書く予定。 ここのところあまり触っていなかったのだけど、ちょっと中身を見たら気分が乗ってきたというか。 そんな感じなのでどこまで使うかわからないけど。\nまずは、「InsertLink」。\n標準のリンクアシストはしょぼいので、機能を追加してみたいなと。\n続いて「RelatedEntries」。\nこれは以前挫折したプラグインかもしれないなと、今思った。 感想は追々。\n最後に「TagSupplementals」。\nタグはバージョン4になって大分こなれてきた感じはするけど、拡張できるものなら拡張して活用したいという感じ。\n","date":"2008-07-21T23:00:30+09:00","permalink":"https://www.nqou.net/2008/07/21/230030/","title":"久しぶりにプラグインでも触ってみる"},{"content":"むき出しの正義感は、一般的に考えられているよりも迷惑であることが多いです。\nというか、理事長という立場としては、気持ちはありがたいけれど、もう少しやり方を考えてほしいな～、と思うことが多いです。 先日の総会のときでもそうですが、細かい指摘事項は軽く流すことで、大きな指摘事項がより印象に残ると思うのです。 事の大小を区別せずに同じ調子で指摘されると、文句を言いたいだけなんじゃないかと思うのです。 それが、ものすごくもったいない、と思います。 私も含め、多くの人は「うるさい人だな」と思うだけで、心に届かないのではないかと思います。 管理会社の人ともそういう話になってしまいます。 もっとやり方、言い方を考えればいいのにってね。\n本当に、気持ちはわかるんですが、まだこのマンションには土壌ができていない。 正義感という種をまくのはまだ早いのです。\n私もそうでしたが、役員（しかもできれば理事長等の役職）を経験しないと、マンションの問題というのはなかなか実感できない。 管理会社がちゃんとやってくれている、という言葉も未だに聞きます。 （まあ、お金のやり取りを含めた事務手続きなどはきっちりとやってくれますが。） 管理会社としては、マンションの中から苦情が来ない限り、マンションを良くしようとかそういうことは思わないものです。 フロントの方は物件をいくつも抱えているわけですから、マンションごとに一つずつ問題点があれば物件数分の仕事が増えるわけです。 ノープレイノーミス。 それが管理会社のフロントとしては最も無難なすごし方です。\n一方、マンションの住民も気づいていても何も言わないものです。 ただ、こちらの方は多少意味が違います。 そもそも、管理組合とか理事会とかの存在自体を知らないか、あるいは自分とは関係の無い別世界のことのように感じている人が多いです。 だから意見があったとしても誰に言っていいのかわからない人が多いのではないかと思うようになりました。 何かの席で同席したときに「そういえば理事長なんですよね？」という問いかけから、実はというふうに何かを聞くことが時々あります。 前のマンションでもそうでしたが、意見箱を用意していても、気づいたことを紙に書いて投函してくれる方は非常に少ない。 でも、だからといって不満が無いわけではないし、マンションに問題が無いわけではない。 「書く」という事が非常に高いハードルになっているだけです。\n感じたことを紙に書いて投函する、というなんでもない事がなんでもないようにできる様になるにはまだまだ時間がかかりそうです。\n","date":"2008-07-21T01:13:53+09:00","permalink":"https://www.nqou.net/2008/07/21/011353/","title":"マンションに対する正義感と土壌"},{"content":"Windowsでエラーを無視してファイルをコピーするには結局これしかないんでしょうか。\nまあ、定型文みたいなものでしょうけど、頻繁に使うコマンドでもないので、とっさには出てこないですね。\n1 C:¥backup\u0026gt;xcopy /s /e /c /h g:¥*.* c:¥backup ディレクトリの構造ごとコピーするのは、GUIのエクスプローラのほうが秀でているわけですし、エラーを無視するオプションを（例えば右ドラッグ＆ドロップで）選択できたりすることは可能だと思うのですがね。 で、エラーがあったファイルはあとで画面に表示して、かつ、そのリストは名前をつけて保存できるようにする。 その程度のことはできると思うのですけどね。\n","date":"2008-07-21T00:18:06+09:00","permalink":"https://www.nqou.net/2008/07/21/001806/","title":"Windowsでエラーを無視してファイルをコピーするには"},{"content":" ","date":"2008-07-20T16:03:38+09:00","permalink":"https://www.nqou.net/2008/07/20/160338/","title":"ActivePerl 5.10.0Build1003の不具合"},{"content":"テンプレートモジュールの「ブログ記事のメタデータ」でabbrタグの閉じ忘れがあるのを何気なく発見。\n4行目\n1 \u0026lt;address class=\u0026#34;vcard author\u0026#34;\u0026gt;\u0026lt;$MTEntryAuthorLink show_hcard=\u0026#34;1\u0026#34;$\u0026gt;\u0026lt;/address\u0026gt; (\u0026lt;abbr class=\u0026#34;published\u0026#34; title=\u0026#34;\u0026lt;$MTEntryDate format_name=\u0026#34;iso8601\u0026#34;$\u0026gt;\u0026#34;\u0026gt;\u0026lt;$MTEntryDate format=\u0026#34;%x %X\u0026#34;$\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt;) \u0026lt;strong\u0026gt;\u0026lt;/abbr\u0026gt;\u0026lt;/strong\u0026gt; が追加部分。\n標準のテンプレートから変えた記憶が無いので、最初から抜けていたのかも。 もうすぐバージョンが4.2になるようなので、それでなおってなければ報告しようかな。\n","date":"2008-07-14T01:55:58+09:00","permalink":"https://www.nqou.net/2008/07/14/015558/","title":"タグの閉じ忘れを発見"},{"content":"今日は、妻が、どうしても関空に行きたい、というので仕方なく行ってきた。 バスで展望ホールに向かうと、そこで飛行機とは関係ないとは思うが、イベントをやっていた。 なにやら好みの絵が飾ってあったので、妻が飛行機と戯れている間に一通り見てまわった。\nう～ん。満足。 帰ってきてから調べてみると、ちゃんとオフィシャルサイトがあった。\nここのところ携帯の待受画像は「石原さとみ」ばかりなのだが、ちょっと変えてみようかなと。 どれにしようか悩むね。\n","date":"2008-07-14T01:16:25+09:00","permalink":"https://www.nqou.net/2008/07/14/011625/","title":"関空で銀河鉄道の夜"},{"content":"タバコを吸う人は面倒くさいことが嫌い、という証なのか。 それとも、その特徴は日本人全体に通じるのか。 タスポ関係の記事を何気なく見て、ふとそういうことを思った。\n","date":"2008-06-08T13:22:00+09:00","permalink":"https://www.nqou.net/2008/06/08/132200/","title":"日本人の特性？"},{"content":"成果目標ということで、色々な標準化、マニュアル化を目標に設定している。 今の上司がそういう系の仕事が好きなので（と推定）、そういう系の目標を立てているのだが。\n転勤して現在の勤務地になったとき、前任者からの引継ぎ事項の中に「建物点検チェック表」の作成というのがあった。 引継ぎといっても潤沢に時間があるわけでもなく、実質「引継書」の説明だけで、あとは棚に保管してある書類を調べ、わからないところは電話で訊く、というのが我が社のスタイル（？）だ。 その引継の中で「建物点検チェック表」については、法定点検をベースにして作る、というはなしだったので、法定点検の点検結果報告書を元にチェック表を作った。 作る前に、方向性を上司と相談したつもりだったが、話がかみ合わない。 あとで気づかされるが、この上司は放任主義で、詳細な指示をしないタイプだった。 ともかく、こうして建物点検の仕組みが一つ出来上がった。 その仕組みが自分の首を絞めることになるとは思ってもいなかった。\n点検チェック表は、誰が点検しても点検項目に漏れが無いように作るものだと理解している。 しかし、出来上がったチェック表は専門知識が無いと使えない代物だ。 それだけならまだ良いのだが、このチェック表は点検方法からすると、現場に持っていっても全く使えない代物になってしまった。\n何のためのチェック表を作ったのか？\nとはいえ、作ったものは使うしかしょうがなくて、点検から帰ってきてから報告書とともに作成することになった。 それだけではなく、チェック表（と呼ばれるもの）だけでは不具合がわかりにくいので、不具合一覧表も別で作成することになった。\n何のためのチェック表を作ったのか？\nもともと、清書のための書類は作りたくない、という上司の指導の下で作成したチェック表だったはずなのに、結果としては、報告書用に新しく書類を作ることになっている。 点検時に使用したチェック表を添付資料としてつけて報告する、という目的もあったのだが。 結局作成する書類が増えただけだった。\n残念。\n","date":"2008-06-02T19:40:14+09:00","permalink":"https://www.nqou.net/2008/06/02/194014/","title":"作った仕組みに縛られている"},{"content":"第33期の定期総会が終わりました。\n建物の裏口に当たる部分にスロープをつける、という共用部の変更は否決されました。 賛成票が4分の3に満たなかったためです。 しかし、それ以外はなかなか有意義な総会だったと思います。 なにより、集まった議決権の数が前回の総会よりも多くなったこと。これは重要だと思います。 当然目指すのは100%ですが、今後どんどんそれに近くなっていくように広報活動を続けていく必要があるでしょう。 それにしても、積極的に権利を放棄する方もいらっしゃるのが不思議です。 面倒だ、とか、うっかりして、とかではなく、出さない、と主張する方がいらっしゃる。 何が彼（彼女）たちをそうさせるのでしょうか。 理解に苦しみます。\nあと、議事進行は今回もまずい点がありましたが、前回よりはマシになったと思います。 私にも多少は会を御する力がついてきているのかもしれません。 総会に出席される方の中には、マンションを良くしよう、という思いが強すぎるせいか、理事会や管理会社に文句ばかり言っている方もいらっしゃいます。 仰っている内容は正論なのですが、一言二言多いので会場の雰囲気が険悪になります。 非常にもったいないことです。 誤字脱字の一つや二つには目をつぶってこそ、大きな指摘事項に効果があるのではないか、と思います。 それとも、単に私のことを嫌っているから小姑のように指摘されるのでしょうか？ また、過去の因縁関係があるらしく、非常に仲の悪い方々がいらっしゃいます。 お互いを暗に攻撃するような発言が時々見られました。 もっと紳士淑女らしい振る舞いも必要なのではありませんか、と言いたい。\nま、ともかく一仕事は終了しました。\n","date":"2008-06-01T17:41:58+09:00","permalink":"https://www.nqou.net/2008/06/01/174158/","title":"定期総会終了"},{"content":"仕組みとしての成果主義はわかるのだが、なかなかうまくいかないようだ。 私の勤め先では、数年前から成果主義の評価制度を試験実施している。\n社員の成長を促すのは当然だと思っていましたが、中にはそうでない会社もあるのでしょうか。 幸いにも私の勤め先では、何かあるとすぐに「OJT（On-the-Job Training）」という言葉を出してきます。 社員を集めての教育もありますが、通常は仕事をしながら先輩が後輩を教育、指導する事になっています。 しかし、評価制度の中には、指導する後輩がいても、ある一定の役職にならないと「指導」に対しての配点がありません。 つまり、後輩を指導しても、その指導に対しては成果が認められないのです。\n成果主義という割には仕事内容を把握していなさすぎです。\nさらに不思議なことに「指導」の配点がある役職には「知識」の配点がありません。 会社の考え方としては「ある役職になるためには、一定の知識があることが前提である」というのが理由らしいのですが、なんともがっかりな話です。 とてもそのレベルをクリアしているとは思えない方もいらっしゃるというのに。\n評価される側としては「公平」に評価されることを望みます。 つまり、絶対的な評価基準が不可欠です。\nしかし、残念ながら「評価の指標をあえて曖昧にしている」のが我が社の制度です。 評価基準は評価者の裁量に任されていて、まず自己評価した結果を提出し、それによって面談をして、その結果により最終の評価をされることになります。 面談では「評価される人が納得いくまで、評価する人が理由を説明する」というのが趣旨です。 評価者と被評価者の間に信頼関係があれば非常によい制度ともいえます。 そして、それが狙いであることも、また、理解できます。 しかし、残念ながら、私たちの部門ではその信頼関係を築こうとすらしない（あるいは、築き方がわからない）方もいます。 もっと前にこの制度になっていれば、その方は評価側にはなれなかっただろう、というのが、共通の見解です。 また、その延長として、成果だけでなくプロセスも評価する、というのが、従来の成果主義とは違うところだというのですが。 極端な話、結果が出なくても残業を沢山していれば「頑張っている」として評価されるのであれば、結果的に成果主義というのは名前だけで、評価方法は変わっていないことになります。 その名前だけ成果主義は、この4月から正式に実施されることになりました。\n未来に向けて、評価する際のポイントを引用しておきます。 私自身、いつ必要になるかはわかりませんが。\n","date":"2008-05-31T09:00:53+09:00","permalink":"https://www.nqou.net/2008/05/31/090053/","title":"名前だけ成果主義"},{"content":"次世代といいながら、実は既に実用化されている次世代のブラウザがある。 それは、一度アンインストールしたブラウザだった。\n「Apple Software Update」で、ついインストールしていた「Safari」が、現存する安定版の次世代ブラウザなのだ。 使わないのでアンインストールしていたのだが、先ほどインストールしなおした。\n確かに言われてみれば表示が速い。 ただ、あくまでMacのスタイルを貫いているからなのか、色使いやフォントに違和感がある。 まあ慣れだろうが。 しかし、速いとは言っても使っている機能が使えないのは困る。\nブログ用に「楽々引用」を使っているのだが、これはコンテキストメニューから使うものなので、なんとかIE系にも頑張ってもらって、Sleipnirを使うか。 Safariの右クリックを拡張するツールか何かがあればいいのだけど。\n記事によると、次世代IEはかなり先になりそうだ。 とりあえず、この記事はSleipnirで引用しながらSafariで書いてます。\n","date":"2008-05-18T03:07:30+09:00","permalink":"https://www.nqou.net/2008/05/18/030730/","title":"速度で選ぶ次世代ブラウザ"},{"content":"ブログ上のサンプルをウェブサービスというのもどうかなとは思うけど。 十分にサービスです。\n","date":"2008-05-18T02:13:30+09:00","permalink":"https://www.nqou.net/2008/05/18/021330/","title":"faviconを作るウェブサービス"},{"content":"理事会で議長を務めながら、いつも考えていた。 もっとうまく会議を進める方法が無いのかと。\n応急処置的にホワイトボードを使おうと思ったが、あいにく小さなものしかなく、結局この技は使えなかった。 そこで、紹介されていた本「すごい会議－短期間で会社が劇的に変わる！」を読んでみる事にした。 そして、その本でコーチングという手法を知ることになる。 といっても、会議ですぐに使えたわけではないけれど、その中で一つだけインストールされたことがある。\n「何故○○と思う？」ではなく「どのようにすれば○○と思う？」というように質問をすることだ。\nそれ以来、コーチングという手法に興味が出てきて、色々と見て回るようになった。\nコーチングされてみたいと思った。\n","date":"2008-05-10T19:57:57+09:00","permalink":"https://www.nqou.net/2008/05/10/195757/","title":"コーチングとコミュニケーション"},{"content":"答えから言うと意識したことがありません。 むしろ全てにおいて逆行している気がしました。\n構想を練るときにあーだこーだ言われ計画倒れどころか構想倒れになってしまうこともよくあります。 で、計画段階では、詳細は実施してから考えよう、という甘い言葉に詰めの甘い計画のまま見切り発車をしてしまう。 そして、いざ実施してみると色々と問題が発生してくる。 まあ、当然といえば当然。 自分自身が反面教師であります。\n今後はこの思考の切り替えを周囲に植えつけるように行動するようにしたいですね。\n","date":"2008-05-10T18:53:01+09:00","permalink":"https://www.nqou.net/2008/05/10/185301/","title":"思考の使い分け"},{"content":"読んでいて共感した。 逆の意味で。\nハードウェアだけでなくソフトウェアもそう。 使えてこそ便利な道具なのだ。 しかし、WordやAccessくらい使えてもよいのではないか？ 目の前にパソコンがあっても、Excelとゲームにしか使わないのなら意味が無い。\n私が勤める会社は、パソコンの導入はそれなりに早かった。 しかし、それはワープロの代用品という位置づけのようだった。 大半の人は従来からのスプレッドシートの代用であるExcelを使うのが精一杯。 一部でWordで文書を作る人もいたが、文書はワープロ、表などはExcelというのがほとんどだった。\nそれがほぼ10年前の話。 3年ほど前に労務管理をネットワークを介して行うようになった。 その後も総務や経理に関係する一部だけIT化が急速に進んだ。 しかし、他の状況は昔とほとんど変わらない。 大半の人はExcelは使えるがWordは難しいと言っている。 ワープロが無いので、そういう人たちはExcelで議事録や報告書を作っている。 先日、文書の様式が（改めて？）制定されたが、報告書や議事録はExcel用も用意されていた。 Word用も罫線だらけで、印刷してから手書きするのかと思うほどだった。レイアウトを変えるなといわれるのなら、Excel用で作ったほうが遥かにマシだ。 Wordで書く文書に、何故罫線が必要なのか？\nデータベースにしてもそう。 Excelを万能ソフトと思っているからか、それとも単純にExcelしか使えないからか、データベースをExcelで作ろうとしている。 話を聞けば顧客データベースで、いずれ全社で情報を共有したいとのこと。 他の支店で同じ会社と取引があってもわからないので、それを解消したい、という話なのだが。 Excelはファイルの共有に向いていない。 全社で使うとした場合、対象は300人程度だろうが、同時に使用する可能性はかなり高いはずだ。 少し前（？）にExcelをベースにした予算管理のシステムが作られていた。 予算入力の時期はみんな忙しい。 そんな時期に「保存できない」という問題が頻発していたのは誰もが知っているはずなのに。 本格的に実施してから使い物にならないシステムだったことがわかっても遅い。 素直にプロに頼むか、Accessで作るように提案してみたが、無駄でした。\nそんな出来事があったので、私は情報システム部門へ職種変更を希望しました。\n","date":"2008-05-10T18:41:16+09:00","permalink":"https://www.nqou.net/2008/05/10/184116/","title":"技術の意味"},{"content":"目の付け所がいいですよね。\nWindowsのデスクトップにはWebを表示することができます。 携帯がパソコン化してきているのでしょう。 携帯はiモードをはじめとする携帯仕様のページばかりでなく、フルブラウザも使えるようになっています。 パソコンに既にあるものをどんどん取り入れるのはそれはそれでいいと思います。 しかし、パソコンでも軽量重視のモバイルノートがあるわけですから、携帯電話には携帯電話独自の何かを考えていくのも一つの方向性ではないでしょうか？\n","date":"2008-05-10T17:20:28+09:00","permalink":"https://www.nqou.net/2008/05/10/172028/","title":"携帯の待受画面の活用"},{"content":"「知らぬが仏」という言葉がありますが、知らないからこそ平気なこともあります。\nマンション管理を考えた時、管理会社のフロントは大切です。 そのフロントの対応の良し悪しは、これまでどんなフロントに会ってきたかで印象はずいぶんと違うものになるでしょう。 担当によって能力が違うのは仕方がありません。 しかし、同じ管理会社に委託しているわけですから、担当者が変わったとしても同じ質を求めるのは当然のことです。 逆に、同じ管理会社に敏腕のフロントがいるという噂を聞いたとき、そのフロントに変わってほしいという思いを抱くのもしかたないことでしょう。\nただ、会社の場合はそう割り切れるものでもありません。\n絶対値をクリアしていても、一番でない限り評価は低くなってしまいがちです。 比較をするなら、自分自身の中に基準を持っておき、それと比較するようにしたいですね。\n","date":"2008-05-10T12:08:58+09:00","permalink":"https://www.nqou.net/2008/05/10/120858/","title":"知識と欲求の関係"},{"content":" 1 2 Setting environment for using Microsoft Visual Studio 2008 x86 tools. C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\u0026gt; 1 2 3 4 5 6 C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\u0026gt;d: D:\\\u0026gt;cd usr\\bin D:\\usr\\bin\u0026gt;cpan cpan shell -- CPAN exploration and modules installation (v1.9205) ReadLine support enabled cpan[1]\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 cpan[1]\u0026gt; o conf init Use of uninitialized value $_ in transliteration (tr///) at D:/usr/lib/File/Spec /Win32.pm line 141. Use of uninitialized value $_ in pattern match (m//) at D:/usr/lib/File/Spec/Win 32.pm line 143. Use of uninitialized value $_ in transliteration (tr///) at D:/usr/lib/File/Spec /Win32.pm line 141. Use of uninitialized value $_ in pattern match (m//) at D:/usr/lib/File/Spec/Win 32.pm line 143. CPAN is the world-wide archive of perl resources. It consists of about 300 sites that all replicate the same contents around the globe. Many countries have at least one CPAN site already. The resources found on CPAN are easily accessible with the CPAN.pm module. If you want to use CPAN.pm, lots of things have to be configured. Fortunately, most of them can be determined automatically. If you prefer the automatic configuration, answer \u0026#39;yes\u0026#39; below. If you prefer to enter a dialog instead, you can answer \u0026#39;no\u0026#39; to this question and I\u0026#39;ll let you configure in small steps one thing after the other. (Note: you can revisit this dialog anytime later by typing \u0026#39;o conf init\u0026#39; at the cpan prompt.) Would you like me to configure as much as possible automatically? [yes] 1 2 3 4 Autoconfigured everything but \u0026#39;urllist\u0026#39;. Please call \u0026#39;o conf init urllist\u0026#39; to configure your CPAN server(s) now! commit: wrote \u0026#39;D:\\usr\\lib/CPAN/Config.pm\u0026#39; cpan[2]\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 cpan[2]\u0026gt; o conf init urllist Use of uninitialized value $_ in transliteration (tr///) at D:/usr/lib/File/Spec /Win32.pm line 141. Use of uninitialized value $_ in pattern match (m//) at D:/usr/lib/File/Spec/Win 32.pm line 143. Use of uninitialized value $_ in transliteration (tr///) at D:/usr/lib/File/Spec /Win32.pm line 141. Use of uninitialized value $_ in pattern match (m//) at D:/usr/lib/File/Spec/Win 32.pm line 143. Found D:\\usr\\cpan\\sources\\MIRRORED.BY as of Tue May 6 10:14:04 2008 I\u0026#39;d use that as a database of CPAN sites. If that is OK for you, please answer \u0026#39;y\u0026#39;, but if you want me to get a new database now, please answer \u0026#39;n\u0026#39; to the following question. Shall I use the local database in D:\\usr\\cpan\\sources\\MIRRORED.BY? [y] Now we need to know where your favorite CPAN sites are located. Push a few sites onto the array (just in case the first on the array won\u0026#39;t work). If you are mirroring CPAN to your local workstation, specify a file: URL. First, pick a nearby continent and country by typing in the number(s) in front of the item(s) you want to select. You can pick several of each, separated by spaces. Then, you will be presented with a list of URLs of CPAN mirrors in the countries you selected, along with previously selected URLs. Select some of those URLs, or just keep the old list. Finally, you will be prompted for any extra URLs -- file:, ftp:, or http: -- that host a CPAN mirror. (1) Africa (2) Asia (3) Central America (4) Europe (5) North America (6) Oceania (7) South America (8) (edit previous picks) Select your continent (or several nearby continents) [8] 2 (1) China (2) Hong Kong (3) Indonesia (4) Israel (5) Japan (6) Korea (7) Pakistan (8) Republic of Korea (9) Russia (10) Saudi Arabia (11) Singapore (12) Taiwan (13) Thailand (14) Turkey (15) (edit previous picks) Select your country (or several nearby countries) [15] 5 (1) ftp://ftp.dti.ad.jp/pub/lang/CPAN/ (previous pick) (2) ftp://ftp.jaist.ac.jp/pub/CPAN/ (previous pick) (3) ftp://ftp.kddilabs.jp/CPAN/ (previous pick) (4) ftp://ftp.nara.wide.ad.jp/pub/CPAN/ (previous pick) (5) ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/ (previous pick) (6) ftp://ftp.u-aizu.ac.jp/pub/CPAN (previous pick) (7) ftp://ftp.yz.yamagata-u.ac.jp/pub/lang/cpan/ (previous pick) (8) http://ppm.activestate.com/CPAN (previous pick) (9) http://cpan.perl.org (previous pick) Select as many URLs as you like (by number), put them on one line, separated by blanks, hyphenated ranges allowed e.g. \u0026#39;1 4 5\u0026#39; or \u0026#39;7 1-4 8\u0026#39; (or just hit RETURN to keep your previous picks) [1 2 3 4 5 6 7 8 9] 1-9 Enter another URL or RETURN to quit: [] New set of picks: ftp://ftp.dti.ad.jp/pub/lang/CPAN/ ftp://ftp.jaist.ac.jp/pub/CPAN/ ftp://ftp.kddilabs.jp/CPAN/ ftp://ftp.nara.wide.ad.jp/pub/CPAN/ ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/ ftp://ftp.u-aizu.ac.jp/pub/CPAN ftp://ftp.yz.yamagata-u.ac.jp/pub/lang/cpan/ http://ppm.activestate.com/CPAN http://cpan.perl.org Please remember to call \u0026#39;o conf commit\u0026#39; to make the config permanent! cpan[3]\u0026gt; 1 2 3 cpan[3]\u0026gt; o conf commit commit: wrote \u0026#39;D:\\usr\\lib/CPAN/Config.pm\u0026#39; cpan[4]\u0026gt; 1 2 # if ($Config{ivsize} == 4 \u0026amp;\u0026amp; $Config{cc} eq \u0026#39;cl\u0026#39; and $Config{ccversion} =~ /^(\\d+)/ and $1 \u0026gt;= 14) if ($Config{ivsize} == 4 \u0026amp;\u0026amp; $Config{cc} eq \u0026#39;cl\u0026#39;) ","date":"2008-05-06T20:28:52+09:00","permalink":"https://www.nqou.net/2008/05/06/202852/","title":"ActivePerl(5.10.0 Build 1002)でcpanを本気で使いたかった"},{"content":"記事を見て「ん？」と思った。\niTunesのデータ移行をしたときにNTFSでも共有が出来ていた。 Windows（XP）でUSBの外付けHDDをNTFSでフォーマットし、そのHDDにデータをコピー。 で、それをMac（10.5.2）で普通に読み込めた。 Intel Macだから？ データの移行自体は「Peace Pipe: Windows から Mac へ iTunes のデータ移行 [mac]」を参考にした。\n","date":"2008-05-05T13:07:01+09:00","permalink":"https://www.nqou.net/2008/05/05/130701/","title":"NTFSでもMacとWindowsの共有ができた"},{"content":"何かを始めるとき、心構えがすべての始まりです。\n人前で話をするプロでも本番前は微妙に緊張するのでしょう。 しかし、物事にはコツがあるのですね。\nある意味開き直りの部分もありますが、ちょっとしたコツでうまくいくようになるのはよくわかります。 プレゼンテーションだけでなく、いろいろな人と話すときにも役立つようなコツですね。\n","date":"2008-05-05T01:00:07+09:00","permalink":"https://www.nqou.net/2008/05/05/010007/","title":"プレゼンの心構え"},{"content":"脇役よりも主役が良いに決まっている。 多くの人がそう思っているのではないでしょうか？\n思っていても脇役に徹するというのはなかなか難しいと思う。 しかし、しばらく前に流行ったSMAPの有名な歌にもあるように「世界でひとつだけの花」が必要な時代になってきているのかもしれない。\n","date":"2008-05-04T23:19:59+09:00","permalink":"https://www.nqou.net/2008/05/04/231959/","title":"名脇役の時代がやってきた"},{"content":"モチベーションを維持するのはスポーツには欠かせない。 そのテクニックを仕事にも活かすやり方。\n私自身はスポーツにはあまり興味が無いのでそれほどでもないですが、他人に説明するときにわかりやすい。\n","date":"2008-05-04T23:09:15+09:00","permalink":"https://www.nqou.net/2008/05/04/230915/","title":"モチベーションを掻き立てる仕組みをスポーツから考える"},{"content":"私の場合は、プログラムを共同で作ることはないので実感はないが、大勢で作る場合は、まさに建物工事と同じだろう。\n建物の工事で問題なのは、結構な確率でやったもの勝ち、な感があるところ。 やはり、この分野も説明責任というのが必要なのではないかと。 工事する側としては工事する側の常識というのがありますので、適当に端折るわけです。 ちゃんと説明していないのに工事をやってしまい、発注者から変えてほしいと言われた時に「やり直しだからお金がかかる」というのは、結果的に、工事する側の常識を発注者に押し付けている、という事になりますよね。 決して悪意があってやっているわけではないでしょうが、もう少しどうにかしないといけないでしょうね。\n図面だけではどうしてもわかり辛い所がある。 なので、細かい図面を作ってもらってそれを確認するわけですが、図面というのは作るのにも結構手間がかかるものなので、現場の代理人がしっかりとした人じゃないと図面が後手にまわります。 図面が手元に来たころには、すでに完成している、ということもあったり、また、完成していなくても部品ができてしまっていて変更ができない、ということもあります。 つまり、やり直しになるので製作時間とお金がかかります。 まあ、そういうことが無いように、事前に厳しく言って（通知して）おく必要があるのですが。 発注するすべての人がそれが出来るわけではないですよ。\n","date":"2008-05-02T20:39:58+09:00","permalink":"https://www.nqou.net/2008/05/02/203958/","title":"簡単に修正がきかない事の問題点"},{"content":"6月の最初の日曜日に現在住んでいるマンションの定期総会を実施する予定です。 その前に、3月末に以前住んでいたマンションの定期総会に出席しました。 輪番制にして5期目になるでしょうか。 総戸数が31で、役員は5人、その内1人が留任するわけですから、毎年4人が新しく役員になるわけです。 輪番制になる前の役員を除けば、7期で一周する計算です。 手元の資料によると、今期の役員を除いて未経験の家は後5軒です。 来期は現状のままいけますが、来期のうちにシステムを考えないと、2010年の3月に行われるであろう定期総会で役員のなり手がいなくなってしまいます。\nこのマンションでは、私が理事長をやっていた時にした約束があります。\n以前理事長をやっていたマンションは、31戸で役員が5人。 候補者に困って輪番制を導入したものの、うまく稼動しているのかよくわからない。 先日、総会に出席したが、新旧役員以外は私とあと一人だけ。 ただ「理事長は、監事として次期役員に再選するよう努める」という条件は守られているようです。 マンション管理についての情報収集\n今期もきっちりと守られていました。一応は機能しているようです。\nしかし、実際には少しずつほころびが出来ています。 2年ほど前にフロントマンが変わりました。 丁度フロントマンが変わってから3年が経ったでしょうか。 今の管理会社になってから3人目になります。\nオブザーバー制度ということで、役員経験者には理事会の開催案内を送付していましたが、それがいつの間にかなくなりました。 前期の理事会でそういう決定があったのだと思うことにしました。\n議事録を全戸に配布することにしていましたが、それがなくなりました。 特に個人情報の関係で管理会社も神経質になっていることもあり、これも前期の理事会で決まったのだと思うことにしました。\nしかし、総会で確認したところ、そのような事実は無く、ただ単にフロント同士の引継ぎが不足していたことに尽きます。 先日の総会でそれが発覚しました。\nやはり、「管理会社の価値は担当者で決まる」なのです。 管理会社変更のときは、決して手を抜いて管理をするような会社ではありませんでした。\nしかし、担当者が変わるごとに担当者（管理会社）の熱意は薄れていきました。\n結局、建設当時からの問題である「自転車置き場」についてもいまだ解決できていません。 管理費、修繕積立金の値上げについても、何も変わっていません。値上げしなければいざという時に一時金として支払うしか方法がないのに、です。\nそして気づきました。 「外部の目」でみると、こんなにもよく見えるものかと。 理事長に対して問い詰めたくなるものなのかと。\n私も、今のマンションでは色々と叩かれています。 自分勝手で強引だ、口ばっかりで行動が伴わない、など。\n前者の例だと、NPO法人に加入したい、という話を理事にちゃんと理解を得られないまま総会に諮ったことがありました。 そのNPO法人は、略称で「ＮＰＯ集改センター」といい、 管理組合会員となることで、顧問を雇うよりは安く知恵を借りることが出来ます。 また、管理会社に対しては根拠を持った提案・指示が出来るようになる、という利点もあります。 説明してもあまりピンと来ないのは、管理会社がいるのに「知恵のある第三者」が必要な理由がわからないからだと思います。 しかし、総会で反対意見が多かったため、希望者を募った上で説明会を開き、その上で改めて理事会で決議をすることにしました。 結果的に、「管理会社には専門家が沢山いるのだから、そちらを活用したらどうか」という、私からすれば根本的に論点の違う意見に賛同者が多く、加入は（しばらくは）見送ることになりました。\n後者の例では、コミュニティ便りという名前の管理組合報を発行したことがありました。 毎月発行していましたが、第6号を未だに（前号から半年ほど経っています）発行していません。 あと、皆の意見を募集しておきながら、その意見書に回答をしない、という事もありました。 管理組合への意見に対して、書いた本人宛に回答する必要性を感じていないため、私からすれば当然のことでした。 回答は管理組合全体に対して、理事会の活動として回答するものだと思っています。 しかし、書いた本人は「書いた本人宛に回答しないと、名前を書いた意味が無い」という意見を書いてきました。 意見には部屋番号と氏名を明記することを条件としていましたが、それは不明な部分があった場合に質問を行うことと、変な意見を防止することが大きな目的であり、回答する先を考慮したものではありません。 結局、最初の質問から半年後に本人宛に回答しました。 その間、回答が無いという苦情が頻繁に寄せられていました。 私としては理事会の活動としてでなく、回答書を作るためだけの検討が必要になったのは不本意でした。\n私自身、この状況と、そう言いたくなる気持ちを理解できます。\nそれは、冒頭にも書いた、私自身が以前住んでいたマンションで、私が行っている事とあまり変わりません。 第三者の立場で見ると、私だったらもっとうまく出来た、という気持ちを抱いてしまうのだと思います。\n","date":"2008-05-02T19:48:41+09:00","permalink":"https://www.nqou.net/2008/05/02/194841/","title":"近づく定期総会"},{"content":"トランス脂肪酸の危険性については何度も聞くのですが、それでも食べてしまうのは何故でしょうか？\n記事を探せばいろいろと出てきます。\nプラスチックを食品として売っていれば、いずれ製造者責任を問われる事になると思うのですが、どうなのでしょう？ いくら規制されていないとはいえ、多くの国で使用禁止に向かっているものを「飽食」と言われている日本で使う必要があるのでしょうか？ という風に思うのですが。 冷静に考えると、実験に使ったマーガリンと、普段口にしているマーガリンがまったく同じものなのか、という疑問もあります。 家庭ではこの手の実験はしたくはありませんが、普段使っているものがどのくらいプラスチックなのか確かめてみたくなります。\n","date":"2008-04-15T00:36:27+09:00","permalink":"https://www.nqou.net/2008/04/15/003627/","title":"マーガリン＝おいしいプラスチック"},{"content":"「一期一会」という言葉はふさわしくはないかもしれないが、その言葉を感じずにいられない。\n部下から上司を見ていると、確かにそういう風に見える。 私自身が上司と接している間が、私にとって上司のすべてなわけで。 まあ、逆もまた真なり、とは思います。 たまたま部下がサボっているときに上司に見つかったりすると「いつもサボっている」と思われるわけです。 いや、別に私のことってわけでは。\n","date":"2008-04-15T00:07:44+09:00","permalink":"https://www.nqou.net/2008/04/15/000744/","title":"上司と部下と偶然"},{"content":"書評を読んでいて気になったので。 まだ読んではないけれど。\n「心構えが変わると人生が変わる。」という言葉がある。 時には考えることをやめて、人生が変わると信じて、心構えを変えてみよう。\n","date":"2008-04-14T23:51:34+09:00","permalink":"https://www.nqou.net/2008/04/14/235134/","title":"仕事が感動に変わる、五つの心構え"},{"content":"ここ最近、エスプレッソマシンを手に入れたこともあって、コーヒーネタに少し敏感になっている。\n","date":"2008-04-08T20:14:14+09:00","permalink":"https://www.nqou.net/2008/04/08/201414/","title":"思わず淹れてみたくなるコーヒー"},{"content":"人は成長する。 そして、ある程度成長すると思考などがある程度固まって安定（あるいは成熟）する。 それは会社も同じ。\nNOVAは成長を目指した会社といえる。 携帯電話の事業でいうとsoftbankも同じだろう。 後から参入するには、それにふさわしい方法がある。 その賛否はともかくとして、だが。\n一方こちらは安定した、おそらく収支もバランスの取れている会社。 地味だが、講師は今も安心して働いているだろう。 しかし、このスクールもはじめからバランスが取れていたわけではないだろう。 はじめのうちは生徒数も少なかったに違いない。 ある程度生徒が集まるようになってから「成長が望めない」状態に落ち着いたのではないだろうか？ 教育についての考察がある。\n成長社会には成長社会に適した教育があった。 ということは、成熟社会には成熟社会に適した教育があるのではないか。 普遍的に良い教育というのはなくて、その時々に応じてふさわしい教育がある。 十分成熟しているのに、無理に成長しようとするから歪みが出てくる。 成熟しているかどうかを見極めることが肝要だと思った。\n","date":"2008-04-08T19:55:25+09:00","permalink":"https://www.nqou.net/2008/04/08/195525/","title":"成長と安定（あるいは成熟）"},{"content":"しばらく前から、外部へのリンクにマウスをあわせると、リンク先のサムネイルを表示するようにした。 それが「リンク先チラ見サービス」だ。\nインストールはJavaScriptを書くだけなのでとても簡単。 このサイトは、以前「ブラウザの画面をキャプチャする方法」でも紹介したサイトだった。\n","date":"2008-04-08T00:53:23+09:00","permalink":"https://www.nqou.net/2008/04/08/005323/","title":"リンク先チラ見サービス"},{"content":"わかっているつもりになっているが出来ていない事、だと思った。 未だに。\nはじめはこのタイトル「下足番を命じられたら、日本一の下足番になってみろ。」だけを見て、妙にムカッとして意気込んでやってきた。 しかし、引用している後半部分を見てはっとした。 今まで似たようなことを言われていたはずだったが、今回はこの言葉が意外なほど素直に腑に落ちた。 誰にでもできるような簡単な仕事ばかりやっても面白くない、とか、あんな仕事やこんな仕事がやりたいのにどうして雑用ばかりさせられるのか、とか。 働き始めのころは手が動く前に頭が拒否してしまっていた。 そういうことが続いていると、いざあんな仕事やこんな仕事をできるようになっても、その仕事に対する不満を見つけるようになっていた。 気がつけば仕事が嫌いになっていた。 文句ばかり言うようになっていた。 悪循環だ。 悪循環を断ち切るために、理不尽なことに対してもグッと耐えていきたいと思う。\n","date":"2008-04-08T00:40:12+09:00","permalink":"https://www.nqou.net/2008/04/08/004012/","title":"理不尽への対応策"},{"content":"タイトルとURLを取得するだけとはいえ、件数によっては面倒な作業ですが、ブラウザ（FireFox）を使えば意外と簡単にHTML化できるようです。\nこういった応用も、プラグインか何かで機能を追加・改良できるようになるといいですね。 FireFoxも使いこなせばいいブラウザだと思うのですが、今のところSleipnirのちょっとした機能が便利で離れられずにいます。 アドレスに入れたURLを新しいタブで開く、という単純なことなのですが、FireFoxの設定にはこれがない。 まあ、新しくタブを開いてからアドレスにURLを入れれば済む話なのですが。\n","date":"2008-03-16T13:26:06+09:00","permalink":"https://www.nqou.net/2008/03/16/132606/","title":"リンク集HTMLの手軽な作り方"},{"content":"仕事の関係で、最近完成したマンションを見に行って発見しました。 最近のエレベーターはペットにも対応していたんですね。\nペットと共存できるマンションでは、こういった配慮も必要でしょうね。 ちなみに、ペットボタンはかご内にしかないので、エレベーターを呼ぶときはペット専用ではなく、車イス用の呼び出しボタンを押すようです。\n","date":"2008-03-14T00:27:12+09:00","permalink":"https://www.nqou.net/2008/03/14/002712/","title":"エレベーターのペットボタン"},{"content":"そもそもの出会いは、新婚旅行のときに妻が買ったCDアルバムの「Deep Blue」であった。 その中でもタイトル曲はやはり良い。\nオフィシャル\nピアノって弾く人によって、何故ここまで音が違うのだろうか？ 家のピアノを弾いても感じることがある。 妻が弾くのと私が弾くのとでは、本当に同じ楽器なのか疑いたくなる。\n最近気になった曲。 まあ、タイトルが意味するところはよくわからないのだが。 Keiko Matsui - 1942, from Russia ","date":"2008-03-09T00:39:11+09:00","permalink":"https://www.nqou.net/2008/03/09/003911/","title":"Keiko Matsui"},{"content":"かなり前にTVで見て、気になったのだが、調べるのを忘れてしまっていた。 それが、たまたま見たニュース番組のBGMを聴いて思い出した。 という事で調べてその曲が「Sky!Sky!Sky!」ということを突き止めた。\nDEPAPEPE official website depapepe on Myspace ギターってこんなことができるのかと思ったわけです。 後ろに何人か隠れているんじゃないかと。\nとにかく衝撃の「Sky!Sky!Sky!」を。 1:39あたりから曲が始まります。 ","date":"2008-03-08T23:40:51+09:00","permalink":"https://www.nqou.net/2008/03/08/234051/","title":"DEPAPEPE"},{"content":"引用する時に適切にHTML化してコピーできる「楽々引用」を使うことにした。\nこのソフトは、性質上インストーラを使ってインストールすることになります。 が、しかし、一部の不幸な環境の方（あるいは、将来的に困ってしまう私）のために、インストーラを使わなくても使用できるようにする方法を記録します。\n使うのは、「IE MenuExt」というソフトです。\n以上で、インストールしたのと同じように使用できます。 必要に応じて、「4.1. quote.htmlの改造案」 [XHTMLでの引用方法] や「4.2. blockquote.htmlの改造案」 [XHTMLでの引用方法] を参考にして改造してみると良いでしょう。\n","date":"2008-03-07T00:32:50+09:00","permalink":"https://www.nqou.net/2008/03/07/003250/","title":"「楽々引用」を使ってみた"},{"content":"そうだったのか、というのはこういう事に気づいた時に出る言葉だと思った。\nとりあえず、MT4のスタイルシートの基本になるのは、「/mt-static/themes-base/blog.css」という事が「テンプレート」にある「スタイルシート」からわかるので、それを変更することにした。 preとblockquoteのスタイル変更\nMT3の時からこの手を使っていたのだが。 実は、style.cssに追記するだけでまったく問題なかったらしい。\n■StyleCatcherでのカスタマイズのしかた テンプレートのスタイルシートを開いて、テーマ用CSSの下の空いている部分に変更したい箇所を好きなだけ追加していきます。カスタマイズも簡単です。 WingMemo: StyleCatcher　テーマ配布サイト （3.2～3.3用）\n実際に試してみたが、ちゃんと有効になったし、スタイルを変更しても消えずに残っていた。 これからは、普通に変更しよう。\n","date":"2008-03-05T22:22:51+09:00","permalink":"https://www.nqou.net/2008/03/05/222251/","title":"スタイルシートの変更についてもっと良い方法"},{"content":"StyleCatcherの後継として、MT4で標準装備されたと思われる機能だが、MT3時代とは互換性がないようで、以前使っていた http://syoboi.com/movabletype/styles/library にあるスタイルはMT4には対応していませんでした。\nとりあえず、今後に期待を込めて、配布サイトをまとめたサイトを見つけたのでメモっておきます。 WingMemo: StyleCatcher　テーマ配布サイト\nあと、MT4に対応するためのメモも。 MT4 で StyleCatcher を使うための覚え書き - M+KBOX Weblog\n","date":"2008-03-05T00:23:33+09:00","permalink":"https://www.nqou.net/2008/03/05/002333/","title":"デザイン－スタイルの変更"},{"content":"もうひとつ気になったのが、コードを書くための「pre」と「code」のコンボと、「blockquote」の表現方法。 とりあえず、MT4のスタイルシートの基本になるのは、「/mt-static/themes-base/blog.css」という事が「テンプレート」にある「スタイルシート」からわかるので、それを変更することにした。 まずは、現在の「blog.css」を「blog.css.org」とかに変更してバックアップしておく。\nあとは、以前使っていたpre、code、blockquoteのcssを移植。 背景によっては色を変更したほうがいい場合もあるが、とりあえずよしとする。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 blockquote { color: #000; background-color: #eee; border: 1px solid #999; padding: 10px; } pre { color: #000; background-color: #ddd; padding: 20px 10px; width: 400px; border: 1px solid #888; overflow: scroll; } code { } 環境が変わると色々と面倒だね。\n","date":"2008-03-04T23:45:32+09:00","permalink":"https://www.nqou.net/2008/03/04/234532/","title":"preとblockquoteのスタイル変更"},{"content":"先ほど導入したBMQuoteプラグインのドキュメントを読んでみた。 変数の値を変更するだけで、拡張フォーマットでの引用ができるらしい。 が、そこで参考にしている「XHTMLでの引用方法」のリンクが切れていたので、検索してみた。\nなかなか勉強になる。 が、とりあえずは拡張フォーマットではなく、スタンダードで使うことにした。\nさて、BMQuoteのソースを見てみると、簡単に改造できそうだったので、少し変更することにしました。 変更するのは、「_make_html_std」というサブルーチン。 元のソースでは、テキストを選択していなくても「引用」を示す「blockquote」でマークアップされますが、それがいまいち気に入らなかったので。\n1 2 3 4 5 6 7 8 9 10 sub _make_html_std { my ($title, $url, $sel_text) = @_; my $html = \u0026lt;\u0026lt;\u0026#34;HTML\u0026#34;; \u0026lt;div class=\u0026#34;quotetitle\u0026#34;\u0026gt;\u0026lt;a title=\u0026#34;$title\u0026#34; href=\u0026#34;$url\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;$title\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; HTML $html .= \u0026lt;\u0026lt;\u0026#34;HTML\u0026#34; if $sel_text ne \u0026#34;\u0026#34;; \u0026lt;blockquote\u0026gt;$sel_text\u0026lt;/blockquote\u0026gt; HTML $html; } とりあえず、これで私は満足。 ただ、テスト中に問題が。 HTMLソースを記述している部分を引用すると、HTMLとして引用されてしまうので、そのあたりは実体参照に変更したほうが良いのかもしれません。 ということで、やっつけで手直し。\n1 2 3 4 5 6 7 8 9 10 11 12 13 use HTML::Entities; sub _make_html_std { my ($title, $url, $sel_text) = @_; my $html = \u0026lt;\u0026lt;\u0026#34;HTML\u0026#34;; \u0026lt;div class=\u0026#34;quotetitle\u0026#34;\u0026gt;\u0026lt;a title=\u0026#34;$title\u0026#34; href=\u0026#34;$url\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;$title\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\\n HTML $sel_text = encode_entities($sel_text, \u0026#39;\u0026lt;\u0026gt;\u0026amp;\u0026#34;\u0026#39;); $html .= \u0026lt;\u0026lt;\u0026#34;HTML\u0026#34; if $sel_text ne \u0026#34;\u0026#34;; \u0026lt;blockquote\u0026gt;$sel_text\u0026lt;/blockquote\u0026gt;\\n HTML $html; } これでとりあえず安心です。 まあ、あまりHTMLソースを引用することは無いとは思いますが。\n","date":"2008-03-04T23:15:07+09:00","permalink":"https://www.nqou.net/2008/03/04/231507/","title":"「BMQuoteプラグイン」を改造してみた"},{"content":"これも以前から使っていたプラグイン。\nはてなにしろGoogleにしろ、このサイトで検索するよりは便利になるので。\n","date":"2008-03-04T21:41:02+09:00","permalink":"https://www.nqou.net/2008/03/04/214102/","title":"HatenaBookmarker.ja_JP - Ogawa::Code - Trac"},{"content":"先ほどの記事のプラグインと同時に使うことでメモから記事にする時に便利。\nMT4にアップした時に「しまった」と思ったのだが、ちゃんと最新バージョンに対応するプラグインが出ていた。 どんどん環境が整っていきます。\n","date":"2008-03-04T21:31:17+09:00","permalink":"https://www.nqou.net/2008/03/04/213117/","title":"ブログ記事／ウェブページの日付を公開日時に自動変更するプラグイン（MT4.1／MTOS用） - The blog of H.Fujimoto"},{"content":"これでMT4でも手軽にメモができるようになりました。\n","date":"2008-03-04T21:13:47+09:00","permalink":"https://www.nqou.net/2008/03/04/211347/","title":"エムロジック放課後プロジェクト: BMQuote アーカイブ"},{"content":"MySpace大活躍です。\nLunatica - ホーム Lunatica | Listen and Stream Free Music, Albums, New Releases, Photos, Videos 貪るように色々と試聴中。 ボーカルがちょっと「アレ？」と思う事もあるのですが、声色は好きだし、曲がカッコイイ。\n少々長いですが。 Lunatica - Elements - Final Fantasy VII Advent Children Trib ","date":"2008-03-03T20:43:46+09:00","permalink":"https://www.nqou.net/2008/03/03/204346/","title":"Lunatica"},{"content":"気がついたら見つけていた、という雰囲気。 オフィシャル\nOfficial Kamelot Website – www.kamelot.com 試聴サイト\nKAMELOT | Listen and Stream Free Music, Albums, New Releases, Photos, Videos 昔の曲よりも、最近の曲の方が好み。\nオフィシャルが出している（と思われる）動画。 最新アルバムのタイトル曲のPV（と思われる）。 Kamelot - Ghost Opera オーケストラというか、ストリングスとメタルって相性が良いよね。\n","date":"2008-03-02T16:46:12+09:00","permalink":"https://www.nqou.net/2008/03/02/164612/","title":"Kamelot"},{"content":"何かと便利そうなサイト。\nFile2HD.com ウェブに埋め込まれているファイルをダウンロードできるようにしてくれる。 特にMyspaceでは重宝する。\n","date":"2008-03-01T00:35:27+09:00","permalink":"https://www.nqou.net/2008/03/01/003527/","title":"File2HD.com"},{"content":"Mobable Typeのバージョン4にトライする事にした。 まあ、何事もやってみないと何もわからないし。 それと、今回は記事の引越しはしないことにした。 気分的に、クリーンインストールをしてみたかったから。 というわけで。\n","date":"2008-02-28T01:39:21+09:00","permalink":"https://www.nqou.net/2008/02/28/013921/","title":"バージョンアップならびに引越し"},{"content":"簡単に手に入ったならここまで欲しいとは思わなかったかもしれない。\nというのが、今のところの感想だけど。\n試聴サイト\nGothica | Listen and Stream Free Music, Albums, New Releases, Photos, Videos レビューを見て気になったのだが、よく見ると中古だけしかなく、しかも値段が3万円。\nむむむむむ。\niTunesで検索するもアルバムが見つからない。\n困ったなぁ。\nとりあえずYouTubeで見つけた動画。\nしばらくはこれで我慢するしかないか。\n","date":"2008-02-27T16:40:48+09:00","permalink":"https://www.nqou.net/2008/02/27/164048/","title":"Gothica"},{"content":"試聴しかしていませんがなかなか良いです。\n試聴ができるサイト\nALL ENDS | Listen and Stream Free Music, Albums, New Releases, Photos, Videos \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;amazlet-link\u0026quot; style=\u0026quot;margin-top: 5px\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0011XT9XY/nqounet-22/ref=nosim/\u0026quot; name=\u0026quot;amazletlink\u0026quot; id=\u0026quot;amazletlink\u0026quot;\u0026gt;Amazon.co.jp で詳細を見る\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; 強烈な印象を与える感じではないのですが、程よく染み込むというか、聴いていて安心できるというか。\nとりあえずメモ。\n","date":"2008-02-25T22:07:17+09:00","permalink":"https://www.nqou.net/2008/02/25/220717/","title":"All Ends"},{"content":"「ひたすらgiveする事」の実例の一つ。\n浦田健の『金持ち大家さん』になるスーパーブログ:ベトナム旅行記２\nこういう話を聞くとほっとします。\nしかし、私が感じるこの世の中は、与え続けられても何も感じない人、も多いです。 もしかすると、与え続けられている事に気づかない人、かも知れませんが。\n特に社会的な恩恵などは、当たり前だと感じてしまっている。 どちらかというと、私もまだそちらに近いですが。\n","date":"2008-02-20T17:55:47+09:00","permalink":"https://www.nqou.net/2008/02/20/175547/","title":"与え続ける事がもたらす事"},{"content":"すごくシンプルでわかりやすい。\nなぜ、請求書処理が苦手か- 勝間和代公式ブログ: 私的なことがらを記録しよう!! 結果だけを見ると、当たり前のようにも見えますが、この過程が単純でわかりやすいため、根底の部分が見えやすい。 日常の苦手な事に気づくこと、がまず第一。\n","date":"2008-02-20T17:41:16+09:00","permalink":"https://www.nqou.net/2008/02/20/174116/","title":"苦手を克服する手順"},{"content":"OpenIDが改めて気になったので、資料になりそうなサイトを検索してみた。\nとりあえずは公式サイト（？）と開発用のWiki。\nOpenID Foundation website Developers | OpenID OpenID Wiki / FrontPage OpenID Wiki / Libraries 対応サービスのまとめサイトが作られているようなので、そちらも。\nおぷん: 日本語OpenID対応サービスまとめ 物は試しという事で、Yahoo JapanのOpenIDを作って試してみました。 YahooはOpenID2.0を採用しているということで、まだ未対応のサイトもあるようですが、上記のまとめサイトでは無事認証ができました。\n","date":"2008-02-17T01:40:34+09:00","permalink":"https://www.nqou.net/2008/02/17/014034/","title":"OpenIDについて些細なメモ"},{"content":"全然知らなかったよ。\nここに来て話題の新技術3つ（第14回） | 日経クロステック（xTECH）\nOpenID\nGoogle Social Graph API\n顔認識技術のWeb API\nついこの前、マッシュアップという言葉を覚えたのに、本当に色々なWebAPIが出てきているんですね。\n特にOpenIDなんかは、ゲームの登録に使ったりもできそうだし。 ちょっと興味あるね。\n","date":"2008-02-16T18:32:49+09:00","permalink":"https://www.nqou.net/2008/02/16/183249/","title":"話題の新技術"},{"content":"もう先週の話になるが、名古屋に行った時に妻の趣味に付き合ってセントレアに行ってきた。\n中部国際空港 セントレア その時に、偶然やっていたのが、「源氏物語 千年紀」というアートキルトミュージアム。\n「源氏物語」をテーマにしたキルト作品を展示ー中部国際空港セントレア - 名駅経済新聞 気になったのが「墨色（すみいろ）」という作品。\nミュージアムと言っても、センターピアガーデンという名前の廊下（それは言いすぎか）の中央部にある、分離帯のごとく建てられた柱状の物に、ポスターのように展示してあっただけだ。 「墨色」という作品を見て「源氏物語 千年紀」というイベントの存在を知ったのだが、そこが既にイベント会場だった。 最初はどこか別の場所でイベントをやっているのかと思った。\nこの「墨色」はデザイナーが「請井 且恵」さん、キルト製作者が「小高 紀子」さん。\n一応調べてみたけれど、あまりウェブでは活動してないようで。 おそらく請井さんのだと思われるサイトは見つけたが工事中。\nKATUE UKEI design　office\n小高さんについても、キルト教室を開いているような先生、という程度でウェブではよくわからない。\n…まあ、キルトに興味があるわけではないので特に問題はないとは言うものの。 「アートキルトミュージアム」と謳うのであれば、本物のキルトを展示してほしかったなとは思います。 少なくともポスターとは質感も違うはず。\n目に止まった作品があっただけに少し残念に思いました。\n","date":"2008-02-16T14:17:36+09:00","permalink":"https://www.nqou.net/2008/02/16/141736/","title":"続・インスピレーション"},{"content":"普通にポップスなのだけど。\nコンピレーションを聴いていて耳に止まった（？）曲。\n声がすごく魅力的。\n","date":"2008-02-16T04:35:03+09:00","permalink":"https://www.nqou.net/2008/02/16/043503/","title":"Jade Anderson"},{"content":"ゴシックメタル、もしくは、シンフォニックメタルつながり。\nこのアルバムに関しては、2曲目の「See Who I Am」や4曲目の「Stand My Ground」が気に入っています。\n","date":"2008-02-16T04:19:27+09:00","permalink":"https://www.nqou.net/2008/02/16/041927/","title":"Within Temptation"},{"content":"「ど忘れ」と言ってしまっていいのかわからないが、JavaScriptを久しぶりに使うと、色々と忘れていることに気がつく。\nJavaScript でゼロパディングするときは slice を使う - p4lifeのメモ\nここ最近、MovableTypeをブックマーク代わりに使うことにしている。 はてなブックマークも良いのだが、コメント欄が少ない。 あと、引用というか、どの部分をブックマークしたかったのかを記録するのが面倒。\nMovableTypeの場合、クイック投稿をブックマーク代わりに使うと便利な事がある。 ウェブページを見ながら気になった部分を選択して、その文字列上から右クリック→「QuickPost」とすれば、その選択された部分の文字列がエントリー部分に転写されるのだ。 もちろん、URLやページのタイトルも自動的にリンクするように入力される。 公開の状態のデフォルトを「未公開（下書き）」にしておけば、うっかり投稿してしまうこともない。\nただ、問題は記事を公開しようとした時に、投稿日時がブックマークしたときの日時になっていること。 この入力が面倒でJavaScriptにお世話になるか、と思ったのだが、MovableTypeの日付の様式がきっちりしているのでゼロパディングが必要になった。\nまあ、この問題を本質的に考えるのであれば、「現在の日時で投稿時間を更新する」というようなチェックボックスを作ってやればいいのだが。 なかなかそこまでするのは大変そうだし、しかも、アップグレードするたびに改造することになるのはいただけない。 かといって、プラグインを書こうと思ったら仕様から勉強しないと…。\nと、ここまで書いて、ふと検索してみるとまさにその機能のプラグインがありましたとさ。\nエントリーの投稿日を公開日に自動変更する（MT3.3対応版） - The blog of H.Fujimoto しかも、未公開から公開に変えた場合は自動で変更される、という願ってもない機能つき。 いやはや、頭が下がります。\n","date":"2008-02-14T15:24:00+09:00","permalink":"https://www.nqou.net/2008/02/14/152400/","title":"JavaScriptのゼロパディング"},{"content":"航空機をゲーム的に設計してみたい、という感じでメモをしたこと。\n作って戦わせる、というゲームも好きだね。\n新潟にいる航空機マニア（他にも電車やスヌーピーのマニアでもある）と話をした時に、ふと思いついて質問をした。\n「航空機をパラメータで表現するとしたら、どんな項目があると思う？」\nしかし、残念ながら意味不明な質問だったようで、大した回答は得られなかった。 それよりもイーグルのエンジン音や、整備士とコックピットとの通信を録音したCDを聞かせたくてうずうずしていたようだった。 お互いに新しい世界へ引っ張り込もうとしていたようだが、お互いに失敗したようだ。\nこのメモはその後に思い出して書きとめたのだが、本当に役に立たなさそうだ。 そんな時はWikipedia。\n航空機 - Wikipedia いや、むしろこっちか。\n戦闘機 - Wikipedia よし、戦闘機を作ろう。\n「戦闘機の性能を計る際、注目すべき点」\n速力、上昇力、航続力、運動性・安定性・操縦性、推力重量比、パワーウェイトレシオ、翼面荷重、翼幅荷重、火力、探知能力、隠密性、乗員\n…見れば見るほどマニアに訊かないとわからないことばかりだ。 ま、質問の答えとしては、こういうのを期待してたんだけどね。 これらの能力を決めるのは、戦闘機の構造であろう。\n「構造」\n素材、エンジン、主翼、主翼前縁延長 (LEX)、カナード、胴翼融合、兵装、電子機器、列線交換ユニット (LRU)\n素材やエンジンはともかく、主翼をデータ化するのはかなり難しそうだ。 主翼の選び方で、運動性・安定性・操縦性が大きく変わるようなので、主翼で機体の性格を決めることができる。 主翼さえうまくデータ化すれば、素材（重量）を選んで全長、全幅を設定（重量や翼面荷重、翼幅荷重）し、主翼を選んで（運動性・安定性・操縦性など）エンジンを積めば（速力）大まかに機体の性能が決まるね。\nあとは構造というか、オプションという雰囲気が強い。 兵装は火力に直接的に影響する。 カナードは上昇力や運動性が向上するが、隠密性が下がる。などなど。\n項目には無いけど、燃料タンクの容量を増やせば航続力と重量に影響がある。 重量は速力に影響を与えるし、速力はそのまま運動性や操縦性に影響を与える。 このように一つの値が、複雑に組み合わさっていく過程が楽しみだね。\n…完成すればね。\n","date":"2008-02-12T15:57:23+09:00","permalink":"https://www.nqou.net/2008/02/12/155723/","title":"ゲームネタ：航空機を作ろう"},{"content":"ゲームを作っていると、なんとなくゲームのネタを思いついたりする。 作っているゲームのシステムと相容れないことも思いついてしまうので、どうしようかと悩んで、とりあえずメモしてあったものを記事にしてみる。\nイメージはFF6の魔石システムに近い、というか、これだけだと物が違うだけでそのままかも。\n大体のRPGでは、クラス（職業）によって装備品に制限をかけられたりする。 戦士は重い鎧も装備できるが、魔法使いはローブなどの軽い装備しか装備できない、とか。 あと、僧侶は刃物を装備できない、とか。\nそれを逆に考えてみる。\nなんでも装備できるが、魔法使いのような格好をしていたら、魔法使いのように成長する、というように。 重い鎧と長い刃物を装備して戦えば力や体力が上がり、軽い装備と杖を装備して戦えば魔法の力や精神力が上がる、とか。\n具体的には、装備品ごとにパラメータの成長値を設定しておく。隠しステータスにするほうが面白そうだが、その場合は防御力や攻撃力から想定されるような値にするほうが良いだろう。 成長の仕方は、装備品の値とキャラクターのステータスの値を比べて、その差が大きければ大きいほど成長する確率が上がる、というのが自然かなと。\n例えば銅の剣と皮鎧を装備していたとする。\n1 2 3 4 5 6 成長値 腕力：25 体力：20 現在のステータス 腕力：5 体力：10 上記のような条件の場合、何らかの経験をした時（戦闘に勝利したり、イベントを制覇したり、かな）に、ステータスが上がる確率を以下のような計算式にする。\n1 （成長値-現在値）/成長値 先ほどの装備の場合の計算は以下のようになる。\n1 2 腕力：(25-5)/25 → 80% 体力：(20-10)/20 → 50% 現在のステータスが成長値に近づくほど成長しにくくなる、ということになる。 そして、成長値とステータスが同じになると成長が止まる。\nまあ、そんな感じです。\n","date":"2008-02-11T14:43:47+09:00","permalink":"https://www.nqou.net/2008/02/11/144347/","title":"ゲームネタ：装備によって成長する"},{"content":"ターン制のほかにもう一つ納得いかない事がある。 隙が無いことだ。\n格闘ゲームでは、当たり判定や技を出した後の硬直時間は、技ごとに細かく設定されているはずだ。 しかし、RPGでは、大技を出す時でも隙が無い。 タイミングが無理なら防御力が下がるとかでも面白いと思うのだが、そんなRPGは見たことが無い。 ゲームの小説やマンガなどでは、大技のあとの硬直を狙って起死回生の一撃を入れて大逆転、という展開もあるのにね。\nウェイトターンシステムでゲームを作るのならば、そのウェイトを操作して「隙」を演出することも可能だ。 今（というか、かなり前から）作っているゲームでは、大技を出した後は、次に行動するまでに通常よりも時間がかかる、という具合になっている。 もちろん、技ごとにデータを作る必要はあるのだが。\nついでにもう一つ。 別のゲームだが、ファイナルファンタジータクティクス（獅子戦争）では、呪文の詠唱時間という考え方があって、呪文はすぐには発動しない。\nファイナルファンタジータクティクス - Wikipedia 獅子戦争では、スピードとチャージタイムで行動順などを管理している。 カウント毎にスピードの分だけチャージタイムが溜まっていき、チャージタイムが100になったら行動できる、という仕組みだ。 スピードが4なら25カウント、スピードが5なら20カウントで行動できる、というわけだ。 スピードは、キャラクターだけではなく、ほとんどの呪文にも設定されている。 当然強い呪文は詠唱時間も長くなるようにスピードが遅く（値が小さく）なっている。\nこの仕組みは、ウェイトターンシステムをわかりやすくしたものだと思うのだが、正直なところ改悪だと思う。 最も気に入らないのは、同時に動けるようになるキャラクターが多い、ということ。 しかし、それらのキャラクターは何らかの法則で行動できる順序が決まっている。\n反面、良いと思うこともある。 スピードを上げるときは、現在のスピードが遅いほど効果がある。 逆に、スピードが十分速い時にはあまり効果が無い。\n例えばスピードが3から4に上がったとき、カウント数は34から25に短縮される。効果は9カウント。 5から6に上がった場合は、カウント数は20から17に短縮される。効果は3カウント。 という具合だ。\n閑話休題。 呪文の詠唱などの特殊なことをするのには時間が必要だということです。 呪文だけでなく、力をためる、などの行動も「力をためる時間」が必要なのです。 そして、大概の場合、そういった瞬間というのは無防備なものです。\n今（というか、かなり前から）作っているゲームでは、大技を出す態勢に入ってから、実際に出す瞬間までの時間が設定できます。 そして、その間は無防備なので、タイミング悪く攻撃を受ければ通常よりも大ダメージを食らうことになっています。\n","date":"2008-02-08T17:02:42+09:00","permalink":"https://www.nqou.net/2008/02/08/170242/","title":"RPGにも硬直時間を入れてみよう"},{"content":"RPGなどをやっていて納得いかないのがターン制。\n考えてみてほしい。 いくら素早くても、遅い敵と同じ回数しか動けないなんて変じゃないか？ 素早さの値が4倍違うのなら4回動けてもいいじゃないか、と。\n私がナリナリクラブのThe Wars of Rosesを改造しようと思った時に、まず思い出したのは、SRPGのタクティクスオウガだった。\nタクティクスオウガ - Wikipedia このウェイトターンシステム（もしくはNATSシステム、いずれにしろ結局はターンという言葉なのだが）が画期的で印象に残ってしまい、それ以来、普通のターン制のものに対しては違和感を覚えるようになってしまった。\nしかし、タクティクスオウガもそうだが、私の改造したWoRも、おそらくは似たような理由でゲームのバランスが悪くなった。\n詳しくは覚えてないが、ウェイトターンを1にする裏技（？）があった、はず。（ちょっと調べたがわからなかった） WoRのほうも、重さがマイナスの装備品を許容してしまったために、それに近い状態になった。 プログラム的には、最も小さい値を指定してあるので1にはならないが。いや、ならないはずだが。 今となってはどうなっているのか。\n今（というか、かなり前から）作っているゲームも基本はこれ。 やっぱり素早いキャラクターが好きですね。\n","date":"2008-02-05T15:41:26+09:00","permalink":"https://www.nqou.net/2008/02/05/154126/","title":"かのゲームでこだわったこと"},{"content":"さすがに「ニヤニヤ笑い」とは違います。\n本物のリーダーはいつも笑いを絶やさない (伊東 乾の「常識の源流探訪」)：NBonline(日経ビジネス オンライン)\n確かに、笑顔というのは人をリラックスさせる効果がありますね。 笑顔の素敵な人を見ると、心が温かくなります。\n笑顔といえば、笑顔がとても素敵なスケーターがいるのを知った。 昨年の暮れに、フィギュアスケートのカナダ大会をテレビで見ていたときのことだった。\n↓の動画だと3:33くらい。\nこの笑みにやられました。 4:35あたりにもリプレイがあります。\n武田奈也 - Wikipedia フィギュアスケートのことはさっぱりわかりませんが、競技として見ていても綺麗だなぁと思いました。 テレビで見ていた時は他にも色々と思ったのですが、既に記憶が風化していてダメですね。 でも、この「ナナスマイル」は簡単には忘れないでしょう。\n技の名前も少しは覚えたいですね。 とりあえず、ジャンプの違い（フリップとかルッツとかトウループとか）が全然わからない。 そもそも、この時までジャンプにそんな種類があったことも知らなかったし。 今まではただ眺めていただけでしたが、今後は見方も変わるような気がします。\n","date":"2008-02-05T14:39:33+09:00","permalink":"https://www.nqou.net/2008/02/05/143933/","title":"武田奈也"},{"content":"意外にも「あぁ、そうだなぁ」と思った。\n仕事ができる人の意外な特徴ランキング - goo ランキング\n特にトップの「年代の違う友人・知人が多い」という項目が。\nあらゆる年代を受け入れる、というのは、偏見を持たない、というイメージがある。 偏見を持たない、というのは、物事を正しく判断する時には、必要な能力だと思う。\nそういう意味で、年代の違う友人・知人が多い、というのは「仕事ができる」という限られたものではなく、人間として「できる人」なんだと思う。\n","date":"2008-02-02T15:17:19+09:00","permalink":"https://www.nqou.net/2008/02/02/151719/","title":"仕事ができる人の意外な特徴"},{"content":"先日読んだ、効率が10倍アップする新・知的生産術―自分をグーグル化する方法の影響を少しずつ感じている。\n手始めとしてというわけでもないが、「グーグル化」の中で知った「MECE」について深く知りたかったので、本の中で紹介されていた本を読んだ。\nハードカバーの本を読んだのはいつ以来だろうかと。\nもともと分類するという事に苦手意識があった。 例えばファイルを分類するのにフォルダを作って、何度も整理しようとしているのだが、いつの間にかどこに分類していいのかわからなくなってきて、結局フォルダが意味の無いものになってくる。\nそういうこともあって、MECEという考え方を身につけて、ファイルだけではなく頭の中も整理したい、と思った。\nとりあえず、わからないところでも、そのまま放っておいて一通り目を通した。 その後、特にわかりにくかった（というか、理解できたとは思えなかった）「So What?/Why So?」の部分を読み直してみた。\nすると、最初に読んだ時は脳が受け付けなかった感じだったのに、「あぁこういうことか」という風に感じる程度には理解できた。\n今まで、学校でも会社でも教育という名前のものを受けてきたが、今、初めて教育されているような気分になった。 教育というと押し付けられている感じがして嫌だったのだが、こういう感じは悪くない。 「理解できた」ということが快感になって、ますます勉強したい、学びたい、という気持ちを生むんだな、と今は思う。\n理解できてから思うのだが、この本に書いてあることは教育の中でもやっている。 少なくとも3Cや4C、4Pについては、会社の教育でもやっているのだ。 でも、身についていなかった。理解できていなかった。 それはたぶん、教育の内容が、仕事に直接関係の無いことだと思っていたからだ。 しかし、こんなところで昔受けた教育の内容が出てくるとは。\n今は理解できている気になっているだけかもしれないが、それでも、自分自身の考え方が前よりも深く、広くなっているような感じがしている。 この感覚は、今までの教育では感じたことが無かった。\n自分自身が気づかないと、教育というのは意味が無いのだと思う。 少なくとも私にとってはそうだったようだ。\n","date":"2008-02-02T14:48:10+09:00","permalink":"https://www.nqou.net/2008/02/02/144810/","title":"自分自身を教育している感覚"},{"content":"積読していたFrontMission4の本を読むきっかけとなった「とある本」というのは、この本。\n色々な意味で刺激になった。\n読むきっかけとなったことは色々とあるけど、読んでみよう、というか、読みたいと思ったのは、限られた時間を有効に使いたい、と思ったから。\n色々と費用が掛かることもあるけど、読んだ瞬間から出来ることも沢山ある。\n実際に、読んだ瞬間から意識し始めたこともある。\nやっぱり、物事にはコツがあるんだなと思った。\n","date":"2008-01-31T15:46:22+09:00","permalink":"https://www.nqou.net/2008/01/31/154622/","title":"とある本"},{"content":"まあ、求められたからといって与えるかと言えばわからない。 …というか、与えるものがあるかどうかもわからないが。\n日経BP社の総合情報ポータル nikkei BPnet 〈日経BPネット〉で、経営者としての心構えであったりとか、管理職のあり方であったりとかのコラム等を読んでいると、上司や会社に対して不満が増えてくる。\n健康カウンセリングを受けた時に、「上司や会社に対して不満とか、ありますか？」と訊かれて、思わず言葉に詰まった。\n具体的には言わなかったけれど、不満はあることを正直に言った。 なんというか、不満も溜まればストレスから体調不良になるということで、そういうことも訊くらしい。\nま、それはともかく。 経営者視点ばかりではなく、部下の視点の本なども読んだほうが良いのかもしれない。\n部下であっても、上司をうまく使えばよいのだ。\n","date":"2008-01-31T13:55:46+09:00","permalink":"https://www.nqou.net/2008/01/31/135546/","title":"上司をもつ身として"},{"content":"今回のロサンゼルス-ラスベガスではレンタカーを多用した。\nはじめてラスベガスに行った時も驚いたのだが、ホテルの構内道路（と思われる道）に入ると、所々にものすごい盛り上がりがある。 かなり減速しないと飛び跳ねてしまいそうなほどの盛り上がりだ。\n最初は何故そんなものがあるのかすごく不思議だった。\nしかし、しばらくして、その盛り上がりがある場所の共通点がわかってきた。 それは、ホテルの駐車場の出入り口の近くであったり、信号の無い交差点の手前であったり。 つまり「止まれ」の代わりなのだ。\nそれに気づいた時には目からうろこが落ちた。 そういう手段があったんだ、と。\nルールを守ってくれない、と嘆く前に、守らないと危険な目にあう（or損をする）、ような仕組みを考えればいいのだ。\n","date":"2008-01-30T13:35:39+09:00","permalink":"https://www.nqou.net/2008/01/30/133539/","title":"ルールの守らせ方"},{"content":"公園で犬の散歩ができないのは、ごく一部のマナーの悪い人たちのせい。 という言い訳をしたくなる時がある。\nそういう人たちは、散歩禁止、という看板があっても散歩させるのだろう。\nルールを守る人たちや、マナーの良い人たちがとても困っています。\n","date":"2008-01-30T11:32:04+09:00","permalink":"https://www.nqou.net/2008/01/30/113204/","title":"遊べない公園"},{"content":"まだ40歳代ではないけれど。\nbpspecial ITマネジメント：コラム?桑田、イチローに学ぶ40歳代からの仕事術\n自分の得意とする今のスタイルを変え、今よりもさらに仕事を絞り込みながら、老いを楽しみながら活躍できているだろうか。 「昔の自分じゃないことを受け入れられている」――このイチローの言葉は、すべての40歳代ビジネスマンにとって重い言葉ではないかと、僕には思えるのである。\n出来なくなった自分自身を受け入れる、というのは大変です。\nそうなった時に、代わりに何が出来るのか、を考えておくのは大切なことだと思います。\nもう、大分前になりますが、垂直跳びでショックを受けたことがあります。\n元々、そんなに運動神経が良かったわけではなかったものの、中学時代の半分しか跳べなくなっている、という結果は到底受け入れられるものではありませんでした。 もう一度挑戦して、計測間違いではないことを知って、さらに落ち込みました。\n","date":"2008-01-29T11:14:41+09:00","permalink":"https://www.nqou.net/2008/01/29/111441/","title":"昔の自分じゃないことを受け入れること"},{"content":"先日テレビで見たのだが、その理由というのは「どちらの面もサラサラの面にするため」だそうだ。\n紙は製造工程でどうしてもサラサラの面とそうでない面ができる。 私たちがティッシュを使う時に、意識しなくてもサラサラの面が使えるのは、開発者がティッシュを使う人のことを考えた結果なのだとしみじみ思った。\nおそらく、開発した当時はそれが売り文句だったのではないかと想像した。 「どちらを使ってもサラサラ」とか「裏の無いティッシュペーパー」とか。\n今となってはあまりにも当たり前すぎて、その理由でさえも雑学扱いにされている。 ある意味誇らしいと思うが、少しさびしい感じがした。\n","date":"2008-01-29T10:43:46+09:00","permalink":"https://www.nqou.net/2008/01/29/104346/","title":"ティッシュが二枚重ねになっている理由"},{"content":"とある本を読んでから、通勤時間中に本を読もう、という風に決めて、その時に買ったまま放置（積読）していた本を読んでいる。\n全2巻なのだが、今は2巻目の途中。 実はゲームも途中で放ってある。\nフロントミッションの世界観が好きなことと、この作家の小説を好んで読んでいた時期があったことから買ってあったのだが、自分に言い訳をして読んでいなかったのだ。\n読んでみると、ゲームをしている時にはまったく考えなかった、現実味のある世界がそこにあった。\nゲームに登場するのは、ヴァンツァーと呼ばれるロボットのようなもの。 このヴァンツァーを操って敵を倒していく、シミュレーションRPGだ。 全身は４つのパーツ（体、右腕、左腕、両足）からなり、それぞれのパーツは自由に組み合わせが出来る。 ヴァンツァーは、同じ機種のパーツを使えば、通常のロボットのような仕様の物になるのだが、その組み合わせを考えるのが、このゲームの醍醐味でもある。\nで、小説の中では、異なる機種を寄せ集めて作ったヴァンツァーのことを「キメラ」と呼んでいる。 そして、その「キメラ」のヴァンツァーは、調整が難しくバランスも崩れるため、操作性が落ちる、というのだ。\n考えてみればそのとおりなのだが、これには目からうろこが落ちた。\nいくら規格を統一しているとはいえ、他社製品がうまく全能力を発揮できるとは限らない。 現実を考えれば、パソコンもそうだ。 規格に従ってさまざまなものが出回っているが、俗に言う「相性」の問題で動作が不安定になったりする。\nゲームの醍醐味だからこそ、まったく違和感無く受け入れてきたことだが、よく考えれば不思議なことだった。 その発想に脱帽です。\n","date":"2008-01-23T16:16:41+09:00","permalink":"https://www.nqou.net/2008/01/23/161641/","title":"FrontMission4"},{"content":"今日は会社で健康カウンセリングを受けてきた。\n先生は、なんと20年間もうちの会社でカウンセラーをやっているらしい。 私は14年くらいいるわけですが、今日、初めてカウンセリングを受けた。 健康カウンセリングを受けようと思ったのは、特に深い考えがあったわけでもなく、言ってしまえば、なんとなく、という感じ。 先週、コナミスポーツで「ボディスキャン」を受けたのだが、なかなか不本意な結果だったのも理由にはなったかもしれない。\nカウンセリングを受けていて感じたのは、どんな些細なことであれ、ちゃんと聞いてくれて、褒めてくれたり同意してくれたりしてくれているな、と。 もっと事務的な感じを想像していたので、何を喋ろうかと色々と考えていたのだが、結果的に心配する必要は無かった。 無理に話をするつもりも無いのに、気がついたら色々なことを喋っていた。 血圧を測る時にも話しかけながらだったので、つられて喋っていたら、聴診器をひじにあてて真剣に聞いているところだった。\n時間にして30分弱だったが、自分でも驚くほど短く感じた。 話しているだけでもケアされている気になってくる。 これは次回も是非受けようと思った。\n","date":"2008-01-23T14:05:57+09:00","permalink":"https://www.nqou.net/2008/01/23/140557/","title":"健康カウンセリング"},{"content":"今までウェブで翻訳というと、エキサイト翻訳しか使っていなかったのだが、ふとしたきっかけでYahoo!翻訳が存在するのを知った。\n折角なので、同じものを翻訳して性能を調べてみることにした。\n調べたのは、以下の文章。\nSign up for a free membership to MindMeister to manage and share your mind maps online and hold online real-time brainstorming sessions with friends and colleagues.\nMindMeister - think togetherというサイトのサインアップ時のアナウンスの一部。 MindMeisterのことはとりあえず置いておき、まずは結果から。\nエキサイト翻訳\n管理して、オンラインであなたの思考地図を共有して、友人と同僚とのオンラインリアルタイムのブレーンストーミングセッションを開催するMindMeisterへの無料会員資格に申し込みをしてください。\nYahoo!翻訳\nMindMeisterへの無料のメンバーシップがあなたの思考地図をオンラインで管理して、共有して、友人と同僚とオンラインリアルタイムブレーンストーミンングのセッションを開くために、登録してください。\n単語の翻訳はそれほど違わないのだが、文章全体を見るとYahooのほうが日本語として自然な感じがする。 エキサイト翻訳はかなりお世話になっていたが、そろそろ乗り換え時かもしれない。\n","date":"2008-01-21T14:19:01+09:00","permalink":"https://www.nqou.net/2008/01/21/141901/","title":"翻訳対決"},{"content":"先に紹介した携帯動画変換君もそうだが、いくつか試してみた動画変換用のソフトは、大体ffmpegというソフトを使っていた。\nで、携帯動画変換君は、ソフトとしてはわりと古い（2005年12月）のですが、プログラムとしては設定ファイルをもとに外部のプログラムを使う仕組みになっています。 つまり、ffmpegだけを最新に変更してもこのソフトを使いまわすことが出来るのです。\nしかし、ここで一つ問題が。 最新のffmpeg（入手方法紹介ページ）を落として、ファイルを入れ替えてみたのだが、どうもオプションでエラーになるようでちゃんと変換できない。\nエラーになっている部分を切り落としてやり直すこと数回。 しかし、ffmpegの使い方を見ても問題のなさそうなオプションばかりが引っかかっている。\n結局あきらめて、もともとついていたffmpegに戻した。\n最新FFmpegを、今日見てみたら、何日か前に更新されていたようだ。 近いうちにもう一度試してみようかな。\n","date":"2008-01-20T12:58:42+09:00","permalink":"https://www.nqou.net/2008/01/20/125842/","title":"ffmpegが難しい話"},{"content":"冬場になると肌が乾燥する。\n特に食器を洗う時に洗剤＋お湯でやっていると、タオルで手を拭く時点で痛く感じることがある。 ひび、あかぎれ、とかいうやつだ。 グーにするだけで、手の甲や指の関節の表面が切れたように痛む。\nもう１年以上経つかもしれないが、妻にそういう話をしたら、ある薬を紹介された。 それがユースキンだった。\nユースキン製薬株式会社 薬ってすごいなと思った瞬間だった。\n塗った瞬間から皮膚が柔らかくなった感じがして、実際に痛みも引いていった。 その時まで、そういう薬品は気休めだと思っていた。\nなんというか、研究している人に頭が下がります。 こんな薬を作ってくれてありがとう。\n","date":"2008-01-17T14:40:40+09:00","permalink":"https://www.nqou.net/2008/01/17/144040/","title":"ユースキンに感動"},{"content":"MTがセキュリティ対策でバージョンをあげたので追従。 ついでにデザインも変更してみた。 といっても、StyleCatcherで変えただけなので簡単。\n今回は、野良（？）デザインから選んでみた。Movable Type 3.2用無料テンプレート for StyleCatcher:MovableType幼稚園\nはてなにも同じようなデザインがあったような…。\n少し変えたところがある。 文字の大きさを変更したのだ。\nスタイルシートの中でフォントサイズを指定している箇所があるのだが、そこの単位がpxになっていたのを、すべてptに変更した。 それにしても、大きさを直接指定している箇所がかなり多くて変更が面倒だった。\n最近、スタイルシートを設計していないので感覚を忘れてしまったが、継承を使って考えれば、bodyに基本的な大きさを指定したあとは、単位をemにして相対指定にするほうがメンテナンスが簡単で、かつ、理にかなっている。はずだ。\n…とはいえ、デザインを考えるのは大変なことなので、ありがたく使わせていただいている。 StyleCatcherに対応しているデザインのテンプレートを配布するサイトがもっと増えてほしいと思う。\n","date":"2008-01-16T14:19:26+09:00","permalink":"https://www.nqou.net/2008/01/16/141926/","title":"デザイン変更"},{"content":"iTunesとiPodをはじめて同期した時、再生できない形式、ということで拒否されたものがあった。 それはムービーファイルだった。 しかも、全部。 拒否されると余計に気になってしまい、どうでもいい動画だがiPodで見てやろうと思い、動画の変換について調べてみた。\nいくつか試したなかで、とりあえず落ち着いたのが、「携帯動画変換君」です。 名前にもかかわらず、iPod用にも変換が出来る。\nMobileHackerz - [携帯向けに簡単に動画を変換してみよう] 使い方もシンプルだし、ソフトの構造もシンプル。\nしかし、最初はエラーがでて変換できなくて困った。 どうやら、QuickTimeのバージョンによって動かないことがあるらしいのだ。 原因はQT3GPPFlatten.exeらしいのだが、7.2以前にすれば問題ないらしい。\n色々と調べていくと、別のソフトを介する事で最新のQuickTimeでも無事に変換することが出来るようになった。 それを実現するためにはNicMP4Boxというソフトを使う。\n参考 iPod - MobileHackerz Knowledgebase Wiki NicMP4Box.zipをダウンロードして（入手先）、zipファイル中のNicMP4Box.exeをあらかじめcoresフォルダの中に入れておく。 あとは、設定ファイル（Transcoding_iPod.ini）を変更してやればOK。\n1 2 3 4 5 6 7 [Item*] Title=H.264 QVGA(384kbps/128kbps) FileNameMax=59 Command0=\u0026#34;\u0026#34;\u0026lt;%AppPath%\u0026gt;coresffmpeg\u0026#34; -y -maxfr 30 -i \u0026#34;\u0026lt;%InputFile%\u0026gt;\u0026#34; -title \u0026#34;\u0026lt;%Title%\u0026gt;\u0026#34; -bitexact -hq -vcodec h264 -vprofile baseline -vlevel 30 -fixaspect -s 320x240 -b 384 -maxrate 700 -qmin 18 -qmax 51 -bufsize 1024 -g 250 -acodec aac -ac 2 -ar 48000 -ab 64 \u0026#34;\u0026lt;%TemporaryFile%\u0026gt;.mp4\u0026#34;\u0026#34; Command1=\u0026#34;\u0026#34;\u0026lt;%AppPath%\u0026gt;coresNicMP4Box\u0026#34; -add \u0026#34;\u0026lt;%TemporaryFile%\u0026gt;.mp4\u0026#34; \u0026#34;\u0026lt;%OutputFile%\u0026gt;.mp4\u0026#34;\u0026#34; Command2=\u0026#34;rm \u0026#34;\u0026lt;%TemporaryFile%\u0026gt;.mp4\u0026#34;\u0026#34; Command3=\u0026#34;\u0026#34;\u0026lt;%AppPath%\u0026gt;coresAddiTunes\u0026#34; \u0026#34;\u0026lt;%OutputFile%\u0026gt;.mp4\u0026#34;\u0026#34; 細かい設定値はとりあえず置いておいて、この設定でほとんどの動画がiPodで再生できるように変換される。\n","date":"2008-01-16T14:07:02+09:00","permalink":"https://www.nqou.net/2008/01/16/140702/","title":"携帯動画変換君"},{"content":"ビデオも見れるiPodにしてから、音楽だけじゃなくビデオも持ち歩くようになった。\n動画と言えばYouTubeやニコニコ動画が有名だが、これらのサイトから簡単に動画が保存できるソフトを見つけたので使ってみた。\nArea61 ビデオダウンローダー\nこのソフトからでもYouTubeは検索できるのだが、細かく検索すると遅いので、そういう場合はサイトで検索してURLをコピペするほうがいいと思う。 IEと連動させれば、IEで見た動画が履歴から選択できるので、そちらもなかなか便利かも。\nただ、ダウンロードは多少時間が掛かるので出来ればリストなどで一括DLしたい。 そうすれば、パソコンを放置できるのだが…。\n","date":"2008-01-15T09:50:31+09:00","permalink":"https://www.nqou.net/2008/01/15/095031/","title":"Area61 ビデオダウンローダー"},{"content":"アメリカでの旅行中にiPod classicを手に入れた。\n一年近く前にiPod shuffleを買ってそれを使っていた。 そのまえもCDRを使うタイプのCD・MP3プレイヤーを使っていた。 一時期、携帯電話をプレイヤー代わりに使っていたこともある。\n通勤時間が暇なのだ。 往復２時間超のうち１時間くらいは歩いている。\nそういう間に音楽を聴くのは、時間の有効活用をしている気分になる。 旅行前は英語の学習ソフトを聞き流したりしている。\nそんな感じで日常生活に音楽が入り込んでいるのだ。\n半年ほど前からmixiミュージックやLast.fmで再生履歴を残すようになってからは、聴き方も少し意識している。 好きな曲を何度も聴いて、再生履歴が自分の好みを映し出すようになると、似たような再生履歴の人や、よく聴いている曲に似たような曲をお奨めしてくれるからだ。\nしかし、shuffleだと、曲を確認することが出来ないというのが困っていた。 追加する曲が多い時など曲を覚えきれないので、「あ、この曲良いな」と思っても、どの曲なのかがわからない。 ヤフオクなどをにらみながら、古いのでもいいからディスプレイ付のがほしい…、と思っていたものの、今ひとつ踏み切れず。\nそんなこんなで迷っている時に、アメリカの電気屋でiPodを発見。 値段がドルで書かれていると安く感じるのが不思議だ。\nということで、第６世代にあたるiPod classicを手に入れた。 これからは、音楽だけではなくビデオや写真なども持ち歩ける。\n","date":"2008-01-13T13:14:51+09:00","permalink":"https://www.nqou.net/2008/01/13/131451/","title":"iPod classicを手に入れた"},{"content":" 1 2 \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;new_class\u0026#34; value=\u0026#34;1\u0026#34; disabled=\u0026#34;disabled\u0026#34; tabindex=\u0026#34;1\u0026#34; /\u0026gt;1\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;new_class\u0026#34; value=\u0026#34;2\u0026#34; tabindex=\u0026#34;2\u0026#34; /\u0026gt;2\u0026lt;/label\u0026gt; \u0026lt;p\u0026gt;調べていくと、どうも仕様が変わったらしい。\u0026lt;br /\u0026gt; …というよりも、-disabledオプションが正式に採用されたと言うべきなのか。\n1 2 3 4 5 6 7 8 9 10 11 12 13 $cgi-\u0026gt;radio_group( -name =\u0026gt; \u0026#34;new_class\u0026#34;, -value =\u0026gt; 1, -labels =\u0026gt; {1 =\u0026gt; 1}, -default =\u0026gt; \u0026#34;none\u0026#34;, -disabled =\u0026gt; \u0026#34;disabled\u0026#34;, ), $cgi-\u0026gt;radio_group( -name =\u0026gt; \u0026#34;new_class\u0026#34;, -value =\u0026gt; 2, -labels =\u0026gt; {2 =\u0026gt; 2}, -default =\u0026gt; \u0026#34;none\u0026#34;, ), 1 2 3 4 5 6 $cgi-\u0026gt;radio_group(-name=\u0026gt;\u0026#39;group_name\u0026#39;, -values =\u0026gt; [\u0026#39;eenie\u0026#39;,\u0026#39;meenie\u0026#39;,\u0026#39;minie\u0026#39;,\u0026#39;moe\u0026#39;], -default =\u0026gt; [\u0026#39;moe\u0026#39;], -linebreak =\u0026gt; \u0026#39;true\u0026#39;, -disabled =\u0026gt; [\u0026#39;moe\u0026#39;], ), ","date":"2008-01-13T07:09:45+09:00","permalink":"https://www.nqou.net/2008/01/13/070945/","title":"CGI.pmでdisabledが効かなくなった？"},{"content":"今週の初めにラスベガスから帰国。 ラスベガス銀行への預金の総額はいくらになっただろう？\nで、帰ってきてから微妙に早起き早寝が続いている。 まだ日付変更線の近くで生活しているような時間帯の生活だ。\n幸いにも休みぼけはあまりない、と自分では思うのだが、そこはどうかわからない。 とりあえず、仕事は順調だが、会議では眠さに負けることもある。\n帰国してから妙に咳が出る。 初めて海外旅行した時は、帰りの飛行機の中から喉がおかしくて、家に着いたらいきなりの高熱で、翌日の仕事は休んで養生することになった。 今回は、そこまでではないが、喉の奥のほうが詰まるような感じで、どうしようもなく咳が出てくる。\nとりあえず、妻が持っている咳に効く漢方薬を飲んでいる。\n","date":"2008-01-11T12:28:55+09:00","permalink":"https://www.nqou.net/2008/01/11/122855/","title":"時差ぼけと休みぼけと咳"},{"content":"ここは、成田空港のYahoo! Cafe。\nキーボードの音が結構うるさい。\n","date":"2007-12-28T05:43:51+09:00","permalink":"https://www.nqou.net/2007/12/28/054351/","title":"旅の途中"},{"content":"ここはラウンジオーサカ。 これより、国外へ逃亡します。 まずは東へ。\n","date":"2007-12-27T23:29:07+09:00","permalink":"https://www.nqou.net/2007/12/27/232907/","title":"出発の挨拶"},{"content":"この汚いコード、明日までに書き直しちゃえ！ ? ＠IT自分戦略研究所\nなんというか、書き直したわけではないのですが、新しく機能を追加してバグを生んでしまったというお話です。\n機能といっても、渡された引数の中身を見て必要ならエスケープする、という単純な事なのですが。 で、書き直した時は従来の機能を損なわずに変更したつもりでした。 しかし、見事に損なっていたわけです。\nエスケープするつもりの無いものまでがエスケープされてしまっていました。\n敗因は、面倒くさがって自動的に判別させようとした、という事だろうと結論付けています。 エスケープが必要な場合は、スイッチになる引数を渡す、という処理をすればよかったのだと。 今はそう思っています。\n…結局、そのバグは下手に触れないので、呼び出し側で何とかしましたが、いずれは直さないといけないなと思いながら、それでまたバグが…と思うとなかなか無理です。\n","date":"2007-11-01T15:02:44+09:00","permalink":"https://www.nqou.net/2007/11/01/150244/","title":"コードの書き直しで失敗"},{"content":"これまたmixiつながりで、NightWishがゴシックメタルというジャンルに関係する、ということで、ゴシックメタルをWikipediaで調べた。ゴシックメタル - Wikipedia で、そこに載っていた「エヴァネッセンス」をさらに詳しく見て、オフィシャルサイトで視聴したところ、どこかで聴いた事があるような曲があった。 それは「Bring Me To Life」だった。 （未だにどこで聴いたのかは思い出せないが）\nその後しばらくして偶然にも中古屋で「Fallen」を発見。 mixiやLast.fmではそれほど再生数は多くありませんが、HDDナビの中にも入れたので車でもアルバムを通しで聴いています。\nここ数日は「Hello」が特に気に入っています。 落ち着く、というか、癒される、のかもしれません。\n","date":"2007-10-02T14:48:09+09:00","permalink":"https://www.nqou.net/2007/10/02/144809/","title":"Evanescence"},{"content":"このアーティストを知ったのはmixiのミュージックから。\n「mixi station」というmixi専用のソフトを使うことで、聴いている楽曲の情報を蓄積することができるのですが、その情報を基にしてオススメの楽曲やアーティストを紹介してくれる機能があるのです。 そこで、何組かのアーティストの曲をiTunesで視聴したところ、「End Of All Hope」が気に入ったのでレンタルしてきました。 オススメの方法は定かではありませんが、なかなかいい所を突いてきます。\n","date":"2007-09-30T16:36:02+09:00","permalink":"https://www.nqou.net/2007/09/30/163602/","title":"NightWish"},{"content":"陰陽座で刺激を受け、メタルに目覚めたか、若しくは、メタル好きを自覚したかは定かではないけれど、TSUTAYAでメタルコーナーを物色した。 そこで大々的に紹介されていたアーティストが「Sonata Arctica」だった。\nファーストアルバムでもある「エクリプティカ」は、今となっては手放せない一枚となってます。 この中で特に気に入っているのは、Blank File、Full Moonの２曲です。\n","date":"2007-09-29T18:46:26+09:00","permalink":"https://www.nqou.net/2007/09/29/184626/","title":"Sonata Arctica"},{"content":"今度の日曜日は参議院選挙。 選挙に関連する話も耳にする機会が増えてきた。\nラジオでは、選挙会場の会場時間が短いところがある、とか。 身のまわりでは、期日前投票に行ったら職員が多くて嫌だった、とか。\n選挙に金がかかるのはある程度仕方が無い。 しかし、期日前投票を2週間もやることは無いと思う。 １週間もあれば十分。 行く人は行くし、行かない人は期間を長くしても行かないと思う。\n色々な人を使って「選挙に行こう」とかCMもやっていたりしているけど、どうせやるのなら、「選挙」というテーマで曲を作ってもらったらどうなのか？ よく売れている人やバンドなどの10組くらいに曲を作ってもらって、それを各TV曲で流してもらえばいい。 費用は期日前投票を短縮する分で十分に賄えると思うのだが。\nあとはインターネット投票。 外国では既に導入されているところもあるという話だし。\n長崎市長選の無効票大量発生を教訓に，インターネット投票の導入を：ITpro 既に前例のある投票システムなのだから使えないわけが無い。\n日本のお役所システムは無駄だらけ / SAFETY JAPAN [大前 研一氏] / 日経BP社 国もITに関してもっと本腰を入れてほしいところだ。 この記事に書かれていることが全て実現できるならば、財政もかなり助かるはず。\nあと、7年前（2000年4月14日から4月27日）に調査したというアンケートの結果。\nインターネット投票に関するアンケート調査結果[自主・共同調査結果] - gooリサーチ 私も期待しています。\n","date":"2007-07-25T16:43:38+09:00","permalink":"https://www.nqou.net/2007/07/25/164338/","title":"選挙に関して徒然と"},{"content":"読んでいて、これは子どもだけのはなしではないなと。\n子どもの友達力は親子関係から ?その２? / SAFETY JAPAN [親野智可等氏] / 日経BP社\n印象に残ったところをメモ。\nたしかに、説教ばかりされる人とはしゃべりたくない。\nう、耳が痛い。\n話し方の良い例（否定的でない話し方）として２点ほど挙げられている。 一つは肯定的な例。\nもう一つは命令だが、否定的であるよりは、命令形のほうがマシ、であるという。\n否定的なものの言い方はやめよう。\n親と子どもの話だけではなく、人間関係の基本なのだ。\n","date":"2007-07-19T18:39:48+09:00","permalink":"https://www.nqou.net/2007/07/19/183948/","title":"「教育する者」という立場の怖さ"},{"content":"MTのテンプレートの仕組みには感動しますね。\nZeitgeistの表示にHTMLタグが入っていて変なことになっていたので対策しました。 セキュリティホールでしたので表示されるHTMLタグを無効にする処理を入れました。\n具体的には\n1 \u0026lt;$テンプレートタグ名 encode_html=\u0026#34;1\u0026#34; $\u0026gt; としただけなのです。 便利ですね。\n","date":"2007-07-19T14:45:26+09:00","permalink":"https://www.nqou.net/2007/07/19/144526/","title":"MTの「encode_html」"},{"content":"理事長になる動機にもなったかもしれません。\n「ペット一代限り可」の規約を「飼育可」に変更してもらうには？｜マンション管理新時代\n表向きは「飼育可にしよう」なんて事は言いませんが。\nただ、実際のところ難しいでしょう。 昨年の臨時総会で決議され、定期総会で規約改正も行われ、「一代限り」は正式に規約にうたわれました。 規約をころころと変える理事会が信用されるでしょうか？ ペット飼育ができるマンションを目指すのならば、反対の人を納得させる何かが必要でしょう。 例えばこんな感じの。\nうちのマンションでも「ペットクラブ」というものが作ってあり、無断飼育者はいないはずです。 ただ、残念ながら「ペットクラブ」の人たちの多くは、\nペットクラブは無理矢理作らされた ペットの責任は最終的に飼い主の責任 という考え方でした。 先日初めて出席したペットクラブの会合（2ヶ月に1回集まることになっている）も、どちらかというと「これまで自由に飼えたのに…」という雰囲気で終始していました。\nあと、理事会も役員で留任（再任）した方が一人もいない状態なので、ちょっと出遅れてしまった感があります。 ペットクラブに対してもそうなってしまいました。\nまずは、ペットクラブ内の意識改革を進めていかないと、ペットを飼えるマンションにするのは難しいと思います。 理事会としても協力できることは可能な限り協力する立場をとるつもりです。\nとりあえず、ペットクラブの会合に全員が出席すること、を目標にしてほしい、と思っています。 そのためには、ペットクラブにちゃんとした目的が必要なのかもしれません。 最終目標は「正式にペットが飼えるマンション」にすることだとは思いますが、そのための細かいステップを考えていく必要があるでしょうね。\n","date":"2007-07-17T15:54:15+09:00","permalink":"https://www.nqou.net/2007/07/17/155415/","title":"目標の一つ"},{"content":"視点が面白い。\nコミュニティー論に欠けていた視点／森反章夫氏と語る（第1回）｜マンション管理新時代\n避難訓練ではなく復興訓練という視点が面白い。\n逃げられなかった時にどうするか、という訓練もしたことが無い。 危険から身を守る方法というのは、意外と見落としている事が多いのかもしれません。 あ、逃げ遅れた設定で避難器具を使って脱出する訓練は見たことがありました。\n漠然と、全員が当事者になる訓練って良いなと思いました。 復興というのは、地域にとって大事なことです。 その復興を模擬的に行うことで新しい視点を提供できる。 災害がおきた時ではなく、災害がおきた後のことを考えることが、より災害のことを意識できる。のかもしれません。\n","date":"2007-07-17T15:37:20+09:00","permalink":"https://www.nqou.net/2007/07/17/153720/","title":"当事者になる訓練"},{"content":"今回、理事長になって最初の理事会は３時間以上かかった。\n「無意味だ」と言いながら、どうして会議の改善をしないのか-オンラインマガジン　-ITmedia エグゼクティブ編集部-\n３時間もかかった理由は、1,2を会議の中でやってしまったからだろう。\n前理事長から仕事を引き継いだときに、工事の業者を理事会に呼んでいる、ということで、理事会のときに過去の工事の経緯を聞いたわけです。 そして、その場で質問したり。 …こんなことしていて会議が1時間で終わるはずもありません。\nそれでも、当初の目標は2時間でした。 顔合わせはやっていたものの、最初の理事会でもあるし、ある程度は様子見も必要だとも思いました。 しかし、気がついたら3時間経っていたとは。\n理事をやっていて何が嫌って、会議に出なきゃいけないのが嫌というものです。 月に一回とはいえ、土曜日の昼から3時間も拘束されたら、どこにも遊びにいけないじゃないかと。\nこう、力説されると、ごもっとも、と、いうほかありません。 何とかして短くしないといけません。\nということで、第2回理事会は平日の夜8時から1時間で設定し、かろうじて1.5時間で会議を終了することができた。 議題は第1回と同じくらい。 議事録も同じくらいの枚数にもかかわらず、時間は半分に短縮できた。\n今回は、（急ぎだったこともあり）管理会社からの報告書が当日にしか配れなかったが、次回からは理事会の案内とともに配って事前に目を通してもらうことにしているので、おそらく1時間で終われるだろう。\n","date":"2007-07-17T15:15:38+09:00","permalink":"https://www.nqou.net/2007/07/17/151538/","title":"会議は１時間以内"},{"content":"自分のためにやるのが一番いい、という簡単なことを言っているはず。\n我慢して鍛える必要はない自分が続けられることを探そう (ビジネス基礎体力)：NBonline(日経ビジネス オンライン)\nタイトルはゆるいのだけど、中身はゆるくない。\nというか、１ページ目と２ページ目で中身が違うのが狙ってのことなのかどうなのか。\n「自分が楽しむために苦労するのは大変なことだとは思わないでしょう？」というメッセージなんだろうなぁ。\n理事長をやったことは、結果的に自分自身のためになった。 以前の経験は、今回の理事長の仕事にも役立っている。 ただ、「不愉快なこと」は何度やっても「不愉快なこと」です。 何が不愉快って、協力してくれない人が多い、ということです。\n今回は、その「不愉快なこと」をどうにかすること、に挑戦してみようと思っています。 まずは、興味を持ってもらうこと。 興味を持ってもらえれば私の勝ちだと思って色々画策しています。\n","date":"2007-07-16T16:47:05+09:00","permalink":"https://www.nqou.net/2007/07/16/164705/","title":"全ては自分のために"},{"content":"気がつけばあっという間に１年が経ってしまいました。 しかし、困った問題がありました。 次の理事が決まらないのです。\n仕事を引き継いでくれる人がいない、というのが、これほど悲しいことかと思いました。 マンションのために色々と時間を割いてきたのは、別に感謝されようと思っていたわけではありません。 しかし、どこかで反響と言うか、マンション管理への関心を持ってもらえるものと思っていたのでしょう。 その結果、自分自身が何のために苦労してきたのか…、という思いを抱いてしまいました。\n管理会社を変える、という大仕事をやって燃え尽きた感があったのかもしれません。 モチベーションを維持するのが難しくなってきたのです。\n任期終了となる総会の時期が近づきましたが、次の理事をどうするか、という理事会での議題については何度も先送りになっていました。\n管理会社からの提案もありましたが、役員を経験しないとマンション管理への関心を持つのは難しい、のでしょう。 そこは私たちとしても共通認識となり、結果として、輪番制でお茶を濁すことにしました。\n「マンション管理についての情報収集」 でもチラッと書きましたが、「理事長は、監事として次期役員に再選するよう努める」こととし、私は監事として次の年も理事会にかかわることにしました。 役員が全員が変わってしまうと、引継ぎをやったとしてもうまく機能しないことが多い、という話をよく聞く（そして、これは今回実感しました）ので、一人は再選したほうが良いだろう、と考えたのと、やはり残るのであれば理事長だろう、という安直なものでした。\n結果的に、理事長になる人の負担が増える事ばかりやっていたのかもしれません。 しかし、このときは率先して動くことしか考えつかなかったのです。\n","date":"2007-07-16T12:46:10+09:00","permalink":"https://www.nqou.net/2007/07/16/124610/","title":"回顧録-困った問題"},{"content":"臨時総会の一番の心配事は、出席、委任状などが定数以上集まるかどうかでした。\nこの臨時総会の前に一度臨時総会を開催したのですが、その時は回収した票の数が４分の３ギリギリで、１票でも反対票があると否決されてしまう議案がある、という総会になってしまったのです。 そして、見事に否決された議案がありました。\nもともと、マンション管理のノウハウなどありません。 後で管理会社の方に聞いてみると、総会の時には出席か委任か、という風にするのが一般的で、議決権行使書をつけることはほとんどしないそうです。 反対するなら出席して意見を言ってください、というスタンスですね。\n実際、否決された時のことを思い出し、実感しました。 理由書をわざわざつけてくれた方はまだ良いのですが、単純に反対票だけの方もいらしたので。 提案すると言うことはそれなりに時間をかけて、理事会で合意を得て、資料も作って…とやっていることは盛りだくさんなわけです。 それを紙きれ一枚で否定されるわけですから、やりきれなさといったら想像を絶するものがあります。\n閑話休題。 管理会社の変更案は臨時総会で無事可決しました。\n現行の管理会社に対して解約の申し出を行い、丁度会計年度が替わる頃に新しい管理会社に管理を任せることになりました。\n管理会社が変更することが決まってからは、契約が無いにもかかわらず引継ぎのために理事会に出席していただきました。 引継ぎも順調だったように思います。\nマンションの価値は管理で決まる、と言われたりしますが、管理会社の価値は担当者で決まる、もありかなと思います。 まあ、どこの会社でも言えるのかもしれませんが、担当次第でその会社の印象が変わることがあります。\n管理会社の変更が決まったのと前後して、元の管理会社の担当者が変わりました。 その担当は、管理会社が変わるまでちゃんと手を抜かずに仕事をしてくれました。 最初からこの担当だったら管理会社を変えようとまで思ったかどうか…。\n","date":"2007-06-16T12:28:44+09:00","permalink":"https://www.nqou.net/2007/06/16/122844/","title":"回顧録-管理会社変更決議その後"},{"content":"管理会社を変更すると言ってもどうすればいいのかわかりません。 そもそも、管理費が高いのか安いのかもよくわかりませんが、赤字が続くようでは困るのです。\nマンション関係のことを色々と検索して、マンション管理士のサイトを見つけたりしているうちに、偶然ですが「管理会社の入札システム」を見つけました。\nマンション管理組合の経費削減　コストダウン・ドット・コム 理事会でこちらを利用する決議を取り、いざ見積りをするために会員規約を読んでみると、なんと「見積りだけ」の利用はできないのでした。 念のため問合せしたところ「『見積もり合わせ比較』、またはそれを利用した『現状業者への値下げ交渉を目的とした入札』はお断りさせていただいております」という回答でした。\nとはいえ、副理事長との間では「できるなら変更したい」というレベルの話はしていましたし、場合によっては理事会で管理会社変更についての説明もしてくれる、ということで、副理事長と相談の上で管理会社変更を前提とした見積りを取ることにしたのです。\n管理会社を変更するつもりとはいえ、資料についてはどんどん詰めなければなりません。\n理事長が決まってからすぐに名義変更をするべきはずのものが2ヶ月たっても揃いません。 頻繁に来れる訳でもないのに資料を忘れたり、間に合わなかったり。\n施工会社のほうはというと、1年目のアフターサービスの報告書が工事から3ヶ月たっても提出されません。 共用部の工事は一部実行されていない箇所もあります。\n事業主からも、自転車置き場については何の音沙汰もありません。\nコストダウンドットコムの担当者の仕事はとても速く、問合せから10日ほどで入札仕様書が完成し、一ヶ月ほどで入札された金額の説明を受けることができました。 その後、理事会のほうでごたごたがあり多少遅れたものの、問合せから4ヶ月以内に管理会社変更の臨時総会を開くことができました。\n","date":"2007-06-13T12:51:27+09:00","permalink":"https://www.nqou.net/2007/06/13/125127/","title":"回顧録-管理会社の変更"},{"content":"管理組合の総会が開かれたのが、入居からほぼ一年。 その一年間の間、どうやって管理されていたのか？\n初年度の会計書類を見てみると「理事長未選任」という「理由」により、管理会社の権限で会計処理を行っていたのでした。 総会のときに提出を条件で承認とした決算資料の中にそれらはありました。 そこには、設計ミスとも言えるはずの追加の工事が管理組合の費用で行われていました。 これらについては、何度かの理事会を経て事業主から補填していただきました。\nただ、管理会社は竣工当時から決まっていた会社で、事業主や販売代理店との関係もあったためか動きがすごく悪かったのです。\n事業主には、このほかにも求めていたことがあります。\n1.竣工図面を提出してほしい 2.重要事項説明でも「各住居につき１台分の駐輪場を確保されている」となっているのに半分しかない（この件は今も未解決…） 3.斜めに設置された自転車置場は使えないので直してほしい（これも未解決）\n2,3はともかく、1の竣工図面を提出してもらうくらい簡単なことだと思うのですが、結局これも施工会社や事業主に直接連絡を取って提出してもらったのです。 竣工図面は施工会社にありました。という話でしたが、おそらく、作られていなかったのでしょう。\n…管理会社も事業主も施工会社も、ろくでもないところばかりでした。\n最初はあまり乗り気ではなかった理事長職ですが、やり始めると勝手に責任感が生まれてきて、いろんなことを調べなければいけない、と思うようになりました。 それもこれも、管理会社や事業主、施工会社がろくでもなかったおかげです。\nそんなわけで、理事長就任から半年もしないうちに管理会社の変更を計画しはじめました。\n","date":"2007-06-11T13:23:48+09:00","permalink":"https://www.nqou.net/2007/06/11/132348/","title":"回顧録-提出されない資料"},{"content":"理事長にはなったものの、基本的には「管理会社が仕切るもの」という意識は残っていました。 管理会社を監視するような仕事という認識だったと思います。\nマンション購入時は、２棟のマンションを同時に販売していたので、当初は全体でひとつの管理組合だと思っていたのですが、実際にはそうではなかったのです。 私は１棟のほう。 しかし、第１回の理事会は、２棟の管理員室で行うことになったのです。 管理員室の広さは確かに違いますが（１棟のほうはとても狭いのです）、管理会社が同じとはいえ、これはちょっと無しでしょう。\n会議室や集会室の無いような小規模のマンションでは、理事会や総会の場所をどうするのかも問題だと思いました。\n","date":"2007-06-10T07:21:46+09:00","permalink":"https://www.nqou.net/2007/06/10/072146/","title":"回顧録-初めての理事会は別のマンションで"},{"content":"とりあえず、しばらくぶりにアップデート。\nVer4の宣伝もやっているようだけど、そっちは様子見かなと。\n","date":"2007-06-10T07:20:00+09:00","permalink":"https://www.nqou.net/2007/06/10/072000/","title":"アップデート"},{"content":"来週の理事会に向けて徐々にエンジンの回転が上がってきています。 色々と調べていると昔のことを思い出してきました。\n以前のマンションは結婚する時に新築で購入しました。 この時は管理組合とか自治会とかには興味がなく、マンションの管理は管理会社がやるものだ、という思いもあって何も考えずにすごしていました。 結局、総会が開かれずに１年が経過し、ようやく管理組合の発足総会が管理会社の号令で行われました。 …実際には妻が管理会社の尻を叩いていたのですが。\nともかく、第一回の総会がマンションの共用玄関ホールで開催されました。出席者はたしか11人だったと思います。議決権数は31で、今回の議長は管理会社の担当なので、担当が20票を持っていた形ですね。 当然椅子もない、机もない、声は響いて聞こえにくい、冬だったので寒い、など、とても話をする環境ではありません。 それでも、何人かから質問が出され、担当者が答えに窮する、という不思議な総会は1時間以上続いたと思います。 それも初年度の決算で管理費会計が赤字で、修繕積立金から補填という信じがたい出来事があったからでした。 結果的に、不明な事項については今後理事会に提出する、という条件つきで決算と予算は承認されました。\nで、最後の議題は役員の決定です。\n立候補が一人出ました。が、他の人たちは急に静かになりました。 私は「さっきまで威勢が良かったのになぁ」と他人事のように思いました。 気がつくと私の後ろで妻が（一緒に参加していたのでした（もちろん票は二人で１票））「あなたやりなさいよ」と。 まあ、質問も結構しました（ほとんど妻が気づいたことですが）し、いつまでも立ったまま会議するのも嫌なので、立候補することにしました。 （今考えても魔が差したとしか思えません）\nで、先に立候補した方が副理事長となり、私が理事長となりました。 （何も考えてなかったに違いありません）\n残りの理事はクジで決めることに。 残り役員のうち出席者が１名、欠席が２名。 欠席したうちの１名は店舗部分の区分所有者で、賃貸に出していました。 監事を出席の方にお願いしましたが、諸々の理由で辞退され、欠席したもう１名が監事となりました（後に管理会社の担当者が連絡し了解を得た）。\nその後、改めて第1回理事会の日程を決め、総会は何事もなかったように終わりました。 欠席者がいたのも理由の一つですが、その理由は結果的に意味がないものでした。\n総会を欠席する人は理事会も欠席するのです。\n","date":"2007-06-08T16:10:10+09:00","permalink":"https://www.nqou.net/2007/06/08/161010/","title":"回顧録-そもそものきっかけは赤字財政"},{"content":"首長ブロガーの勧め（2）よくある5つの不安を解消：ITpro\n揚げ足を取られるのではないか 毎日，書き続けられないのではないか 意見のバランスが取れないのではないか 役所や後援会から反対されるのではないか ブログ対応に忙殺されるのではないか ということになるでしょう。 これらを解消しようというわけです。\n読んで納得。\n","date":"2007-06-07T16:03:07+09:00","permalink":"https://www.nqou.net/2007/06/07/160307/","title":"継続が力なり"},{"content":" ","date":"2007-06-07T14:43:43+09:00","permalink":"https://www.nqou.net/2007/06/07/144343/","title":"マンション管理についての情報収集"},{"content":" ","date":"2007-06-06T16:01:26+09:00","permalink":"https://www.nqou.net/2007/06/06/160126/","title":"人生二度目の理事長"},{"content":" ","date":"2007-06-06T14:16:00+09:00","permalink":"https://www.nqou.net/2007/06/06/141600/","title":"FM 大阪 「POWER PLAY851」で聴いた曲"},{"content":" ","date":"2007-06-01T18:34:47+09:00","permalink":"https://www.nqou.net/2007/06/01/183447/","title":"最近お気に入りの曲を徒然と２"},{"content":" ","date":"2007-06-01T17:36:23+09:00","permalink":"https://www.nqou.net/2007/06/01/173623/","title":"最近お気に入りの曲を徒然と"},{"content":" ","date":"2007-06-01T15:43:59+09:00","permalink":"https://www.nqou.net/2007/06/01/154359/","title":"上司を使わずして成果は上がらない"},{"content":" ","date":"2007-06-01T15:24:49+09:00","permalink":"https://www.nqou.net/2007/06/01/152449/","title":"ウェブラジオで偶然引っかかった曲"},{"content":" Love Story amazon.co.jp テレビから聴こえてきて思わず見た。\n","date":"2007-05-31T13:25:16+09:00","permalink":"https://www.nqou.net/2007/05/31/132516/","title":"気になった曲"},{"content":"仕事場が変わってから、通勤路の途中にツタヤが入った。\nそんなわけで半額レンタルの期間を狙って色々と借りてくるようになった。\n通勤途中にある店、というのは結構重要な要素だなぁ、と今更ながら思う。\n半額というのは無意味にお得感がある。\n音楽に飢えていたわけではないと思うのだが、結構な時間滞在し、気がつくと枚数が増えている。\n新聞で読んだだけのアーティスト、洋楽のオムニバス、etc\nそんなときに偶然目に留まったのが「陰陽座」だった。\n店員によるキャッチコピーにも刺激された。\nということで、ベストアルバム（２枚組＋ボーナスディスクつき）をカゴの中に。 陰陽珠玉 amazon.co.jp 今なら言える。\n店員さん、ありがとう。\nもともと音楽はゲーム好きが高じて手を出した趣味。\n西欧なら大航海時代。\n日本なら平安時代、戦国時代。\n中国なら三国時代、水滸伝。\nゲームの舞台をイメージさせる音楽には食指が動く。\nちょうどこの時、偶然「俺の屍を越えてゆけ」のサントラも見つけていたので、平安時代という世界観が一致したのかもしれない。\nそうでもなければ名前も知らず曲も聴いたことがないバンド（しかもジャンルがヘヴィメタ）のCDを借りたりはしなかったと思う。\nいくらキャッチコピーが優秀で半額レンタル中だったとしてもだ。\n組曲「義経」を聴いて、大河ドラマの義経の静を「石原さとみ」が演じていたことを思い出した。\n石原さとみ、迫真の「しずやしず」 快投乱打な雑記帳/ウェブリブログ（NHK大河ドラマ「義経」　第46回「しずやしず」）\n…でも、この回って結局見てないんですよね…。\nリンク先の記事を読んでいるだけで見なかった事を激しく後悔します…。\n…ま、ともかく。\nかなり好きな部類に入るバンドになりそうです。\n","date":"2007-05-24T15:15:56+09:00","permalink":"https://www.nqou.net/2007/05/24/151556/","title":"陰陽座"},{"content":"もう先週の話だが。 スガキヤ目当てのダイエーで「絵運祭」という展示会をやっていた。\n…まあ、諸事情で見には行かなかったのだが、気になる絵があったので無料の入場券だけを持って帰ってきた。 で、それを思い出したので、気になった画家の名前で検索した、というわけです。\n気になる絵のタイトルは「想紅（おもいくれない）」、書いたのは「ＳＨＵ」という方で、WebサイトはLittle Bit。\nLittleBit SHU Official Web Site 想紅 -おもいくれない- Omoi Kurenai｜Gallery｜LittleBit SHU Official Web Site やっぱりこういう絵が好きなんだなぁ、と自分自身を改めて認識した出来事でした。\n","date":"2007-04-12T14:44:12+09:00","permalink":"https://www.nqou.net/2007/04/12/144412/","title":"インスピレーション"},{"content":" ","date":"2007-04-04T11:48:17+09:00","permalink":"https://www.nqou.net/2007/04/04/114817/","title":"MHP2nd"},{"content":" ","date":"2007-02-12T16:36:05+09:00","permalink":"https://www.nqou.net/2007/02/12/163605/","title":"男と女の…"},{"content":"Kanameの小部屋 ―本棚と床とダンボール― http://www.tcp-ip.or.jp/~mt2knm/index.html ↑のサイトで公開されている「ToDo Chart」を最近使っています。 http://www.tcp-ip.or.jp/~mt2knm/etc/ToDoChart.html\n12月に転勤になったのですが、その時に引き継いだ仕事がとても多く、何をいつまでにしなければならないのかをきっちり把握するために、いくつかToDo管理のソフトを試した中で、最後まで生き残ったソフトです。\nまた、40歳からの仕事術で見た「自分ひとりの時間でも来客・会議と同様にアポを取る」という言葉。 これがより大きいきっかけになったと思います。\nToDo管理というかプロジェクト管理に近いのかもしれませんが、私の仕事（少なくとも溜まっていた仕事を整理するため）にはこれがあっているように感じました。\nToDo項目をファイルやフォルダに見立ててあるので、階層化の管理が簡単にできるのが気に入っています。 各項目からはフォルダやファイルへのリンクが設定できるので、ランチャのようにも使えますし、項目ごとに独立したメモを設定することができます。 （私が思うに）最も特徴的なのは、予定（開始日から期限日）をバーチャートで表現できることでしょう。 これによって視覚的にも予定が把握しやすくなっています。\n","date":"2007-02-10T16:23:15+09:00","permalink":"https://www.nqou.net/2007/02/10/162315/","title":"最近使っているToDo管理のソフト"},{"content":"本年もよろしくお願いいたします。\n","date":"2006-12-31T15:00:00+09:00","permalink":"https://www.nqou.net/2006/12/31/150000/","title":"あけましておめでとうございます。"},{"content":" ","date":"2006-12-12T13:44:58+09:00","permalink":"https://www.nqou.net/2006/12/12/134458/","title":"携帯番号ポータビリティ（ＭＮＰ）"},{"content":" \u0026lt;p\u0026gt;今回は、binmodeを使って、出力を「utf8」ということにしています。\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #!/usr/bin/perl -T # 日本語（utf-8） use strict; use warnings; use utf8; use CGI; binmode STDOUT, q{:utf8}; # binmode STDOUT, q{:encoding(euc-jp)}; { my $cgi = CGI-\u0026gt;new; my $html = qq{}; my $title = qq{テスト５}; $html .= $cgi-\u0026gt;header( { -charset =\u0026gt; q{UTF-8} } ); # $html .= $cgi-\u0026gt;header( { -charset =\u0026gt; q{EUC-JP} } ); $html .= $cgi-\u0026gt;start_html( { -title =\u0026gt; $title, -lang =\u0026gt; qq{ja}, } ); $html .= $cgi-\u0026gt;h1($title); $html .= $cgi-\u0026gt;start_div; if ( my $referer = $cgi-\u0026gt;referer ) { foreach my $key ( sort keys %ENV ) { my $lc_key = lc $key; $lc_key =~ s/^http_//; my $value = \u0026#34;\u0026#34;; eval { $value = $cgi-\u0026gt;$lc_key() }; unless ($@) { $html .= $cgi-\u0026gt;p( qq{環境変数「$key」の値は、「$value」です。} ); } } $html .= $cgi-\u0026gt;a( { -href =\u0026gt; $referer }, q{戻る} ); $html .= $cgi-\u0026gt;h2(qq{参考}); $html .= $cgi-\u0026gt;p( join $cgi-\u0026gt;br, sort keys %ENV ); # キーの一覧 } else { $html .= $cgi-\u0026gt;p(qq{情報の取得に失敗しました。}); } $html .= $cgi-\u0026gt;end_div . $cgi-\u0026gt;end_html; print $html; } \u0026lt;/div\u0026gt; ","date":"2006-12-09T13:17:37+09:00","permalink":"https://www.nqou.net/2006/12/09/131737/","title":"リメイク：自分の名前を調べる"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/perl -T # 日本語（utf-8） use strict; use warnings; use Encode; use utf8; use CGI; { my $cgi = CGI-\u0026gt;new; my $html = \u0026#34;\u0026#34;; $html .= $cgi-\u0026gt;header( { -charset =\u0026gt; \u0026#34;utf-8\u0026#34; } ); $html .= $cgi-\u0026gt;start_html( { -title =\u0026gt; \u0026#34;テスト４\u0026#34;, -lang =\u0026gt; \u0026#34;ja\u0026#34;, } ); $html .= $cgi-\u0026gt;start_div; if ( my $referer = $cgi-\u0026gt;referer ) { $html .= $cgi-\u0026gt;a( { -href =\u0026gt; $referer }, \u0026#34;戻る\u0026#34; ); } else { $html .= $cgi-\u0026gt;p( \u0026#34;HTTPからアクセスされていません。たぶん。\u0026#34;); } $html .= $cgi-\u0026gt;end_div . $cgi-\u0026gt;end_html; print Encode::encode( \u0026#34;utf-8\u0026#34;, $html ); # print $html; } \u0026lt;/div\u0026gt; ","date":"2006-11-29T15:37:53+09:00","permalink":"https://www.nqou.net/2006/11/29/153753/","title":"リメイク：「戻る」リンクを作る"},{"content":"妻はいつも言っている。 おいしいそばが食べたい、と。\n昨日行った、伊丹スカイパーク（詳しくは「伊丹スカイパーク - お気楽日和」で）で、スタンプラリーのパンフレットを取ってきたようで、今日はそのスタンプラリーに乗ってみることにした。\nまあ、今日の詳しい経緯は先に書かれてしまったので「スタンプラリー - お気楽日和」を見ていただくことにして。\n私はざるそばを注文。\n十割そばというのは、もしかしたら初めて食べたのかもしれない。 独特なざらつきがあって、歯ごたえが強いけど弾力性が無くぶちっと切れる、というか。 なかなか面白い食感で、美味しかったです。\n極め付けはそば湯。 凄く濃い。 かなりどろどろです。\n最初に出てきたそば茶も香ばしい。 まさにそば尽くしでした。\n","date":"2006-11-26T14:21:09+09:00","permalink":"https://www.nqou.net/2006/11/26/142109/","title":"道の駅「いながわ」の十割そば"},{"content":"アウトレットにて… - お気楽日和\n先日、りんくうプレミアムアウトレットに行ったついでに関西空港へ寄った。 （詳しいことは上記ページで）\nで、その時に見るともなくお土産品を見ていたら、試食コーナーがあった。 丁度食後でデザートでもと思い、チーズケーキに手を出してみたら意外とおいしかった。\n名前からして、本当においしいかどうか怪しい。 試食が無ければまず買わなかっただろう。\nナンジャタウン・お取り寄せランキング 大阪　青木松風庵おいしい大阪チーズケーキ\n実物は「アンジュミニョン（アンジェミニョン？）」というものなのだろう。チーズケーキ・アンジュミニョン│株式会社青木松風庵\nお土産仕様なのだろうが、もう少し考えてから名前をつけた方がよかったのではないか？\nまあ、でも、美味しかった。 また買うかもしれないね。\n","date":"2006-11-25T04:20:08+09:00","permalink":"https://www.nqou.net/2006/11/25/042008/","title":"「おいしい○○○」っていう商品名は止めたほうが…"},{"content":" \u0026lt;p\u0026gt;では、ＩＰアドレスが変わっても大丈夫なのか？\u0026lt;br /\u0026gt; という疑問が当然出てくる。 そういう時は、ホスト名とＩＰアドレスを結びつけているサーバ（ＤＮＳサーバ）に新しいＩＰアドレスを通知してやればよい。\n","date":"2006-11-25T00:51:06+09:00","permalink":"https://www.nqou.net/2006/11/25/005106/","title":"ダイナミックＤＮＳサービスと自宅サーバ"},{"content":"アメリカのマクドでお気に入りのメニュー、マックフルーリー。 ずっとマックフルリーと呼んでいたが、それはそれ。 ようやく日本上陸ということで、一度は食べておこうと。\nそんな時（21日の火曜日）に妻からのメールが。 どうやら、帰り道の途中にあるマクドにマックフルーリーが売っているらしい。 ということで、買って帰ることに。 正直、アイスを持って帰るのもどうかとは思いましたが。\nまあいつものことですが、期待しすぎるとろくな事がありません。\nまず大きく違うのはサイズ。 アメリカのレギュラーサイズは、日本で言うLサイズ。 マックフルーリーにも顕著に現れていた。 やはり小さい。\n次に違うのは、甘さ。 アメリカでの印象は、やはり甘いアイスクリームに、オレオのほろ苦さがマッチしていた。 しかし、日本のマックフルーリーは、オレオが甘く感じる。 オレオが同じ甘さだとすると、クリームの甘さがぜんぜん違うことになる。 まあ、実際のところ、日本版でも十分に甘いと思いますが。\nあと、やっぱり持ち歩く時間が15分程度あったので、（時間は遅かったし結構寒かったとは思いますが）それなりに溶けてました。\n作るのも意外と手間がかかるようで、作っている間は、まだ新製品なので慣れていないのかなぁ、と思いながら見ていました。 作り終わって商品を渡されるとき、何気なく店員さんの顔を見たら、びっくりするくらいの笑顔で、思わずこっちも笑顔になった。笑顔はすごく印象に残った。 で、振り向いてまたびっくり。 注文したときはレジはすいていたのに、気づいたら後ろに10人くらいは並んでいたのだ。\nで、マックフルーリーですが、妻はもう日本では食べない、と宣言していました。 私はそれほどでもありませんが、日本のアイスクリームには、もっと苦いチョコレートチップくらいが合いそうだと思いました。 カカオ70%くらいのものでも十分ほろ苦い感じが出るんじゃないかと思うんだけど、どうなんでしょう？ 機会があれば、普通のアイスとカカオ70%くらいのチョコレートで試してみようかなぁ。\n","date":"2006-11-24T16:30:47+09:00","permalink":"https://www.nqou.net/2006/11/24/163047/","title":"日本のマックフルーリー"},{"content":" ","date":"2006-11-22T09:16:44+09:00","permalink":"https://www.nqou.net/2006/11/22/091644/","title":"道具に使われる、ということ"},{"content":" ","date":"2006-11-21T14:28:25+09:00","permalink":"https://www.nqou.net/2006/11/21/142825/","title":"最初はいいんですよ最初は"},{"content":" ","date":"2006-11-21T14:18:37+09:00","permalink":"https://www.nqou.net/2006/11/21/141837/","title":"「Search Word Cloud」を導入してみた"},{"content":" \u0026lt;p\u0026gt;cpanがちゃんと使えるようになっていれば、インストールは簡単。\u0026lt;/p\u0026gt; 1 cpan\u0026gt; install Perl::Tidy 1 perltidy test.pl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 #!/usr/bin/perl -T use strict; use warnings; use Encode; use encoding \u0026#34;euc-jp\u0026#34;; use CGI::Pretty; use FileHandle; { my $cgi = CGI::Pretty-\u0026gt;new; my $styles = [ q{../../ipp.css}, q{../test.css} ]; my $wdays = [ \u0026#34;日\u0026#34;, \u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34; ]; my $output = \u0026#34;\u0026#34;; $output .= \u0026amp;amp;print_header( $cgi, \u0026#34;テスト３\u0026#34;, $styles ); $output .= $cgi-\u0026gt;p(\u0026#34;「temp.txt」に書き出します。\u0026#34;); my $fh = FileHandle-\u0026gt;new( \u0026#34;./temp.txt\u0026#34;, \u0026#34;w\u0026#34; ) or die; my $fh_output = \u0026#34;\u0026#34;; $fh_output .= \u0026#34;この文は temp.txt の中身になるはずです。n\u0026#34;; $fh_output .= \u0026#34;書き込んだ時間は、\u0026#34;; my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = localtime; $fh_output .= sprintf( \u0026#34;%04d/%02d/%02d(%s) %02d:%02d:%02dです。n\u0026#34;, $year + 1900, $mon + 1, $mday, $wdays-\u0026gt;[$wday], $hour, $min, $sec ); $fh-\u0026gt;print( Encode::encode( \u0026#34;utf8\u0026#34;, $fh_output ) ); undef $fh; $output .= $cgi-\u0026gt;div( { -class =\u0026gt; \u0026#34;test\u0026#34; }, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;./temp.txt\u0026#34; }, \u0026#34;temp.txtを見る\u0026#34; ) ); $output .= \u0026amp;amp;print_footer($cgi); # print Encode::encode(\u0026#34;utf8\u0026#34;, $output); print $output; } exit; # ヘッダ sub print_header { my ( $cgi, $title, $styles ) = @_; my $result = \u0026#34;\u0026#34;; $result .= $cgi-\u0026gt;header( { -charset =\u0026gt; \u0026#34;utf-8\u0026#34; } ); $result .= $cgi-\u0026gt;start_html( { -lang =\u0026gt; \u0026#39;ja\u0026#39;, -title =\u0026gt; $title, -style =\u0026gt; { src =\u0026gt; $styles }, } ); $result .= $cgi-\u0026gt;div( { -class =\u0026gt; \u0026#34;head\u0026#34; }, $cgi-\u0026gt;h1($title), $cgi-\u0026gt;hr, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;../../../\u0026#34; }, \u0026#34;Home\u0026#34; ), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;../../\u0026#34; }, \u0026#34;Perl\u0026#34; ), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;../\u0026#34; }, \u0026#34;TestCGI Index\u0026#34; ), $cgi-\u0026gt;hr, ); return $result; } # フッタ sub print_footer { my ($cgi) = @_; my $fh = FileHandle-\u0026gt;new(\u0026#34;../../sig.txt\u0026#34;) or die; my $sig = join \u0026#34;\u0026#34;, $fh-\u0026gt;getlines; undef $fh; my $result = \u0026#34;\u0026#34;; $result .= $cgi-\u0026gt;div( { -class =\u0026gt; \u0026#34;foot\u0026#34; }, $cgi-\u0026gt;hr, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;../../../\u0026#34; }, \u0026#34;Home\u0026#34; ), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;../../\u0026#34; }, \u0026#34;Perl\u0026#34; ), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a( { -href =\u0026gt; \u0026#34;../\u0026#34; }, \u0026#34;TestCGI Index\u0026#34; ), $cgi-\u0026gt;hr, $sig, ); $result .= $cgi-\u0026gt;end_html; return $result; } ","date":"2006-11-20T13:54:49+09:00","permalink":"https://www.nqou.net/2006/11/20/135449/","title":"perltidyを試してみた"},{"content":" \u0026lt;p\u0026gt;最近発売されたばかりの\u0026lt;a href=\u0026quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113059/nqounet-22/ref=nosim/\u0026quot; name=\u0026quot;amazletlink\u0026quot; id=\u0026quot;amazletlink\u0026quot;\u0026gt;続・初めてのPerl 改訂版\u0026lt;/a\u0026gt;とどっちにしようか迷った。\u0026lt;br /\u0026gt; この本は、naoyaのはてなダイアリーで紹介されているのを見て、テストの事は知っておきたいと思った。 まあ、それ以外は大体わかっている、つもりではある。\n\u0026lt;/div\u0026gt; ","date":"2006-11-19T14:11:16+09:00","permalink":"https://www.nqou.net/2006/11/19/141116/","title":"Perlベストプラクティスを買ってきた"},{"content":"そういえばノートＰＣを買っていた\nしかし、今は妻のもの…。\nまたアダプタの調子が悪いらしい。 よっぽど使い方が荒いのだろう。 かわいそうに。\n","date":"2006-11-16T15:32:55+09:00","permalink":"https://www.nqou.net/2006/11/16/153255/","title":"そういえばノートを持っていたんだね。昔は。"},{"content":" 1 perl -MCPAN -e \u0026#34;CPAN::Shell-\u0026gt;install(CPAN::Shell-\u0026gt;r)\u0026#34; 1 perl -MCPAN -e \u0026#34;CPAN::Shell-\u0026gt;upgrade\u0026#34; ","date":"2006-11-15T14:46:42+09:00","permalink":"https://www.nqou.net/2006/11/15/144642/","title":"モジュールの一括更新"},{"content":"…ということで検索をしていると、mt-rebuild.plに行き着く。\nMovableType備忘録: MovableTypeを自動的に再構築する\n一つのテンプレートを再構築するには十分なのだが、いくつかのテンプレートを効率よく再構築する方法は無いものか？\nイメージとしては、\n1 2 my $template = MT::Template-\u0026gt;load([1, 2, 3]); $mt-\u0026gt;rebuild_indexes(BlogID =\u0026gt; 1, Template =\u0026gt; $template, Force =\u0026gt; 1); とか、\n1 2 my @template = MT::Template-\u0026gt;load(1, 2, 3); $mt-\u0026gt;rebuild_indexes(BlogID =\u0026gt; 1, Template =\u0026gt; @template, Force =\u0026gt; 1); かなぁ。\n単一のテンプレートだけを再構築できるように、\n1 2 3 MT::Template-\u0026gt;load(1)-\u0026gt;rebuild; MT::Template-\u0026gt;load(2)-\u0026gt;rebuild; MT::Template-\u0026gt;load(3)-\u0026gt;rebuild; みたいなのでもいいんだけど…。\nMovable Type オブジェクト・リファレンス - MT::Templateとか見ても、そんなのはなさげ。\n","date":"2006-11-15T13:46:00+09:00","permalink":"https://www.nqou.net/2006/11/15/134600/","title":"特定のインデックステンプレートを自動的に再構築する方法"},{"content":"む～。 設定が楽なのはいいのだが、リポジトリの順番が変えられないし、libにあるモジュールのアップデートなのにsite/libのほうにインストールされてしまう（libはロックされていて上書きできないようだ（？））。\nGUIなら、例えばインストールしたいものをCtrlを押しながら選択していったり、Ctrl＋Aで全て選択とかできればいいのだが、複数選択に対応していない…。\nPlaggerをインストールする時に、このあたりの不便さに使うのが嫌になった。\nで、結局cpanのお世話になることにした。 Plaggerも、一旦動いたあと、cpanからforceインストール。 こうすると、nmakeが自動的に設定されるようなので、あとが楽です。\n1 cpan\u0026gt; force install Plagger ","date":"2006-11-14T16:18:16+09:00","permalink":"https://www.nqou.net/2006/11/14/161816/","title":"ActivePerlのGUIなppmが微妙な件"},{"content":" \u0026lt;p\u0026gt;ppmのリポジトリが最新のActivePerlにも対応した（\u0026lt;a title=\u0026quot;Charsbar::Note - PPM 4.x対応しました\u0026quot; href=\u0026quot;http://d.hatena.ne.jp/charsbar/20060918/1158513127#c1158958186\u0026quot;\u0026gt;Charsbar::Note - PPM 4.x対応しました\u0026lt;/a\u0026gt;）らしいので、こちらを利用することに。\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 plugins: - module: Subscription::Config config: feed: - http://blog.bulknews.net/mt/index.rdf - module: Publish::Gmail config: mailto: ユーザー名@gmail.com 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 plugins: - module: Subscription::Config config: feed: - http://blog.bulknews.net/mt/index.rdf - module: Publish::Gmail config: mailto: ユーザー名@gmail.com mailfrom: ユーザー名@gmail.com mailroute: via: smtp_tls host: smtp.gmail.com:587 username: ユーザー名@gmail.com password: パスワード ","date":"2006-11-14T14:20:40+09:00","permalink":"https://www.nqou.net/2006/11/14/142040/","title":"Windows+ActivePerlにPlaggerを入れるの巻"},{"content":"エントリーを普通に書くと、おそらくEncodeで変換するときに、「～」が「?」に変換されるのだ。\nなので、MovableType（Version 3.33-ja）のライブラリを直接書き換えてやろうと思ったのですが、うまくいかない…。\nやっぱり「～」って書かないといけないかなぁ…。\n参考：\n[Perl] Encode::FB_XMLCREFでコード変換に失敗＆対策 Kawa.net Blog（ゆうすけブログ）/ウェブリブログ\n404 Blog Not Found:perl - Encode::from_to() and fallback options\n","date":"2006-11-11T10:45:12+09:00","permalink":"https://www.nqou.net/2006/11/11/104512/","title":"「～」が文字化けする件について苦戦中"},{"content":"すぐにできる人はできるんですねぇ。\nspiritlooseのはてなダイアリー - はてなダイアリーをタグクラウド化\nさっそく試してみました。\nここのログを書き出して、はてなダイアリーでインポート。 しばらく待って全部の記事が反映されたら、今度はCSV形式でダウンロードする。 これでファイルは準備完了。\nで、次は、はてなダイアリーTagCloudにログイン。 最初のログインのときは、はてな認証をしても良いか確認する画面になった。 ま、認証は公開するときに必要なだけで、作る分には認証の必要は無いようだ。\nさて、先ほどのファイルを選んで「TagCloud作成」を押すと、しばらく待って結果が出る。\n結果は、カテゴリーとかタグに使っている語句が多かった…。 やっぱり、本文だけをどうにかしたいなぁ。\n","date":"2006-11-08T17:50:27+09:00","permalink":"https://www.nqou.net/2006/11/08/175027/","title":"タグクラウド化を試してみた"},{"content":"アメリカンエクスプレスって、こういうセールスもやるんだね。\nこの辺かな？\nアメリカン・エキスプレス 個人のお客さま：保険商品のご案内\nなんとなく、もっとクールなカード会社なのかと思ってたけど、キャンペーン中はそうでもないのかな？\n聞いた感じでは普通の傷害保険と同じようなものなのだが、説明が長い。\nこれじゃ、普通の勧誘電話と同じだなぁ。\n","date":"2006-11-08T03:53:23+09:00","permalink":"https://www.nqou.net/2006/11/08/035323/","title":"アメリカンエクスプレスから保険の勧誘電話"},{"content":"何を調べていたのかは忘れてしまったのだが、何故か気になった記事があった。\n…更新エントリーを表示するのって大変だなぁ、と思ったのだが、どこかでもっと簡単な方法を見たような気がしたので探してみた。\n…それは意外なところで見つかった。\nMovable Type 3.3 マニュアル: テンプレート・タグ リファレンス\nMTEntriesのアトリビュートにsort_byがあって、その対象として「modified_on（変更日時）」がありました。 Movable Type 3.3から、複数のアトリビュートを指定できる、という事なので、最近更新された10件を表示する場合は、\n1 2 3 4 5 6 7 \u0026lt;ul class=\u0026#34;module-list\u0026#34;\u0026gt; \u0026lt;MTEntries lastn=\u0026#34;10\u0026#34; sort_by=\u0026#34;modified_on\u0026#34; sort_order=\u0026#34;descend\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;module-list-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;\u0026lt;$MTEntryPermalink$\u0026gt;\u0026#34;\u0026gt; \u0026lt;$MTEntryTitle$\u0026gt; \u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/MTEntries\u0026gt; \u0026lt;/ul\u0026gt; という感じで可能のようですね。\nテンプレートタグの一覧を見たいときにはhxxk.jp - Movable Type 3.3 のテンプレートタグリファレンス自家用版が便利でよく使っています。\n追記（2006/11/09 00:25）：ソースを追っていないのでわかりませんが、アトリビュートの優先順位がよくわからないので、この方法では「最近更新された…」にはなりません。\n","date":"2006-11-08T03:12:56+09:00","permalink":"https://www.nqou.net/2006/11/08/031256/","title":"最近更新されたエントリーを表示するためのアトリビュート（失敗作）"},{"content":" ","date":"2006-11-07T16:27:51+09:00","permalink":"https://www.nqou.net/2006/11/07/162751/","title":"タグの進化のために"},{"content":" ","date":"2006-11-05T14:30:05+09:00","permalink":"https://www.nqou.net/2006/11/05/143005/","title":"狂った電波時計"},{"content":" ","date":"2006-11-05T11:47:37+09:00","permalink":"https://www.nqou.net/2006/11/05/114737/","title":"スパゲティハウス マッキー いつきの家"},{"content":" ","date":"2006-11-05T08:43:40+09:00","permalink":"https://www.nqou.net/2006/11/05/084340/","title":"オールドスパゲティファクトリー"},{"content":" ","date":"2006-11-04T17:44:52+09:00","permalink":"https://www.nqou.net/2006/11/04/174452/","title":"mixiで監視される"},{"content":"アキバ系!文京区本郷四畳半社長: 秋の夜長にRubyを学ぶ\nRubyもやってみたいと、何度も思ったりするんですが、一歩踏み出せないのは年齢のせい？とか思ったりもするんです。\nあとは、UNIXマシン（VineLinuxですが）があるのに、ほとんど起動させていないのも理由なのかもしれません。 …それこそ第一歩は踏み出しているんですが…。 ま、ネットくらいはLinuxでやってみることにして。\n新しいことや変化を求めたりするのには、エネルギーが必要で、そのエネルギーを持っているからこそ変化を実際に求める行動を起こすことができるのでは、と思っています。 ベンチャー企業を起こす人は、そういうエネルギーを持っているんでしょう。\n言語の一つを覚えるのに逡巡しているようでは、なかなかそうもいかないですね。\n","date":"2006-11-04T14:37:48+09:00","permalink":"https://www.nqou.net/2006/11/04/143748/","title":"勢いというか若さというか"},{"content":"追記（more）に記事を書いていると、メインページなどで「続きを読む\u0026hellip;.」というリンクが出るようになるが、デフォルトのAtomやRSS2.0のテンプレートでは、そういう風にはなっていない。 おまけに、SleipnirのHeadline-Reader Pluginでは「閉じタグ」らしきものが見えてしまっていた。 それがどうにも気になって、なんとかしてやろうと思ってみた。\n変更するのは「entry」内の「content」。\nAtom.xmlのデフォルトテンプレートでは、「MTEntryBody」と「MTEntryMore」がそのまま表示されている。\n1 2 3 4 \u0026lt;content type=\u0026#34;html\u0026#34; xml:lang=\u0026#34;\u0026lt;$MTBlogLanguage ietf=\u0026#34; 1\u0026#34;$\u0026gt;\u0026#34; xml:base=\u0026#34;\u0026lt;$MTBlogURL encode_xml=\u0026#34;1\u0026#34; $\u0026gt;\u0026#34;\u0026gt; \u0026lt;$MTEntryBody encode_xml=\u0026#34;1\u0026#34; convert_breaks=\u0026#34;0\u0026#34; $\u0026gt; \u0026lt;$MTEntryMore encode_xml=\u0026#34;1\u0026#34; convert_breaks=\u0026#34;0\u0026#34; $\u0026gt; \u0026lt;/content\u0026gt; これを以下のように変更する。\n1 2 3 4 5 6 7 8 \u0026lt;content type=\u0026#34;html\u0026#34; xml:lang=\u0026#34;\u0026lt;$MTBlogLanguage ietf=\u0026#34; 1\u0026#34;$\u0026gt;\u0026#34; xml:base=\u0026#34;\u0026lt;$MTBlogURL encode_xml=\u0026#34;1\u0026#34; $\u0026gt;\u0026#34;\u0026gt; \u0026lt;MTIfNonEmpty tag=\u0026#34;EntryBody\u0026#34; encode_xml=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;$MTEntryBody$\u0026gt; \u0026lt;MTIfNonEmpty tag=\u0026#34;EntryMore\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;\u0026lt;$MTEntryPermalink$\u0026gt;\u0026#34;\u0026gt;続きを読む\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/MTIfNonEmpty\u0026gt; \u0026lt;/MTIfNonEmpty\u0026gt; \u0026lt;/content\u0026gt; content全体を一度にencode_xmlするために、冗長なタグも使っているが、少なくともSleipnirのHeadline-Reader Pluginではきれいに読めるようになったので、一石二鳥である。\n","date":"2006-11-04T13:32:49+09:00","permalink":"https://www.nqou.net/2006/11/04/133249/","title":"Atom.xmlで「続きを読む」を表現する方法"},{"content":" ","date":"2006-11-04T12:27:12+09:00","permalink":"https://www.nqou.net/2006/11/04/122712/","title":"ブラウザの画面をキャプチャする方法"},{"content":" ","date":"2006-11-04T11:35:09+09:00","permalink":"https://www.nqou.net/2006/11/04/113509/","title":"モテるための秘訣"},{"content":" ","date":"2006-11-03T02:06:32+09:00","permalink":"https://www.nqou.net/2006/11/03/020632/","title":"仕事と給料の関係"},{"content":" \u0026lt;p\u0026gt;CGI::Prettyは、出力するHTMLソースをインデントをつけて整形して出力してくれる。\u0026lt;br /\u0026gt; それ以外は、CGI.pmと同じで、使い方も\n1 use CGI; 1 use CGI::Pretty; 1 use encoding \u0026#34;euc-jp\u0026#34;; 1 Wide character in print at .... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #!/usr/bin/perl -T use strict; use warnings; use Encode; use encoding \u0026#34;euc-jp\u0026#34;; use CGI::Pretty; use FileHandle; { my $cgi = CGI::Pretty-\u0026gt;new; my $styles = [q{../../ipp.css}, q{../test.css}]; my $wdays = [\u0026#34;日\u0026#34;, \u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;]; my $output = \u0026#34;\u0026#34;; $output .= \u0026amp;amp;print_header($cgi, \u0026#34;テスト３\u0026#34;, $styles); $output .= $cgi-\u0026gt;p(\u0026#34;「temp.txt」に書き出します。\u0026#34;); my $fh = FileHandle-\u0026gt;new(\u0026#34;./temp.txt\u0026#34;, \u0026#34;w\u0026#34;) or die; my $fh_output = \u0026#34;\u0026#34;; $fh_output .= \u0026#34;この文は temp.txt の中身になるはずです。n\u0026#34;; $fh_output .= \u0026#34;書き込んだ時間は、\u0026#34;; my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime; $fh_output .= sprintf(\u0026#34;%04d/%02d/%02d(%s) %02d:%02d:%02dです。n\u0026#34;, $year + 1900, $mon + 1, $mday, $wdays-\u0026gt;[$wday], $hour, $min, $sec); $fh-\u0026gt;print(Encode::encode(\u0026#34;utf8\u0026#34;, $fh_output)); undef $fh; $output .= $cgi-\u0026gt;div({-class =\u0026gt; \u0026#34;test\u0026#34;}, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;./temp.txt\u0026#34;}, \u0026#34;temp.txtを見る\u0026#34;)); $output .= \u0026amp;amp;print_footer($cgi); print Encode::encode(\u0026#34;utf8\u0026#34;, $output); } exit; # ヘッダ sub print_header { my ($cgi, $title, $styles) = @_; my $result = \u0026#34;\u0026#34;; $result .= $cgi-\u0026gt;header({ -charset =\u0026gt; \u0026#34;utf-8\u0026#34; }); $result .= $cgi-\u0026gt;start_html({ -lang =\u0026gt; \u0026#39;ja\u0026#39;, -title =\u0026gt; $title, -style =\u0026gt; { src =\u0026gt; $styles }, }); $result .= $cgi-\u0026gt;div({-class =\u0026gt; \u0026#34;head\u0026#34;}, $cgi-\u0026gt;h1($title), $cgi-\u0026gt;hr, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;../../../\u0026#34; }, \u0026#34;Home\u0026#34;), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;../../\u0026#34; }, \u0026#34;Perl\u0026#34;), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;../\u0026#34; }, \u0026#34;TestCGI Index\u0026#34;), $cgi-\u0026gt;hr, ); return $result; } # フッタ sub print_footer { my ($cgi) = @_; my $fh = FileHandle-\u0026gt;new(\u0026#34;../../sig.txt\u0026#34;) or die; my $sig = join \u0026#34;\u0026#34;, $fh-\u0026gt;getlines; undef $fh; my $result = \u0026#34;\u0026#34;; $result .= $cgi-\u0026gt;div({-class =\u0026gt; \u0026#34;foot\u0026#34;}, $cgi-\u0026gt;hr, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;../../../\u0026#34; }, \u0026#34;Home\u0026#34;), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;../../\u0026#34; }, \u0026#34;Perl\u0026#34;), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a({-href =\u0026gt; \u0026#34;../\u0026#34; }, \u0026#34;TestCGI Index\u0026#34;), $cgi-\u0026gt;hr, $sig, ); $result .= $cgi-\u0026gt;end_html; return $result; } \u0026lt;/div\u0026gt; ","date":"2006-11-02T12:50:32+09:00","permalink":"https://www.nqou.net/2006/11/02/125032/","title":"リメイク：ファイルに書き出す"},{"content":" ","date":"2006-11-01T16:17:07+09:00","permalink":"https://www.nqou.net/2006/11/01/161707/","title":"セーブデータが消えた時の出来事"},{"content":" ","date":"2006-11-01T15:48:51+09:00","permalink":"https://www.nqou.net/2006/11/01/154851/","title":"嫌な事件"},{"content":" ","date":"2006-11-01T03:44:02+09:00","permalink":"https://www.nqou.net/2006/11/01/034402/","title":"defined-orという演算子"},{"content":" ","date":"2006-10-30T16:28:00+09:00","permalink":"https://www.nqou.net/2006/10/30/162800/","title":"これも予想外か？"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #!/usr/bin/perl use strict; use warnings; use CGI; use FileHandle; { my $cgi = CGI-\u0026gt;new; my $styles = [\u0026#34;../../ipp.css\u0026#34;]; \u0026amp;amp;print_header($cgi, \u0026#34;テスト２\u0026#34;, $styles); print $cgi-\u0026gt;p(\u0026#34;「sig.txt」を読み込みます。\u0026#34;); print $cgi-\u0026gt;start_div; my $fh = FileHandle-\u0026gt;new(\u0026#34;../../sig.txt\u0026#34;) or die; print $fh-\u0026gt;getlines; undef $fh; print $cgi-\u0026gt;end_div; \u0026amp;amp;print_footer($cgi); } exit; # ヘッダ sub print_header { my ($cgi, $title, $styles) = @_; print $cgi-\u0026gt;header({ -charset =\u0026gt; \u0026#34;euc-jp\u0026#34; }); print $cgi-\u0026gt;start_html({ -lang =\u0026gt; \u0026#39;ja\u0026#39;, -title =\u0026gt; $title, -style =\u0026gt; { src =\u0026gt; $styles }, }); print $cgi-\u0026gt;h1($title); } # フッタ sub print_footer { my ($cgi) = @_; print $cgi-\u0026gt;hr; print $cgi-\u0026gt;div( $cgi-\u0026gt;a({ href =\u0026gt; \u0026#34;../../../\u0026#34; }, \u0026#34;Home\u0026#34;), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a({ href =\u0026gt; \u0026#34;../../\u0026#34; }, \u0026#34;Perl\u0026#34;), \u0026#34;/\u0026#34;, $cgi-\u0026gt;a({ href =\u0026gt; \u0026#34;../\u0026#34; }, \u0026#34;TestCGI Index\u0026#34;), ); print $cgi-\u0026gt;hr; print $cgi-\u0026gt;address( $cgi-\u0026gt;a({ href =\u0026gt; q{mailto:nobu3@x.age.ne.jp}}, \u0026#34;Written by Nobu3\u0026#34;), ); print $cgi-\u0026gt;end_html; } \u0026lt;/div\u0026gt; ","date":"2006-10-27T14:12:47+09:00","permalink":"https://www.nqou.net/2006/10/27/141247/","title":"リメイク：ファイルから読み込む"},{"content":" ","date":"2006-10-25T15:42:03+09:00","permalink":"https://www.nqou.net/2006/10/25/154203/","title":"業界用語の危険性"},{"content":" ","date":"2006-10-25T15:32:40+09:00","permalink":"https://www.nqou.net/2006/10/25/153240/","title":"万能ソフトウェアExcel"},{"content":"第29話　情報砂漠：4コマまんが「がんばれ！アドミンくん」 - ＠IT\n無料でいろいろな情報を集めることができるのは確かにお得だ。\nしかし、例えば最近買った「まるごとPerl! Vol.1」では、ウェブではどこを見てもよくわからなかったCatalystの導入法から簡単な使い方までが、検索にかけた時間よりもはるかに短い時間で手に入る。\nPerlを始めたころは、ウェブの情報だけで頑張っていたが、結局本を買ってからのほうが圧倒的に習熟のスピードが上がった。\n専門書はそれなりの値段がするので敬遠しがちだ。 私もそうだが、仕事でプログラミングをするわけではないのならばなおさらだ。\nでも、時間が限られているからこそ、本を買う価値がある、というものだ。\n","date":"2006-10-25T14:19:50+09:00","permalink":"https://www.nqou.net/2006/10/25/141950/","title":"本が必要な理由"},{"content":" ","date":"2006-10-25T14:11:27+09:00","permalink":"https://www.nqou.net/2006/10/25/141127/","title":"事前にしっかりチェック"},{"content":"がんばれ！アドミンくん 第25話 ? ＠IT\nExcelは計算は確かに間違いません。\nでも、計算式が正しいかどうかは人間が確認しないとわからんのです。\nまあ、私の場合は、計算式を全部確認するわけですが、縦横を全部見るのって結構大変なんですよねぇ…。\n確認するよりも最初から設定しなおすほうが簡単だし間違いは少ないんですね。通常は。\nただ、リンクでいろいろなところに飛んでいるとこれも大変なんですね…。\n","date":"2006-10-25T14:01:43+09:00","permalink":"https://www.nqou.net/2006/10/25/140143/","title":"はい、私もやったことがあります"},{"content":"がんばれ！アドミンくん 第7話 ? ＠IT\n人が仕事しないときの仕事ですよ。\nシステムのメンテナンスは仕事が終わった後。\nうちの会社でも大きなメンテナンスは年末年始にやっているし、連休には時々メールが使えない、というアナウンスが来る。\n","date":"2006-10-25T12:01:54+09:00","permalink":"https://www.nqou.net/2006/10/25/120154/","title":"よく聞く話です"},{"content":" ","date":"2006-10-25T11:45:25+09:00","permalink":"https://www.nqou.net/2006/10/25/114525/","title":"知識の違い"},{"content":" ","date":"2006-10-25T11:17:13+09:00","permalink":"https://www.nqou.net/2006/10/25/111713/","title":"あるある"},{"content":" ","date":"2006-10-25T09:58:09+09:00","permalink":"https://www.nqou.net/2006/10/25/095809/","title":"初心者最強"},{"content":"会社におけるログの重要性を考える ? ＠IT情報マネジメント\n仕事の内容を記録するのを仕事としている人、がいる会社の方が成長するのだろうか？\n過去の蓄積から未来を予測する、ということは可能だろう。 天気予報もあるいは占いも、そういう統計に基づいたものだから。\n仕事をした人が、自分の仕事の具合について自己評価をすることは無意味なのだろうか？ …まあ、一人で行動していればいくらでも捏造はできる。 アリバイというのが誰かが証明しないと成立しないのと同じなのだろう。\n言われているのはもっともなことだ。\n最近は、電話よりもメールでのやり取りをするようにしている。 議事録が大事というのは社会人になってから何度も言われているが、改めて書類として起こすのがとても苦手なので、メールなら印刷すれば済む、と思ったからだ。 電話で対応した場合、その場でメモはするが記録としては残していない事がほとんどだ。\n全文検索システムは確かに便利だろう。 今では議事録もWordかExcelで入力しているのだから、システム化してもいいかもしれない。\nしかし、\nこれは本当だろうか？\n","date":"2006-10-25T09:21:30+09:00","permalink":"https://www.nqou.net/2006/10/25/092130/","title":"ログ（記録）の取り方と利用法"},{"content":" ","date":"2006-10-24T18:22:19+09:00","permalink":"https://www.nqou.net/2006/10/24/182219/","title":"自己責任でお願いします"},{"content":" ","date":"2006-10-24T17:57:44+09:00","permalink":"https://www.nqou.net/2006/10/24/175744/","title":"予想外でした"},{"content":" ","date":"2006-10-23T14:20:25+09:00","permalink":"https://www.nqou.net/2006/10/23/142025/","title":"APIで美味しい所をいただきます"},{"content":" ","date":"2006-10-23T13:34:45+09:00","permalink":"https://www.nqou.net/2006/10/23/133445/","title":"インターネットがTVに変わるのか？"},{"content":" ","date":"2006-10-23T13:02:57+09:00","permalink":"https://www.nqou.net/2006/10/23/130257/","title":"どこでもドアまであと何歩？"},{"content":"hxxk.jp - Movable Type で meta 要素に効率的にキーワードを配置\nこれを導入しようとしたが、エラーになってしまった。\n記事が3.2の時のもののようなので、正式採用されているエントリータグとは仕様が違うのだろう、ということで、現行のバージョン（3.33-ja）で動くように変更してみた。\nテンプレート→アーカイブ→エントリーアーカイブで検証。\n1 2 3 4 5 \u0026lt;MTEntryIfTagged\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;\u0026lt;MTEntryTags glue=\u0026#34; ,\u0026#34;\u0026gt; \u0026lt;$MTTagName$\u0026gt; \u0026lt;/MTEntryTags\u0026gt;\u0026#34; /\u0026gt; \u0026lt;/MTEntryIfTagged\u0026gt; 実際にはやっていることは同じで、単にタグの名称が違うだけという。\n…しかし、SEOの方法としては見逃せない要素だと思うのだが、標準的にはmeta要素に記載されていないのが不思議。\n","date":"2006-10-22T14:52:33+09:00","permalink":"https://www.nqou.net/2006/10/22/145233/","title":"MovableTypeでmeta要素のkeywordsを書く方法"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/perl use strict; use warnings; use CGI qw(:standard); my $styles = [\u0026#34;../../ipp.css\u0026#34;]; print header({ -charset =\u0026gt; \u0026#34;utf-8\u0026#34; }); print start_html({ -title =\u0026gt; \u0026#34;テスト１\u0026#34;, -style =\u0026gt; { src =\u0026gt; $styles }, }); print p(\u0026#34;うまく動くかな？n\u0026#34;); print hr; print div( a({ href =\u0026gt; \u0026#34;../../../index.htm\u0026#34; }, \u0026#34;Home\u0026#34;), \u0026#34;/\u0026#34;, a({ href =\u0026gt; \u0026#34;../../\u0026#34; }, \u0026#34;Perl\u0026#34;), \u0026#34;/\u0026#34;, a({ href =\u0026gt; \u0026#34;../\u0026#34; }, \u0026#34;TestCGI Index\u0026#34;), ); print hr; print address( a({ href =\u0026gt; q{mailto:nobu3@x.age.ne.jp}}, \u0026#34;Written by Nobu3\u0026#34;), ); print end_html; \u0026lt;/div\u0026gt; ","date":"2006-10-22T02:23:28+09:00","permalink":"https://www.nqou.net/2006/10/22/022328/","title":"リメイク：サブルーチンを使う"},{"content":"大分落ち着いてきた。\nｉネッ時計（インターネット時刻補正）\n","date":"2006-10-21T13:49:42+09:00","permalink":"https://www.nqou.net/2006/10/21/134942/","title":"ソフトウェア選考４"},{"content":" ","date":"2006-10-20T16:41:06+09:00","permalink":"https://www.nqou.net/2006/10/20/164106/","title":"Ajaxカレンダーを導入"},{"content":" ","date":"2006-10-19T15:10:26+09:00","permalink":"https://www.nqou.net/2006/10/19/151026/","title":"究極のディスプレイ"},{"content":"なんとなく入れていたmixi stationだが、mixiをチェックするとちゃんと情報が送信されていた。\nWindowsのファイアウォールを確認してみたが例外リストにも無かった。\nどうやってデータを送っているんだろうか？？\n","date":"2006-10-19T14:41:53+09:00","permalink":"https://www.nqou.net/2006/10/19/144153/","title":"mixi stationの謎"},{"content":" ","date":"2006-10-19T14:14:42+09:00","permalink":"https://www.nqou.net/2006/10/19/141442/","title":"会社のメールアドレスから感じること"},{"content":" ","date":"2006-10-19T13:24:56+09:00","permalink":"https://www.nqou.net/2006/10/19/132456/","title":"ＡＩ（人工知能）の魔力"},{"content":"MovableTypeでも「タグ」の機能が導入された。\n…まあ、先ほどのエントリーのような問題もあるのでアレだが、この機能にはひそかに期待している。\nというか、むしろ「タグ付け」という考え方に対して期待している。\n今までのカテゴリーという考え方だと、レベル付けが必要となるが、その順位を決めるのがとても苦手なのだ。\nフォルダ分けもそう。\n気が付いたら同じようなフォルダがいくつもできていて、ファイルをどこに仕舞えば良いのか迷ってしまう。\n究極のファイル整理術として、同一フォルダで名前を細かくつけるのが最も良い、というような記事を見た記憶がある。探すのは検索機能があるわけだから、それで探せば良いと。\nタグ機能はこれの延長上にあると考えられる。\nタグを管理することで、入力の支援にもなる。はてなブックマークでは、ブックマークがタグで整理されている。\n色々な人がつけるので同じようなタグも沢山あるが。、ヒントになるものもあるので試行錯誤の最中だ。\nタグのつけ方も少し研究してみたい。\nフリーソフトにTAGるメモというのを見つけた。\n残念ながらまだ使ってはいないが、そのうち試してみたいと思っている。\n","date":"2006-10-19T12:51:39+09:00","permalink":"https://www.nqou.net/2006/10/19/125139/","title":"タグに大きく期待して徒然と"},{"content":" 1 2 3 4 5 6 7 8 \u0026lt;MTEntryIfTagged\u0026gt; \u0026lt;MTEntryTags\u0026gt; \u0026lt;category term=\u0026#34;\u0026lt;$MTTagID encode_xml=\u0026#34; 1\u0026#34;$\u0026gt;\u0026#34; label=\u0026#34;\u0026lt;$MTTagName encode_xml=\u0026#34;1\u0026#34; $\u0026gt;\u0026#34; scheme=\u0026#34;http://www.sixapart.com/ns/types#tag\u0026#34; /\u0026gt; \u0026lt;/MTEntryTags\u0026gt; \u0026lt;/MTEntryIfTagged\u0026gt; \u0026lt;MTEntryCategories\u0026gt; \u0026lt;category term=\u0026#34;\u0026lt;$MTCategoryLabel encode_xml=\u0026#34; 1\u0026#34;$\u0026gt;\u0026#34; scheme=\u0026#34;http://www.sixapart.com/ns/types#category\u0026#34; /\u0026gt; \u0026lt;/MTEntryCategories\u0026gt; ","date":"2006-10-19T12:24:29+09:00","permalink":"https://www.nqou.net/2006/10/19/122429/","title":"タグを使うとSleipnirのHeadline-Reader Pluginでカテゴリが数字になってしまった"},{"content":" ","date":"2006-10-18T13:27:08+09:00","permalink":"https://www.nqou.net/2006/10/18/132708/","title":"エントリーアーカイブのコメントで「サインイン」できなかった件"},{"content":"何度かMySQLをインストールして思うのだが、一度ユーザを作ると、大体そのユーザを使いまわすのですぐに作成方法を忘れてしまう。 今後は（少なくともgoogleとかで）検索しなくてすむように、メモしておく。\nまずはMySQLサーバを起動。 とりあえずWindows起動時に起動するようにしたので放っておく。 以前は、mysqld-nt.exeあたりを手動で起動していた。\n次はクライアント。 Ver4.1.21はスタートメニューに「MySQL Command Line Client」ができるようで、ここからクライアントを起動。 DOSもどきの画面で、いきなりパスワードを訊かれる。 インストール時に設定しておいたパスワードを入れると無事起動。 スタートメニューからだとユーザはrootで起動されるようだ。 …まあ、まだ他にユーザを作ってなかったからかもしれないが。\nさて、次はデータベースを作成する。\n1 mysql\u0026gt; create database userdb; 完了。 これで「userdb」という名前のデータベースができた。 次に、このデータベースに対してすべての権限を持つユーザ「userid」を作る。\n1 mysql\u0026gt; grant all on userdb.* to userid@localhost identified by \u0026#34;******\u0026#34;; 「******」にはパスワードを入れる。 CGIから使う分には、「userid@localhost」だけで十分なはずだが、一応localhost以外も作っておく。\n1 mysql\u0026gt; grant all on userdb.* to userid identified by \u0026#34;******\u0026#34;; 以上。\n","date":"2006-10-18T09:50:48+09:00","permalink":"https://www.nqou.net/2006/10/18/095048/","title":"MySQLでデータベースとユーザを作成する"},{"content":"ソフトウェア選考２ (のぶろぐ)\nまだまだ続く。\nなんとなく、余計なものも多くなってきているような気がする。\nActivePerl（プログラム言語） 手元でCGIを実行するためには必要不可欠。 Windowsだと何かと不便なことはあるが、無いよりはましだし、PPMもGUIになって扱いやすくなった。\nMySQL（データベース） こういうのって最初に何を使うかによるんだろうなぁ。 Windowsでデータベースソフトといえば、MSAccessが会社にも入っているが、こっちの使い方はさっぱりわからない。 大体Excelで間に合う程度の事しかやらないからだろうけど。 閑話休題。Perlをはじめて以来、ずっとファイルで読み書きをしていたのだが、データベースを使い始めてからというもの、ファイルのロックとかを考える手間から開放されてとても楽になったので、今となっては手放せない。 データベースとしては他にも選択肢はあるのだが、比較的早いということと、導入しているレンタルサーバが多かった、という２点からMySQLを覚えることにした。\nAnHttpd（ウェブサーバ） 以前はこだわりもあってApacheを使っていたのだが、あまり複雑なことをすると何かと大変だということがわかったので、AnHttpdに変更。 扱いは簡単だけど、CGI開発においては必要十分な機能は持っている。と思う。 …しかし、このソフトの正式な呼称はAnHttpdでいいのだろうか？\nPerlEditor（テキストエディタ） Perlを始めたころから使っているエディタで、エクスプローラバーの使い心地から離れられない。 エディタとしての基本機能は少々不満はある。しかし、サブルーチンと変数（$@%の三種）を一覧できて、かつダブルクリックで該当箇所へジャンプする機能が、開発（特にデバッグする）時に重宝する。\niTunes（マルチメディアプレイヤー？） iPodは持ってないのだが、将来のため（？）に導入。あと、Podcastもなかなかよいね。 観たり聴いたりする分には、勝手に入っているWMPでもかまわないわけだが。\nLast.fm（ウェブ連動アプリ？） ほんの最近知ったLast.fmという音楽系SNSと連動するアプリケーション。 WMPやiTunesなどで聴いている曲をサイトに登録して、似たような好みの人が何を聴いているのかとか、いろいろわかるらしい。知らない曲でも好みの曲があるかも…って思ってなんとなく使っていた。 …しかし、一人暮らしでも一人部屋でもないので、パソコンで音楽を聴きながら開発…とかってできないわけで。 ヘッドフォンで一人の世界に入っていると邪魔されてしょうがないので、あまり活用できてない。\nmixi station（ウェブ連動アプリ？） 昨日のことだが、妻から「mixi紹介してあげようか？」と嬉しそうに言われて、有無を言わせず登録することになった。 で、ついでなので見ていると、ミュージックのページがあった。Last.fmと同じような目的なんだろうなぁ、と思いながらダウンロード＆インストール。 …したまではよかったのだが、通信できてなさげ。Last.fmはファイアウォールから警告が来たので解除してあげたわけだが…。どうなっているのか、とりあえず様子見ってことで。\nQuickTime Player（マルチメディアプレイヤー？） iTunesを入れたら勝手に入っていた。 QuickTimeも、名前だけでも変えたらどうかと。iQuickTimeでもいいじゃないか。 ま、とりあえず、同じようなソフトが同時にいくつも入るのは納得いかん。\n","date":"2006-10-18T09:47:40+09:00","permalink":"https://www.nqou.net/2006/10/18/094740/","title":"ソフトウェア選考３"},{"content":" ","date":"2006-10-18T04:11:17+09:00","permalink":"https://www.nqou.net/2006/10/18/041117/","title":"ショコラの病院通い"},{"content":"ソフトウェア選考 (のぶろぐ)\nまだ続く。\nというか、まだまだ最小限って感じ。 Perlも入れてない。\nDevas（ファイル内検索） 複数のファイルの中身を検索してくれる。 自分や他人のスクリプトから検索したりする時に重宝する。 Perlを入れてからでも十分だったのだが、ちょっとした事情でMovableTypeの中を検索するために入れた。\nAVG Anti-Virus Free Edition（アンチウィルス） とりあえず、アンチウィルス。 無いと何かと不安なので。 メールスキャンの後、スタンプ代わりにsignatureが入るのは微妙だが。\n","date":"2006-10-17T17:11:41+09:00","permalink":"https://www.nqou.net/2006/10/17/171141/","title":"ソフトウェア選考２"},{"content":" ","date":"2006-10-16T16:30:59+09:00","permalink":"https://www.nqou.net/2006/10/16/163059/","title":"Mapperプラグイン"},{"content":"とりあえずインストールしたソフト。\nスレイプニル（ブラウザ） 使い慣れているのでやはり選んでしまう。 慣れているといっても使いこなしているわけではないが。\nＦＦＦＴＰ（ＦＴＰクライアント） これも使い慣れているから。 設定さえしておけば、拡張子によって転送モードの切り替えができたり、ファイルの属性を変更したりできるのが便利。 特に、cgi→0700、pm,pl,dat→0600などのようなCGI関係のファイルの転送が楽。\nすっきり!!デフラグ（デフラグ：最適化） とりあえず、アップデートとドライバ関係を入れた後、寝る前にこいつでデフラグをかけておいた。 チェックディスク→デフラグ→終了ですっきり。\nNoah（アーカイバ） 開発は停止しているけど、アーカイバDLLの自動ダウンロード機能（caldix）が便利で使っている。 以前は「7z」で圧縮できるのが嬉しくて使っていた。\nEasy圧縮デラックス版（アーカイバ） 圧縮専用ソフト。lzh、zip、cabの３種類がそれぞれ単独のソフトで実装されている。 ソートして格納できるのが特徴で、この機能がお気に入り。\nEmEditor Free（テキストエディタ） 基本機能が充実しているエディタ。 文字コードと改行コードに関しては、自動認識はもちろん、保存時には任意でコードの設定が可能。\n","date":"2006-10-16T16:19:33+09:00","permalink":"https://www.nqou.net/2006/10/16/161933/","title":"ソフトウェア選考"},{"content":" ","date":"2006-10-16T14:30:59+09:00","permalink":"https://www.nqou.net/2006/10/16/143059/","title":"HDDの寿命？"},{"content":" \u0026lt;p\u0026gt;例えば、掲示板などのスクリプトで、名前を入力し忘れて投稿した時とかに「致命的なエラー」で強制終了（表示としては「500 Internal Server Error」になる）されたらどうだろう？\u0026lt;br /\u0026gt; しかも、その時にブラウザの「戻る」で戻ったら全部消えていた、とかだったらどうだろう？ ユーザーから見れば不親切だ。 名前が抜けているのなら、名前を入力しなおせば良いはずだ。 エラーの種類としては、処理を続けることができなくなる「（実際の意味での）致命的なエラー（データファイルがない、ファイルに書き込みできない、など）」もあるだろうからある程度は仕方ないにしても、「致命的ではないエラー（名前が抜けている、メールアドレスが不適切、など）」は、ユーザーの支障にならないようにしておきたいところだ。\n1 2 3 4 5 6 7 8 9 #!/usr/bin/perl -T # 日本語(EUC-JP) BEGIN { use CGI::Carp qw(fatalsToBrowser);# 500エラー時でもエラー情報をブラウザへ出力 open CGILOG, \u0026#34;\u0026gt;\u0026gt; ./cgi.log\u0026#34; or die \u0026#39;Can not open file. \u0026#34;\u0026gt;\u0026gt; ./cgi.log\u0026#34;\u0026#39;; CGI::Carp::carpout(*CGILOG); } use strict; use warnings; ","date":"2006-10-06T06:31:05+09:00","permalink":"https://www.nqou.net/2006/10/06/063105/","title":"エラーの処理方法で暗中模索"},{"content":"ITmedia Biz.ID：A4用紙を手軽に三つ折りする方法\nもしA4用紙が1枚しかない場合は、下辺をナナメに折り返して跡をつけ、それを目印に折っても、同じ効果が得られる。また、手元に洋形3号の封筒（幅98mm）があれば、それを目印としてあてがえば、さらに緻密な三つ折りができる。どの場合も、最初に折った辺を内側にし、あとから折る側を外側にするのがキレイに見えるコツである。\nとまあ、そんなわけであるが。\nそもそも、何故やりにくい「三つ折」にする必要があったのかが不思議だ。\n何故、最初から四つ折のサイズで封筒を作らなかったのだろうか？\n確かに、三つ折だと綺麗に見える。\n四つ折だと片側が膨らむので、見栄えもよくない。\n見栄えを気にしたのだろうか？\n","date":"2006-10-06T03:24:29+09:00","permalink":"https://www.nqou.net/2006/10/06/032429/","title":"Ａ４用紙を三つ折にする方法"},{"content":" ","date":"2006-10-05T07:52:51+09:00","permalink":"https://www.nqou.net/2006/10/05/075251/","title":"みんなのテニス"},{"content":" 1 my ($hoge1, $hoge2, $hoge3) = @_; 1 2 3 my $hoge1 = shift; my $hoge2 = shift; my $hoge3 = shift; \u0026lt;p\u0026gt;ここ最近は、最初のやり方を好んで使っている。\u0026lt;/p\u0026gt; ","date":"2006-10-04T03:44:22+09:00","permalink":"https://www.nqou.net/2006/10/04/034422/","title":"引数の受取り方法"},{"content":" 1 $elm = {} unless defined $elm; 1 $elm ||= {}; \u0026lt;p\u0026gt;「\u0026lt;a href=\u0026quot;http://www.amazon.co.jp/gp/product/4844322893?ie=UTF8\u0026amp;amp;tag=nqounet-22\u0026amp;amp;linkCode=as2\u0026amp;amp;camp=247\u0026amp;amp;creative=1211\u0026amp;amp;creativeASIN=4844322893\u0026quot;\u0026gt;まるごとPerl! Vol.1\u0026lt;/a\u0026gt;\u0026lt;img src=\u0026quot;http://www.assoc-amazon.jp/e/ir?t=nqounet-22\u0026amp;amp;l=as2\u0026amp;amp;o=9\u0026amp;amp;a=4844322893\u0026quot; width=\u0026quot;1\u0026quot; height=\u0026quot;1\u0026quot; border=\u0026quot;0\u0026quot; alt=\u0026quot;\u0026quot; style=\u0026quot;border:none !important; margin:0px !important;\u0026quot; /\u0026gt;」という本に、Perl6の事について触れられていたのだが、その中で「||=」について書かれていた。\u0026lt;br /\u0026gt; definedという関数は、未定義（undef）かどうかを判定して返す関数で、未定義以外の場合は真を返す。 なので、例えば$elmが「0」や「空文字列」だった場合は、左辺の式は実行されない。\n1 $elm //= {}; \u0026lt;/div\u0026gt; ","date":"2006-10-03T04:57:26+09:00","permalink":"https://www.nqou.net/2006/10/03/045726/","title":"undefと0と空文字列"},{"content":" 「Trackback Ping Link Lookup」 自ブログへのリンクが無いトラックバックを迷惑トラックバックとして扱います。\nという事なんですが。\nリンクが切れているようなので、配布元をメモっておく。\nhttp://svn.bulknews.net/viewcvs/public/mt-tb-link-lookup/trunk/tb-link-lookup.pl?view=markup\n","date":"2006-09-29T08:15:03+09:00","permalink":"https://www.nqou.net/2006/09/29/081503/","title":"便利なＭＴプラグイン"},{"content":"見るともなく古いファイルを見ていたら、変なコードを見つけた。\n1 2 3 4 5 6 7 8 9 10 11 12 13 sub get_1 {print \u0026#39;a\u0026#39;; 1;} sub get_2 {print \u0026#39;b\u0026#39;; 2;} sub get_3 {print \u0026#39;c\u0026#39;; 3;} print get_1; print get_2; print get_3; print \u0026#34;\\n\u0026#34;; print \u0026#34;-----\\n\u0026#34;; print get_1, get_2, get_3, \u0026#34;\\n\u0026#34;; print \u0026#34;-----\\n\u0026#34;; なんだろう？と思って実行してみてびっくりした。\nどこかで見た記憶があったので探してみたら、「a geek - perlの評価順」だった。\n同じネタで何度もびっくりしてしまうのは、記憶力の欠如ですか？\n1 2 3 4 a1b2c3 ----- abc123 ----- ","date":"2006-09-27T07:23:43+09:00","permalink":"https://www.nqou.net/2006/09/27/072343/","title":"実行順序"},{"content":"サブルーチンで初期値を持っておきたい時や、サブルーチン呼び出し時に引数で動作を色々と変更したい時などに便利なコード。 どこで見たのかは忘れたけど、いいなぁと思って真似して使っていた。\n1 2 3 4 5 6 7 8 9 sub hoge { my %elm = ( foo =\u0026gt; \u0026#34;FOO\u0026#34;, bar =\u0026gt; \u0026#34;BAR\u0026#34;, @_ ); print $elm{foo}.\u0026#34;n\u0026#34;; print $elm{bar}.\u0026#34;n\u0026#34;; } 実際の呼び出し方法は、\n1 2 3 \u0026amp;hoge; \u0026amp;hoge(foo =\u0026gt; \u0026#34;ＦＯＯ\u0026#34;); \u0026amp;hoge(bar =\u0026gt; \u0026#34;ｂａｒ\u0026#34;); な感じ。\nただ、欠点がある。\n引数の数がちゃんと合っていないとwarningsで警告されるのだ。\nなので、最近はリファレンスを使っている。\nCGI.pmなんかでも使われている。\n1 2 3 4 5 6 7 8 9 10 11 sub fuga { my $elm = shift; $elm = {} unless defined $elm; my %elm = ( foo =\u0026gt; \u0026#34;FOO\u0026#34;, bar =\u0026gt; \u0026#34;BAR\u0026#34;, %{$elm} ); print $elm{foo}.\u0026#34;n\u0026#34;; print $elm{bar}.\u0026#34;n\u0026#34;; } 呼び出し方も括弧が一組付くだけであまり変わらない。\n1 2 3 \u0026amp;fuga; \u0026amp;fuga({foo =\u0026gt; \u0026#34;ＦＯＯ\u0026#34;}); \u0026amp;fuga({bar =\u0026gt; \u0026#34;ｂａｒ\u0026#34;}); 最近覚えたのだが、\n1 $elm = {} unless defined $elm; この行は、もっと簡単に\n1 $elm ||= {}; こうやって書くこともできる。\n","date":"2006-09-26T07:49:02+09:00","permalink":"https://www.nqou.net/2006/09/26/074902/","title":"サブルーチンに初期値を持たせる方法"},{"content":"ファイルのコピーでも使ったけど、正規表現で何かを取り出したいときに使いやすいコード。\n1 (my $to_dir = $to) =~ s|([^/]*?)$||; 例の場合は、ファイルパスからディレクトリ名を取り出す。 この場合$toは変更されない。 $toの中身が$to_dirにコピーされて、$to_dirに対して置換が実施される。 ２行に分けて書いても同じだが、１行で書けるのが便利。\n1 2 my $to_dir = $to; $to_dir =~ s|([^/]*?)$||; 置換の内容は、一番右の「/（スラッシュ）」よりも右側を、空文字列に置き換える（平たく言うと、削除する）。\n他にも、ファイル名だけを取り出してみたり、\n1 (my $filename = $path) =~ s|^.*/||; 拡張子（ファイル名のピリオド以降）を取り出してみたり、\n1 (my $ext = $path) =~ s/^.*.//; してみる。\n","date":"2006-09-25T03:55:18+09:00","permalink":"https://www.nqou.net/2006/09/25/035518/","title":"ファイルパスから正規表現で色々と取り出す方法"},{"content":"hail2u.net - Weblog - 圧縮フォルダを使わないようにするとエクスプローラがキビキビ動く\nやり方\n1 2 regsvr32 /u zipfldr.dll regsvr32 /u cabview.dll これをやったあと、関連付けを他のソフトにしておいたほうが良いらしい。\n","date":"2006-09-22T02:10:02+09:00","permalink":"https://www.nqou.net/2006/09/22/021002/","title":"これは覚えておかねばっ！"},{"content":"ファイルのコピーをする場合は、File::Copyというモジュールを使うのが良い。\n1 2 3 4 use File::Copy; my $from = \u0026#34;/user_dir/hoge/fuga.txt\u0026#34;; my $to = \u0026#34;/user_dir/fuga/hoge.txt\u0026#34;; copy($from, $to) or die \u0026#34;Can not copy `$from` to `$to`.\u0026#34;; ただし、コピーするためのフォルダ（ディレクトリ）が必要。 上の例の場合は、user_dirにfugaというディレクトリがないとコピーに失敗する。\nWebで運用するようなCGIの場合は、あらかじめディレクトリを作成しておいて、バックアップや一時ファイルを作ったりするので機能的には十分ではある。 ただ、ローカルでファイル管理をしようとした時などは、これだとかなり面倒だ。 ディレクトリごとコピーする簡単な方法はないものか？ …という需要はあると思うのだが、なかなかうまい方法が見つけられない。 とりあえず、File::Pathというモジュールを使うとできるようだが、もっと簡単な方法もあるかもしれない。\n1 2 3 4 5 6 7 use File::Copy; use File::Path; my $from = \u0026#34;/user_dir/hoge/fuga.txt\u0026#34;; my $to = \u0026#34;/user_dir/fuga/hoge.txt\u0026#34;; (my $to_dir = $to) =~ s|([^/]*?)$||; mkpath($to_dir); copy($from, $to) or die \u0026#34;Can not copy `$from` to `$to`.\u0026#34;; mkpathは致命的なエラーを吐いて死ぬのでエラー処理は特にしなくてもＯＫ。 あと、作ったディレクトリを知りたい場合は、\n1 my @dir = mkpath($to_dir); とすれば、@dirに作ったディレクトリのパスが入る。\nとにかく、これでファイルの操作も簡単だ。\n","date":"2006-09-21T08:11:32+09:00","permalink":"https://www.nqou.net/2006/09/21/081132/","title":"ファイルのコピー"},{"content":" 1 next if index $foo, \u0026#34;hoge\u0026#34;; 意味的には、$fooが「hoge」ではじまっていなければ次へ、という感じ。 例えば、hogeで始まるファイルだけをピックアップする場合に、ループの中でhoge以外を取り除くために使う。\n他のやり方としては、例えば正規表現を使うと、\n1 next if $foo !~ /^hoge/; とか、もう少し自然に書けば、\n1 next unless $foo =~ /^hoge/; とか。\n正規表現を使うと遅くなる、という噂があるので、ループなどではなるべく正規表現を使わないようにしよう、とか思いながらこういうコードを使うわけです。\n","date":"2006-09-20T08:26:47+09:00","permalink":"https://www.nqou.net/2006/09/20/082647/","title":"「○○○で始まらない文字列」を探す方法"},{"content":"さっき気付いたのだが、ActivePerlでモジュール管理をするプログラムの「PPM（Perl Package Manager）」が、GUIになっていた。\n","date":"2006-09-18T06:29:01+09:00","permalink":"https://www.nqou.net/2006/09/18/062901/","title":"ActivePerlのPPMがGUIな件"},{"content":"先日のエラーの影響もあって、最新版に置き換えた。\nさて、どうだろう。\n","date":"2006-09-17T17:57:57+09:00","permalink":"https://www.nqou.net/2006/09/17/175757/","title":"最新版に変更"},{"content":"変なことはしてないはずなのだが、FMABCP BBSがエラーのせいで、書き込んだり、最新の状態にしたりできない。\nまあ、自作なので面倒を見ないといけないわけだが…。\n","date":"2006-09-15T03:22:09+09:00","permalink":"https://www.nqou.net/2006/09/15/032209/","title":"またエラー？"},{"content":"少し前に両親から頼まれていた、ドルフィンツアーについて、を記したページを作った。\n…もうすぐ時期も終わりだが。\nもともと素材とかは面倒で使わないのだが、いざ探してみると本当に沢山あって迷う。\nそんな中で選んだのが。\nテーマが決まっているとまだ探しやすいのだが、これが例えばＲＰＧに使えそうな素材、と思って探すとなかなか思うようなものが見つからない。\nゲーム作りがなかなか進まないので、気分を変えるために素材探しをしたのが刺激になったのかもしれない。\n今のところ気になっているのは、\nDA\u0026rsquo;s Homepage -Room- COLORNIX フリー素材【幻想素材サイトFirst Moon】天使、悪魔、妖精、ドラゴンなどファンタジーイラスト素材と動物素材 ファンタジーフリー素材屋「竜棲星-Dragon\u0026rsquo;s Planet(ドラゴンズプラネット)」 こんな感じ。 ゲーム用だと、なんとなく「ドット絵」が相応しいかな?とか思ってみる。\nあと、やはりファンタジー系。\n幻想素材サイト First Moonさんの素材は、背景で使わせてもらったこともある。\n","date":"2006-09-13T15:13:23+09:00","permalink":"https://www.nqou.net/2006/09/13/151323/","title":"素材選び"},{"content":"3.32-jaです。\n","date":"2006-09-12T18:47:14+09:00","permalink":"https://www.nqou.net/2006/09/12/184714/","title":"アップデート"},{"content":" ","date":"2006-08-22T17:00:26+09:00","permalink":"https://www.nqou.net/2006/08/22/170026/","title":"アサヒ・生一丁"},{"content":" ","date":"2006-07-25T08:23:44+09:00","permalink":"https://www.nqou.net/2006/07/25/082344/","title":"広末涼子"},{"content":" ","date":"2006-07-19T03:53:20+09:00","permalink":"https://www.nqou.net/2006/07/19/035320/","title":"スティーブ・ジョブス氏のスタンフォード大学卒業祝賀スピーチ"},{"content":" ","date":"2006-07-16T16:59:04+09:00","permalink":"https://www.nqou.net/2006/07/16/165904/","title":"チアガール編を思い出してみる"},{"content":" 1 2 3 4 5 6 7 8 if ($CGI::Session::VERSION \u0026lt; 4) {# Ver3.xx require CGI::Session::MySQL; $CGI::Session::MySQL::TABLE_NAME = \u0026#34;\u0026#34;;# -w対策 $CGI::Session::MySQL::TABLE_NAME = $tn-\u0026gt;{session}; $session = CGI::Session-\u0026gt;new(\u0026#34;dr:MySQL\u0026#34;, $cgi, {Handle =\u0026gt; $dbh}); # クッキーやフォーム情報からＩＤを自動的に取得する。なければ新しく作成。 } else { # Ver4.xx $session = CGI::Session-\u0026gt;new(\u0026#34;dr:mysql\u0026#34;, $cgi, {Handle =\u0026gt; $dbh, TableName =\u0026gt; $tn-\u0026gt;{session}}); # クッキーやフォーム情報からＩＤを自動的に取得する。なければ新しく作成。 } \u0026lt;p\u0026gt;4.xxでも、動作は確認した。\u0026lt;/p\u0026gt; 1 2 if (eval q{require CGI::Session::MySQL}) { ... ","date":"2006-06-26T15:55:57+09:00","permalink":"https://www.nqou.net/2006/06/26/155557/","title":"結局バージョンを見るしか…。"},{"content":" ","date":"2006-06-26T07:27:27+09:00","permalink":"https://www.nqou.net/2006/06/26/072727/","title":"ダメだった。"},{"content":" ","date":"2006-06-21T09:36:50+09:00","permalink":"https://www.nqou.net/2006/06/21/093650/","title":"半端なクールビズ"},{"content":" 1 2 3 4 5 6 7 8 if (eval q{require \u0026#34;CGI::Session::MySQL\u0026#34;}) { # Ver3.xx $CGI::Session::MySQL::TABLE_NAME = $tablename; $session = CGI::Session-\u0026gt;new(\u0026#34;dr:MySQL\u0026#34;, $cgi, {Handle =\u0026gt; $dbh}); } else { # Ver4.xx $session = CGI::Session-\u0026gt;new(\u0026#34;dr:mysql\u0026#34;, $cgi, {Handle =\u0026gt; $dbh, TableName =\u0026gt; $tablename}); } ","date":"2006-06-07T23:34:04+09:00","permalink":"https://www.nqou.net/2006/06/07/233404/","title":"CGI::Session対策"},{"content":" 1 2 3 4 use CGI::Session qw(-ip_match); use CGI::Session::MySQL; $CGI::Session::MySQL::TABLE_NAME = $tablename; my $session = CGI::Session-\u0026gt;new(\u0026#34;dr:MySQL\u0026#34;, $cgi, {Handle =\u0026gt; $dbh}); 1 2 use CGI::Session qw(-ip_match); my $session = CGI::Session-\u0026gt;new(\u0026#34;dr:mysql\u0026#34;, $cgi, {Handle =\u0026gt; $dbh, TableName =\u0026gt; $tablename}); ","date":"2006-06-01T02:49:23+09:00","permalink":"https://www.nqou.net/2006/06/01/024923/","title":"CGI::Session Ver4.xx"},{"content":" ","date":"2006-05-26T22:35:56+09:00","permalink":"https://www.nqou.net/2006/05/26/223556/","title":"モジュールの一括更新"},{"content":" \u0026lt;p\u0026gt;だったら、ユーザに作ってもらおうか。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;ついでに、最強のユーザは大魔王になって、世界に君臨することができるとか、\u0026lt;br /\u0026gt; PKはOKだけど、治安部隊に見つかったら逮捕されるとか、、。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;ついでにモンスター工場とか作って、ユーザにモンスター作ってもらうとか。\u0026lt;/p\u0026gt; ","date":"2006-04-27T06:12:41+09:00","permalink":"https://www.nqou.net/2006/04/27/061241/","title":"思いつき"},{"content":" \u0026lt;p\u0026gt;というか、本を読め、って事なんだろうなぁ。\u0026lt;br /\u0026gt; Perlの本どころか、本自体最近読んでないね。 ","date":"2006-04-26T04:58:42+09:00","permalink":"https://www.nqou.net/2006/04/26/045842/","title":"My Favorite Perl Modules"},{"content":" ","date":"2006-04-26T04:03:23+09:00","permalink":"https://www.nqou.net/2006/04/26/040323/","title":"和訳"},{"content":" ","date":"2006-02-10T06:41:46+09:00","permalink":"https://www.nqou.net/2006/02/10/064146/","title":"トリビアの泉的エスカレーターの乗り方"},{"content":" ","date":"2006-02-10T01:59:49+09:00","permalink":"https://www.nqou.net/2006/02/10/015949/","title":"ＤＳどうしで通信"},{"content":" ","date":"2006-02-10T01:56:06+09:00","permalink":"https://www.nqou.net/2006/02/10/015606/","title":"芸人魂と結婚"},{"content":" ","date":"2006-01-22T14:21:21+09:00","permalink":"https://www.nqou.net/2006/01/22/142121/","title":"全曲集ひさしぶりに更新！"},{"content":" ","date":"2006-01-18T04:11:32+09:00","permalink":"https://www.nqou.net/2006/01/18/041132/","title":"遺伝子が求める遺伝子"},{"content":" ","date":"2006-01-14T15:15:51+09:00","permalink":"https://www.nqou.net/2006/01/14/151551/","title":"我が家のオークション"},{"content":" ","date":"2006-01-04T23:49:58+09:00","permalink":"https://www.nqou.net/2006/01/04/234958/","title":"おいでよ どうぶつの森"},{"content":" ","date":"2005-12-31T15:00:00+09:00","permalink":"https://www.nqou.net/2005/12/31/150000/","title":"明けましておめでとうございます"},{"content":" ","date":"2005-12-08T02:25:50+09:00","permalink":"https://www.nqou.net/2005/12/08/022550/","title":"ろいほ?"},{"content":" ","date":"2005-11-22T03:14:38+09:00","permalink":"https://www.nqou.net/2005/11/22/031438/","title":"BlogPetとMovableType3.2"},{"content":" ","date":"2005-11-09T23:47:14+09:00","permalink":"https://www.nqou.net/2005/11/09/234714/","title":"3.2-ja-2"},{"content":" ","date":"2005-09-18T05:32:36+09:00","permalink":"https://www.nqou.net/2005/09/18/053236/","title":"成田空港のヤフーカフェにて"},{"content":" ","date":"2005-08-23T07:35:44+09:00","permalink":"https://www.nqou.net/2005/08/23/073544/","title":"携帯の液晶"},{"content":" ","date":"2005-08-23T07:22:56+09:00","permalink":"https://www.nqou.net/2005/08/23/072256/","title":"またまた携帯機種変更"},{"content":" ","date":"2005-08-03T06:08:09+09:00","permalink":"https://www.nqou.net/2005/08/03/060809/","title":"和黒（わっこく）"},{"content":"WindowsXPには簡単に画像の一覧を印刷する機能がついているのだが「配置やサイズは適宜調整されます」がネック。\nなぜ拡大縮小ではなく、トリミングされるのだろう？\n","date":"2005-06-20T01:12:10+09:00","permalink":"https://www.nqou.net/2005/06/20/011210/","title":"画像の一覧印刷"},{"content":"特に何かあったわけでもないのだが、実家に行った。\nしかも二週連続で。\n…あえて言えば、父の日だから？\n","date":"2005-06-20T00:33:48+09:00","permalink":"https://www.nqou.net/2005/06/20/003348/","title":"実家へ"},{"content":"今日、郵便局で通帳の更新を数年ぶりにした。 住所、印鑑も同時に変更した。\n新しい通帳は、記入が多くの銀行と同じように横向きになった。 なので、ATMに入れるときの方向が変わってしまった。 見開きの状態で入れるのが気に入っていたんだけど。残念だ。\nというか、印鑑部分の保護などもされていて、少し前の銀行の通帳と同じような感じになった。 せめて郵便貯金くらいは独自路線を貫いて欲しいと思ったのだが、費用がかかるのかもしれない。\n民営化されるかどうかはわからないが、もしされた場合、また仕様が変わったりするのだろうか？ そうなったら、また費用がかかることになるね。\n","date":"2005-05-17T08:17:01+09:00","permalink":"https://www.nqou.net/2005/05/17/081701/","title":"貯金通帳の更新"},{"content":" ","date":"2005-05-17T06:36:14+09:00","permalink":"https://www.nqou.net/2005/05/17/063614/","title":"上戸彩 （うえと あや）"},{"content":"そういえば、4月のはじめごろにノートパソコンを買った。 ｈｐの「compaq nx9030」だ。\n","date":"2005-05-17T02:54:26+09:00","permalink":"https://www.nqou.net/2005/05/17/025426/","title":"そういえばノートＰＣを買っていた"},{"content":"ラスベガスでの5泊を終え、日本へ帰る日がやってきた。 日付変更線と時差の関係で暦上は二日かかる。 あっという間に夢から覚めることになる。\n帰りはラスベガスからロサンゼルスを経由して関西空港へ。\nラスベガスと比べるとロサンゼルスは治安が悪い。 …ま、ラスベガス自体が大きなテーマパークのようなものだとは思うので、比べることはナンセンスなのかもしれないが。\n帰りの便は幸いにも機内はすいていたので、中央の4人部分を2人で使うことができた。 疲れもあったのだろうが、広く使えると思うとよく眠れる。 何度か目を覚ましながらも十分な睡眠を確保できたと思う。 帰りはあっという間についた。\n今回のラスベガスでは、ある意味禁断の領域に踏み込んだと思う。 感化されやすいせいもあるのだが、日本に帰ってきて色々思った。 特に公共の場でのマナー。 ま、他人のことはあまり言えないのだが。\nもう土日の夕方に回転寿司やファミレスなどで外食することができなくなるかもしれない。 ラスベガスのバフェと比べてしまうと、客のマナーがぜんぜん違う。 バフェの値段はせいぜいファミレス程度。 しかし、客の質はもっと高級な店でもおかしくないくらいだ。 子供が少ないとか、店の広さのせいもあるのかもしれないが…。\n","date":"2005-05-16T08:52:19+09:00","permalink":"https://www.nqou.net/2005/05/16/085219/","title":"夢から覚めた日（帰国）"},{"content":"今日は事実上の最終日。 なので早朝から作戦会議。 …実際には妻が下調べをしたなかから行動を選択する形なのだが。 移動手段にはトロリーを選択した。 まずはミラージュからＮＹＮＹへ行く。\nバフェは朝7時から。プールは朝8時からということで、まずはバフェへ。\n昨晩のうちにたまっていたポイントを精算していたので、バフェ無料券をもらっている。 新規メンバーは少ないポイントでもＴシャツをもらえたりバフェをもらえたりする特典がある。 それを利用したわけだ。\nバフェには優先レーンが設けられている。普通のところに並んでいると、優先レーンのほうにセレブっぽい女性がプレイヤーズクラブのカードを持ってならんだ。当然優先されて中に入っていった。 …まあ、バフェは中に入ってしまえば一緒のようだったが。\n水着を着ていったので、バフェ終了後そのままプールへ。 さすがに朝だからか、それとも平日だからか、結構すいていた。…むしろ寒かったからかもしれない。日陰に入ると結構冷える。 すいていたのでクッションがついた椅子を使うことができた。\nさすがに水に入るのはやめにして、ジャグジーだけを利用。 あがった後はじっくりと体の両面を焼いた。 朝とはいえ結構焼ける。やはり一時間程度が限界か。 …もしかして、皮膚が弱いのだろうか？\n部屋で体についた塩素を落とし、改めて外出。 トラムでミラージュへ行き、裏側という北口を目指していく。 …看板が見当たらないので妻がホテルの人に尋ねると、この辺ではなくあっちのほうだということだった。 なので、あっちのほうへ行ってみる。 …あっちへ行くと、どんどんＴＩが近くなってくる。 ほとんどＴＩだと思ったとき、妻が道路の向こうにトロリー乗り場を見つけた。しかも、その向こうにトロリーが見えた。急げば間に合いそうだ、ということで走った。 （翌日トロリー乗り場の場所を確認すると、ＴＩのタクシー乗り場からの方が圧倒的に近かった…）\nちゃんと間に合ってトロリーに乗り込んだ。 座席数が思ったより少なくて座ることはできなかったのが残念だ。 エンジンの音がうるさい。というか運転が激しいのかもしれないが。 運転士が観光案内もするのがトロリーなのか、運転中ずっとしゃべっていた気がするほどしゃべっていた。しかもマイク無しで。陽気な運転士だった。\n無事ＮＹＮＹに到着し、その流れでカジノへ。 ここもＭＧＭの系列なのでポイントがたまる。 色々なカジノで遊んでも無駄にならない（無駄は言いすぎだが）のは嬉しい。 前回はアラジン以外ではほとんどカジノをしなかったから。 …まあ、遊ぶ前にプレイヤーズクラブのようなものに入ればすむ話だけど。\n映画のターミネーターをモチーフにしたビデオスロットがあったので、まずはそれで遊ぶ。 ボーナスゲームが結構スリルあった。\n気のせいかもしれないが、音の大きいものは良く出る気がする。 まあ、結果的には負けているのだからあてにはならないとは思うけど。\n本当はこの後、さらに南へ行く予定だったのだが、なんとなく予定を変更してＭＧＭを通ってｍ＆ｍにより、そのあとモンテカルロへ。 その中のピザ屋で昼食をとった。 …１ピースが皿1枚くらいの大きさだ。\nその後、トラムでベラージオまで戻り、後は歩いて部屋まで。 この数日間、よく歩いたものだと思う。\n部屋である程度の帰り支度をしたあと、いつでも見ることができると思ったからか結局最終日になってしまったＴＩの無料ショー「Sirens of TI」を見に行った。 とても無料で見ることができるとは思えないような凄いショーだった。 ホテルのカードキーを見せないと入れないゾーンからの見物は凄いものがあった。 ショーが終わったあと水から上がってくる出演者も間近に見ることができた。\nさて、明日は朝早いのでコンプの申請をしにプレイヤーズクラブへ。 今からだとカフェくらいしか使えないのでカフェのコンプをもらおうと思ったら、なんだかとんでもないことに。 係の人としゃべっていたら突然電話をかけて、少ししゃべった後代わるように言われた。 当然、電話の向こうから英語が聞こえてきたのだが、なんともさっぱりわからない。 しばらく会話にならない会話をしていたら、電話の向こうで電話をしているような声が。 その電話が終わると、係の人の隣から女性が来て受話器を返すように言った。 電話で話していたのは彼女だったらしい。\n彼女いわく、次回は部屋を無料にします。ということだった。 なんと、ルームコンプをもらったらしい。 今回はツアーの中にホテル料金も含まれていたので、次回に持ち越しというわけだ。 渡された名刺を見ると、肩書きが「Executive Slot Host」。 ちょっとぼ〜っとしながら、カフェのコンプももらった。\n軽い興奮状態のままカフェへ行って夕飯、というか夜食。 数日前に来たときは入り口に近い場所だったのだが、今回は奥のほうまで連れて行かれた。 様子からすると、奥の方はコンプの人専用の領域のようだ。\n露骨にも見えるサービスの違いだが、悪い気はしない。戸惑いは隠せないが。 どうも、今までとは違う領域に一歩踏み込んでしまったようだ。 これがサービスというものなのだろうか。\n日本では勝手に取られているサービス料。 サービスに対する考えの違いは、こういう場所で出てくるのかもしれない。 ラスベガスは大人の街だと思った。\nこの後、調子に乗って朝近くまでカジノで遊び倒したのは言うまでも無い。 次にラスベガスに来るときに、TIを使わない理由は無いのだから。\n","date":"2005-05-16T07:14:33+09:00","permalink":"https://www.nqou.net/2005/05/16/071433/","title":"ラスベガス滞在記（五日目）"},{"content":"ようやく平日になったので、ツアーの特典であるベラージオのランチバフェをいただきにいった。 そこからフォーラムショップ（目的はディズニーストアだったのだが）へというルートだ。\nベラージオのランチバフェは（ちゃんと買えばそれなりに高いだけあって）なかなか良かった。 ただ、グレープフルーツジュースはＴＩの方がおいしいと思った。 ほとんど並ばずに座ることができたので、あまり人気が無いのか？、と思ったのだが、帰るころには結構並んでいたので運が良かっただけらしい。\nバフェではいろんなものを少しずつ食べるほうだが、中には海老だけを山盛食べている人もいた。 そもそも皿自体が大きい。…ま、皿に限らず大きいのだが。 実際には結構な量なのだが、見た感じだとそんなに多くないように見えるのだ。 で、食べ始めるとなかなか量が減らない。 慣れるまで食べ過ぎて大変だった。\nさて、ベラージオもＭＧＭの系列なので、ここでもカジノで遊んだ。 ベラージオはあまり当らないという噂だったが、それほどでもなかった。…ま、妻のほうはそうでもないようだったが。\n適度に切り上げて、フォーラムショップへ。 目的地はディズニーストアとチーズケーキファクトリー。 …で、ディズニーストアはなくなっていた。残念。他にも改装中が多いのか入れない店が結構あった。 チーズケーキファクトリーでは、行列ができていた。…が、イートインの方らしく、持ち帰りはほとんど並んでいなかったので助かった。 バフェでもデザートを食べたので、とりあえず夜のデザートにということで一つずつ購入。 正直言って一つで十分だったとは思う。結果的には二つとも食べたけど。\n","date":"2005-05-16T03:45:05+09:00","permalink":"https://www.nqou.net/2005/05/16/034505/","title":"ラスベガス滞在記（四日目）"},{"content":"三日目は中休み。 明日以降のためにゆっくりしようと考えた。 というか、正直疲れていた。\n予定としては、プールとＴＩの無料ショーくらいを考えていた。\n午前中にプールへ行った。 ラスベガスの日差しは想像以上に強いものらしく、午前中であるにもかかわらず焼けているのが感じられるほどジリジリ焼かれた。 小一時間ほどで境目がくっきりするほど色がついた。\n午後、近くなので、オープンしたてのWynnホテルを見物に。 その後、妻の買い物についていったのだが途中で眠気に負けた。 眠気をどうにかしようと色々苦心したのだが無駄だった。 結局先に帰ることにし、部屋で寝た。\n","date":"2005-05-16T03:39:09+09:00","permalink":"https://www.nqou.net/2005/05/16/033909/","title":"ラスベガス滞在記（三日目）"},{"content":"昨晩の負けは置いといて、二日目はMGMのショーを見に行く予定だ。 ついでに南の方向を攻める。 ルート的にはミラージュからアラジン、NYNY、そして、MGMのルートだ。\n今夜はショーと言う事で、服装を少し整えて外出。 まずは隣のホテル、ミラージュへ。\nＴＩからミラージュへは無料のトラムがあるので移動は楽チン。 で、時間もあると言う事でシークレットガーデンという、ちょっとした動物園のような場所へ寄る事にした。 前回は雨だったので満足に見る事が出来なかった場所でもある。\n突き刺さるほどの日差しの中、イルカを見る。 実はそこのイルカプールは水中の様子を見る事が出来るようになっていた。前回は気付かなかった…というか、そこまで余裕が無かったのかもしれない。 ショーと言う形ではなく、普通の生活をしているようなイルカを見るのも面白い。 途中、係員がボールを投げ入れたり、ジャンプの練習をしたりしていた。\nさて、前回は行けなかった奥へと進む。 そこには象、黒ヒョウ、トラ、ライオンがいた。 雰囲気は動物園だけど、檻ではなくて二重になったフェンスが境界にあるだけだ。 デジカメを動画モードで撮影していたら、トラが観客を威嚇していた。 ライオンは草を食べ、象は砂を浴び、黒ヒョウはそっぽ向いて寝ていた。 何とも不思議な空間だ。\nお昼になったのでランチのためにアラジンへ。 当初の予定では、土曜日である二日目にベラージオのランチバフェの予定だったのだが、平日しか使えない事が判明したので、アラジンのランチバフェに変更することにした。 妻が足が痛いと言い出した（少々無理をして履いてもらっていた靴のせいかも？）ので、一旦部屋に帰って靴を変えてからタクシーで移動。 アラジンは前回の宿だったので勝手は大体分かっている。\n到着後、前回のポイントを確認（前回の深夜の分が未精算だったから）した。 結果＄５のキャッシュバック。少しだが予算の足しにする。\nランチバフェを堪能（オレンジジュースが美味しい）したが、思ったより食べられない。 残すのは気が引けるのだが、仕方なく残す。 …が、この街はそういうことは気にしないのだろう。食べ残しのある皿もどんどんさげられる。\nさて、アラジンから徒歩でＭＧＭ方面へ。 途中にある、ハワイアンマーケット、コカコーラ、ｍ＆ｍなどでお土産品を買い込み、ＭＧＭでライオンを見物。 カジノからライオンを見る事が出来るのだ。 ガラスかアクリルかは不明だが、透明なトンネル状の場所があって、その屋根の部分でライオンが寝そべっていた。 ライオンを至近距離、しかも真下から見る事が出来るというのは、すごく不思議な感じ。 しかも、囲いの無い場所に人間が。 飼育係かどうか不明だが、ライオンの頭を撫でている！\n…ラスベガスは不思議なところだ。\n適度にカジノを楽しみ、ショーの前にＮＹＮＹへ。 目的はマンハッタンエクスプレスという名前のジェットコースター。 乗り場は建物の中にあると言う事にビックリ。 それと、予想以上に混んでいる！ 一番前に乗りたかったのだが、無理も言えなさそう。しかも、前後の間隔が狭い席だったので視界があまり良くない。 ちょっと残念な気持ちで出発。\n建物の外に出てゆっくりと頂上を目指してガタンガタンと上がっていく。 そして、頂上で風景を見る間もほとんど無く急降下。 トップスピードになるまでの加速が自然落下のようで息が詰まる。 宙返りや180度の捻り、そしてスピードはそれなりだけど激しいアップダウンで身体が放り出されそうになる。 動きも知らないし、見えない分予想外の動きで翻弄されていた。 最後に建物の中に突っ込む時はゆっくりだが、真っ暗の中で再加速したのが予想外でビックリ。 $12.50は少々高いが、コースター好きなら乗る価値はあると思われる。 ＮＹＮＹのコンプなら待ち時間無しで乗れるようだ（実際に１人いた）。\n戻ると妻がとても眠そうだった。 このあと今回のメインとも言えるＭＧＭのショー（「KA」という）が待っているのだが、大丈夫だろうか？\nそんなわけで、またＭＧＭに戻って、ライオンを見ながらカジノにいそしむ。 そして開演の30分前くらいを目途に会場へ。 のども渇いたことだし、ビールと妻は水を片手に会場の中へ入る。\n…ＭＧＭは全体的に照明が暗く感じられる。 KAの会場もそうだった。 暗い会場の中で、座席の案内をしてくれる人々もショーの役をしているかのよう。 そして舞台を見る。\n前回見た「O」の時と違って、ここは緞帳が無い。 水の「O」と、火の「KA」。 そういえば、見たいと思ったきっかけはテレビだった。\nで、舞台を見たのだが、舞台が…無い？ 舞台の場所にあるのは、細い通路、そしてその後ろにはスモークと、時折噴出す炎。 「KA」はどうやって幕が開くのだろう？\n…中略…\nショーは素晴らしいものだった。 途中、息をするのを忘れる、という感覚を味わった。すっかり魅入っていたらしい。 そして、何度も息が詰まるシーンがあり、最後には鳥肌になっているのを感じた。\n人間ってこういうことも出来るんだ?、という身体能力だけじゃなく、舞台装置を駆使することで、ここまで出来るんだ、という、裏方も一体になって出来たショーなんだと思って、思わず涙が出そうになった。\nオペラグラスは持っていったものの、結局ほとんど用無し。 やっぱり肉眼で見たいと思った。\nさて、帰りはモノレールで近くのホテルまで。 思った以上にスピードを出すようで、かなり揺れが激しい。 それに、なぜか移動中は照明が少し暗くなる。利用者はそこそこいるが、なかなか気味が悪い。\n部屋に帰る前に、夜食代わりにマクドをテイクアウト。 着いた頃には、ポテトは冷めていた。 …でも、マクドは隣のホテルの向かいにあるのだ。 どのくらい歩いたか想像つくだろうか？\n","date":"2005-05-10T05:55:33+09:00","permalink":"https://www.nqou.net/2005/05/10/055533/","title":"ラスベガス滞在記（二日目）"},{"content":"ラスベガス、マッカラン空港に着いたのが、5/6の朝10時前。 その後世界早巡りツアーなるものに行った。 ルクソール→NYNY→パリス…\n予定よりも早く飛行機が到着したせいで税関が開くまでしばらく待つことに。 アナウンスでは5分程度待ちとのことだったが、気持ち的には10分以上待った。\n座席が２階席の後ろのほうという事もあって、入国審査の時は前のほうに並べたのだが、どんどん後から人が増えてきた。 座席を指定するときに「後ろのほうなら二人席がある」と言われたが、断っておいてよかったと思った。\n入国審査の時、英語で答えるつもりで準備していたのだが「観光？仕事？」と日本語で訊かれて拍子抜けした。確かに日本語で話せば楽なのだが、何故かしどろもどろになってしまった。 通ったときには、荷物は全部到着していて、探すのが大変だった。準備の間も荷物は降ろされていたのだろう。 ま、待つよりはマシなのだが。\nで、ここまでは順調だった。\n税関を抜けてツアーの集合場所へ。 さすがに日本からの直行便だからか、日本系のツアーの係員が多い。 ここで早巡りツアーの待ち合わせをする事に。あと１６人いる、ということだったので、そこそこ待つだろうとは思ったのだが、まさか一時間以上待つなんて。 いつ来るか分からない他人を待つのは必要以上にイライラする。 本人たちは何も思わないのだろうけど、一言あっても良かったのでは？と思った。\nさて、気を取り直して先ずは第一目的地のルクソール。 斜めに上がるエレベーターには乗れなかったが、軽くカジノで勝負。 １ドルが３ドルになったので、少しは気が晴れた。\nそのあと、ニューヨークニューヨークの斜め向かいからNYNYを一望。 マンハッタンエクスプレスに乗っている人たちの悲鳴・歓声がよく聞こえる。前回は乗れなかったので、今回はちゃんと乗ろう。\nさて、次はパリスだが、そろそろ眠気と団体行動への不適合が限界にきた。 ガイドさんに無理を言ってここでツアーから脱落。 タクシーで泊まるホテルに移動する。\nラスベガスは移動手段でお金が結構かかる。 ホテルとホテルが隣りあっているとはいえ、その隣に行くのに１０分以上かかることが普通にあるので、少し離れたホテルに移動するにはタクシーを使ってしまう。\nさて、泊まるホテルはＴＩ、トレジャーアイランドだ。 ここで、ホテルのチェックインのお手伝いをしてくれたのは、前回アラジンのチェックインの時もお世話になったナガクボさんだった。 部屋を選ぶとき、多少無理を言ってショーが見える部屋にしてもらった。 ホテルの宿泊者は優待席があるらしいので楽しみだ。\nツアーにはもうひとつ、ベラージオのランチバフェが特典で付いていたのだが、実は土日は使えないらしい。日本では説明を受けていなかったと思ったのだが。 当初は二日目にＭＧＭへ行く予定があったので、その時に寄っていくつもりだったので予定が狂った。\n…まあ、予定が狂うのは日常茶飯事。二人の旅行で予定通りに行ったためしは無い。\nさて、早巡りツアーでフォーラムショップに寄るつもりだったのだが、それは後日にすると言う事で、まずはファッションショーモールへ行く事に変更した。 …つもりだったのだが、妻の一言で、とりあえずプレイヤーズクラブカードを作る事に。 そして、気が付けばしばらくカジノで遊んでいた。\n…気を取り直して、ファッションショーに移動。 ＡＢＣストアというコンビニを目指して。 で、その前にカリフォルニアピザキッチンで昼食（？）を。 ご飯の最中、妻はうつらうつらと寝ていたらしい。\nご飯の後、水とプリングルスを仕入れてホテルに戻った。 妻はそのまま就寝。よほど疲れていたのだろう。 で、オレはカジノへ。 勝手が分からないので、とりあえず探索も兼ねて色々とまわった。\nだが、今回は妻のサインでトラベラーズチェックを作っているので、あまり軍資金が無い。 程々に切り上げて部屋に戻って寝た。\n…夜、ショーの花火で目が覚めた妻に起こされた。 その後、遅めの晩飯を食べ、またカジノへと消えていくのであった。\n","date":"2005-05-10T05:54:30+09:00","permalink":"https://www.nqou.net/2005/05/10/055430/","title":"ラスベガス滞在記（一日目）"},{"content":"Yahooカフェから書き込みだ。\nとうとう雨が降り始めた。 16:00発の便だが、大丈夫だろうか？\n","date":"2005-05-06T05:15:29+09:00","permalink":"https://www.nqou.net/2005/05/06/051529/","title":"成田空港"},{"content":"ただいまラウンジオーサカより書き込み中。\nこの後成田へ行き、夕方からラスベガスに出発だ。\n…このラウンジは空調が効き過ぎだ。 寒い。\n","date":"2005-05-05T22:45:09+09:00","permalink":"https://www.nqou.net/2005/05/05/224509/","title":"伊丹空港"},{"content":" ","date":"2005-05-02T07:06:58+09:00","permalink":"https://www.nqou.net/2005/05/02/070658/","title":"石原さとみ （いしはら さとみ）"},{"content":" ","date":"2005-04-26T08:07:26+09:00","permalink":"https://www.nqou.net/2005/04/26/080726/","title":"ラスベガスに行く"},{"content":" ","date":"2005-04-01T03:58:43+09:00","permalink":"https://www.nqou.net/2005/04/01/035843/","title":"家庭内ＬＡＮが我が家にも"},{"content":" ","date":"2005-02-21T15:24:09+09:00","permalink":"https://www.nqou.net/2005/02/21/152409/","title":"携帯の機種変更"},{"content":" ","date":"2005-02-15T15:34:35+09:00","permalink":"https://www.nqou.net/2005/02/15/153435/","title":"バージョンあっぷ"},{"content":" ","date":"2005-01-13T07:15:11+09:00","permalink":"https://www.nqou.net/2005/01/13/071511/","title":"ラスベガスに行ってきた（最終日）"},{"content":" ","date":"2005-01-13T05:39:19+09:00","permalink":"https://www.nqou.net/2005/01/13/053919/","title":"ラスベガスに行ってきた（５日目）"},{"content":" ","date":"2005-01-06T08:02:26+09:00","permalink":"https://www.nqou.net/2005/01/06/080226/","title":"ラスベガスに行ってきた（４日目）"},{"content":" ","date":"2005-01-06T06:20:22+09:00","permalink":"https://www.nqou.net/2005/01/06/062022/","title":"ラスベガスに行ってきた（３日目）"},{"content":" ","date":"2005-01-05T02:30:33+09:00","permalink":"https://www.nqou.net/2005/01/05/023033/","title":"ラスベガスに行ってきた（２日目）"},{"content":" ","date":"2005-01-05T01:46:36+09:00","permalink":"https://www.nqou.net/2005/01/05/014636/","title":"ラスベガスに行ってきた"},{"content":" ","date":"2004-12-30T19:25:12+09:00","permalink":"https://www.nqou.net/2004/12/30/192512/","title":"ロサンゼルスより"},{"content":" ","date":"2004-11-25T13:58:09+09:00","permalink":"https://www.nqou.net/2004/11/25/135809/","title":"自動投票に左右される不条理"},{"content":" ","date":"2004-11-19T01:34:53+09:00","permalink":"https://www.nqou.net/2004/11/19/013453/","title":"伝説の村"},{"content":" ","date":"2004-11-15T04:16:25+09:00","permalink":"https://www.nqou.net/2004/11/15/041625/","title":"人狼α プレイ一覧"},{"content":" ","date":"2004-11-05T02:43:16+09:00","permalink":"https://www.nqou.net/2004/11/05/024316/","title":"人狼ぶろぐ？"},{"content":" ","date":"2004-11-03T10:29:39+09:00","permalink":"https://www.nqou.net/2004/11/03/102939/","title":"人狼まみれ"},{"content":" ","date":"2004-10-22T01:43:55+09:00","permalink":"https://www.nqou.net/2004/10/22/014355/","title":"人狼セカンドプレイ"},{"content":" ","date":"2004-10-22T01:10:59+09:00","permalink":"https://www.nqou.net/2004/10/22/011059/","title":"人狼初プレイ"},{"content":" ","date":"2004-10-18T02:12:48+09:00","permalink":"https://www.nqou.net/2004/10/18/021248/","title":"オレ的人狼BBSの読み方"},{"content":" ","date":"2004-10-18T01:26:09+09:00","permalink":"https://www.nqou.net/2004/10/18/012609/","title":"人狼！"},{"content":" ","date":"2004-10-18T01:19:10+09:00","permalink":"https://www.nqou.net/2004/10/18/011910/","title":"くらくら"},{"content":" ","date":"2004-10-18T01:04:36+09:00","permalink":"https://www.nqou.net/2004/10/18/010436/","title":"OHSHO"},{"content":" ","date":"2004-10-14T17:54:09+09:00","permalink":"https://www.nqou.net/2004/10/14/175409/","title":"汝は人狼なりや？すなわち人狼"},{"content":" ","date":"2004-10-14T07:53:21+09:00","permalink":"https://www.nqou.net/2004/10/14/075321/","title":"パズルゲームは好きですか？"},{"content":" 1 2 3 4 5 6 my $n = 10; my $sum = 0; for (my $i = 1; $i \u0026lt;= $n; $i++) { $sum += $i; } print $sum; \u0026lt;p\u0026gt;…ループは便利なのだが、先のプログラムでは$n回の足し算を行うことになる。\u0026lt;/p\u0026gt; 1 2 3 my $n = 10; my $sum = ($n + 1) * $n / 2; print $sum; ","date":"2004-10-14T05:42:52+09:00","permalink":"https://www.nqou.net/2004/10/14/054252/","title":"魔方陣とアルゴリズム"},{"content":" ","date":"2004-10-14T05:12:09+09:00","permalink":"https://www.nqou.net/2004/10/14/051209/","title":"ブログの輪"},{"content":" ","date":"2004-10-14T04:48:20+09:00","permalink":"https://www.nqou.net/2004/10/14/044820/","title":"しつこい勧誘電話"},{"content":"今夜はあきんどスシローへ。\nどうしても金沢の回転寿司と比較することになる。\n今日は高いヤツ（一貫もの）を多く食べた。\nそれでも料金は二人で2,800円くらい。\n","date":"2004-10-13T15:51:47+09:00","permalink":"https://www.nqou.net/2004/10/13/155147/","title":"大阪回転寿司"},{"content":" ","date":"2004-10-12T08:38:43+09:00","permalink":"https://www.nqou.net/2004/10/12/083843/","title":"動物に異変？"},{"content":" ","date":"2004-10-12T08:05:08+09:00","permalink":"https://www.nqou.net/2004/10/12/080508/","title":"よーく考えよう"},{"content":" ","date":"2004-10-12T07:20:07+09:00","permalink":"https://www.nqou.net/2004/10/12/072007/","title":"耳コピーと採譜と始まり"},{"content":" ","date":"2004-10-12T06:49:49+09:00","permalink":"https://www.nqou.net/2004/10/12/064949/","title":"パイプオルガン"},{"content":" ","date":"2004-10-12T05:34:58+09:00","permalink":"https://www.nqou.net/2004/10/12/053458/","title":"実家の商売"},{"content":" ","date":"2004-10-11T17:30:29+09:00","permalink":"https://www.nqou.net/2004/10/11/173029/","title":"無事帰着＆ガソリン単価"},{"content":" ","date":"2004-10-11T10:49:22+09:00","permalink":"https://www.nqou.net/2004/10/11/104922/","title":"金沢の回転寿司"},{"content":" ","date":"2004-10-09T17:27:17+09:00","permalink":"https://www.nqou.net/2004/10/09/172717/","title":"無線LAN"},{"content":" ","date":"2004-10-09T14:18:46+09:00","permalink":"https://www.nqou.net/2004/10/09/141846/","title":"昼はラーメン"},{"content":" ","date":"2004-10-09T13:49:28+09:00","permalink":"https://www.nqou.net/2004/10/09/134928/","title":"今日からオレの実家"},{"content":" ","date":"2004-10-08T16:10:54+09:00","permalink":"https://www.nqou.net/2004/10/08/161054/","title":"今期初（ちゃんこ）鍋"},{"content":" ","date":"2004-10-08T06:19:14+09:00","permalink":"https://www.nqou.net/2004/10/08/061914/","title":"らーめん"},{"content":" ","date":"2004-10-06T23:30:26+09:00","permalink":"https://www.nqou.net/2004/10/06/233026/","title":"最近の複合機"},{"content":" ","date":"2004-10-06T23:22:25+09:00","permalink":"https://www.nqou.net/2004/10/06/232225/","title":"超長距離運転"},{"content":" ","date":"2004-10-06T23:06:08+09:00","permalink":"https://www.nqou.net/2004/10/06/230608/","title":"塩ソフト"},{"content":" ","date":"2004-10-06T14:53:50+09:00","permalink":"https://www.nqou.net/2004/10/06/145350/","title":"へぎそば＆かまめし"},{"content":" ","date":"2004-10-05T14:40:57+09:00","permalink":"https://www.nqou.net/2004/10/05/144057/","title":"リンガーハット"},{"content":" ","date":"2004-10-04T14:45:08+09:00","permalink":"https://www.nqou.net/2004/10/04/144508/","title":"ウィンナー＆ナゲット＆…"},{"content":" ","date":"2004-10-04T00:59:25+09:00","permalink":"https://www.nqou.net/2004/10/04/005925/","title":"技術屋の理想"},{"content":" ","date":"2004-10-03T23:32:50+09:00","permalink":"https://www.nqou.net/2004/10/03/233250/","title":"余裕がない？"},{"content":"今夜の夕食はあきんどスシローでスシ。\n丁度混んでいる時間帯だったせいか、結構待った。\n帰る頃（８時くらい）には待っている人は少なかったけど。\n瞬間ピーク時は人が足りないんだろうなぁ。\n席が空いていても呼出が全然なかったりする。\nそうかと思えば、店員同士が雑談をしていたり、研修生（？）を教育するのに二人で行動していたり。\n待たされる身としては嫌なのだが。\n","date":"2004-10-03T14:06:43+09:00","permalink":"https://www.nqou.net/2004/10/03/140643/","title":"大回転"},{"content":"散髪にいってすっきりした。\nひげそり＆シャンプーで、計1,800円。\nわりと丁寧にひげを剃ってくれていたと思うのだが、結構残っている。\n自分でやったときに残るような場所（左のえらの下あたりとか）はきれいなのだが、普通にそれる部分は手触りで微妙に残っているのがわかる。\nやはり３枚刃の威力はすばらしい。\n","date":"2004-10-03T04:34:59+09:00","permalink":"https://www.nqou.net/2004/10/03/043459/","title":"三枚刃の威力"},{"content":" ","date":"2004-10-03T01:40:55+09:00","permalink":"https://www.nqou.net/2004/10/03/014055/","title":"となりの工事"},{"content":" ","date":"2004-10-03T01:24:28+09:00","permalink":"https://www.nqou.net/2004/10/03/012428/","title":"大量のうどん"},{"content":" ","date":"2004-10-01T23:01:32+09:00","permalink":"https://www.nqou.net/2004/10/01/230132/","title":"近所にできた新しい店"},{"content":" ","date":"2004-10-01T06:42:37+09:00","permalink":"https://www.nqou.net/2004/10/01/064237/","title":"落ち着いてきた？"},{"content":" ","date":"2004-09-30T16:10:57+09:00","permalink":"https://www.nqou.net/2004/09/30/161057/","title":"今夜のご飯"},{"content":" ","date":"2004-09-30T10:50:08+09:00","permalink":"https://www.nqou.net/2004/09/30/105008/","title":"トラックバックが…というよりは"},{"content":" ","date":"2004-09-30T10:35:21+09:00","permalink":"https://www.nqou.net/2004/09/30/103521/","title":"こうさぎはこうさぎだった"},{"content":" ","date":"2004-09-30T10:06:45+09:00","permalink":"https://www.nqou.net/2004/09/30/100645/","title":"ペットボトルのリサイクル"},{"content":" ","date":"2004-09-30T06:03:30+09:00","permalink":"https://www.nqou.net/2004/09/30/060330/","title":"スタイルシートの新技"},{"content":" ","date":"2004-09-30T04:17:47+09:00","permalink":"https://www.nqou.net/2004/09/30/041747/","title":"ファイルキャッシュの表裏"},{"content":" ","date":"2004-09-30T03:53:11+09:00","permalink":"https://www.nqou.net/2004/09/30/035311/","title":"カスタマイズすればするほど感じること"},{"content":"どうもコメントまわりがおかしい。\nとりあえず新しいブログをつくって、そっちの設定をもらうことにした。\n何が正しいのかわからない。\n","date":"2004-09-30T03:39:35+09:00","permalink":"https://www.nqou.net/2004/09/30/033935/","title":"カスタマイズ失敗"},{"content":" ","date":"2004-09-30T01:58:44+09:00","permalink":"https://www.nqou.net/2004/09/30/015844/","title":"テンプレート・モジュール大活用"},{"content":" ","date":"2004-09-29T13:29:44+09:00","permalink":"https://www.nqou.net/2004/09/29/132944/","title":"一家総出"},{"content":" ","date":"2004-09-29T13:24:07+09:00","permalink":"https://www.nqou.net/2004/09/29/132407/","title":"パスタ＆チーズフォンデュ"},{"content":" ","date":"2004-09-29T03:56:03+09:00","permalink":"https://www.nqou.net/2004/09/29/035603/","title":"なんでだろう？"},{"content":" ","date":"2004-09-29T03:52:55+09:00","permalink":"https://www.nqou.net/2004/09/29/035255/","title":"大した事ではないのだが"},{"content":" ","date":"2004-09-29T02:16:29+09:00","permalink":"https://www.nqou.net/2004/09/29/021629/","title":"「Convert Line Breaks」の表裏"},{"content":" 1 my $cgi = new CGI; 1 my $cgi = CGI-\u0026gt;new; ","date":"2004-09-29T01:54:15+09:00","permalink":"https://www.nqou.net/2004/09/29/015415/","title":"PerlでOOPをしているなぁと思う瞬間"},{"content":" ","date":"2004-09-28T16:39:07+09:00","permalink":"https://www.nqou.net/2004/09/28/163907/","title":"本日はピザなり"},{"content":" ","date":"2004-09-28T14:46:21+09:00","permalink":"https://www.nqou.net/2004/09/28/144621/","title":"「こうさぎ」導入"},{"content":" ","date":"2004-09-28T14:41:33+09:00","permalink":"https://www.nqou.net/2004/09/28/144133/","title":"というわけで実装しました"},{"content":" ","date":"2004-09-28T11:57:36+09:00","permalink":"https://www.nqou.net/2004/09/28/115736/","title":"よその羨ましい機能を盗め！"},{"content":" ","date":"2004-09-28T11:22:07+09:00","permalink":"https://www.nqou.net/2004/09/28/112207/","title":"トラックバックの別のやり方？"},{"content":" ","date":"2004-09-28T10:41:00+09:00","permalink":"https://www.nqou.net/2004/09/28/104100/","title":"CGI::Session関連リンク"},{"content":" \u0026lt;p\u0026gt;CGIでセッション管理を行うのは少々面倒くさいので、CGI::Sessionモジュールを使ってやる。\u0026lt;br /\u0026gt; セッションを読み込むのは、CGIオブジェクトをCGI::Sessionに渡してやるだけ。\n1 2 my $cgi = CGI-\u0026gt;new; my $session = CGI::Session-\u0026gt;new(\u0026#34;dr:MySQL\u0026#34;, $cgi, {Handle =\u0026gt; $dbh}); 1 2 3 4 5 6 7 8 9 10 $cgi-\u0026gt;append( -name =\u0026gt; \u0026#39;new_cookie\u0026#39;, -value =\u0026gt; [ $cgi-\u0026gt;cookie( -name =\u0026gt; $session-\u0026gt;name, -value =\u0026gt; $session-\u0026gt;id, -expires =\u0026gt; \u0026#39;+28d\u0026#39;, ), ], ); 1 2 3 print $cgi-\u0026gt;header( -cookie =\u0026gt; [$cgi-\u0026gt;param(\u0026#34;new_cookie\u0026#34;)], ); 1 use CGI::Session qw(-ip_match); ","date":"2004-09-28T10:16:17+09:00","permalink":"https://www.nqou.net/2004/09/28/101617/","title":"CGI::Sessionを使ってみる"},{"content":" ","date":"2004-09-28T09:27:59+09:00","permalink":"https://www.nqou.net/2004/09/28/092759/","title":"認証を含んだ処理の手順"},{"content":" ","date":"2004-09-28T06:55:25+09:00","permalink":"https://www.nqou.net/2004/09/28/065525/","title":"ゴミの日"},{"content":" 1 2 3 4 5 6 \u0026lt;$MTInclude module=\u0026#34;Links\u0026#34; $\u0026gt; ``` \u0026lt;p\u0026gt;テンプレート・モジュールの中でもMTタグが使えるのでどんどんモジュールを増やした。\u0026lt;br /\u0026gt; 右側にあるLinksから下は全部モジュールだ。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ","date":"2004-09-28T05:47:04+09:00","permalink":"https://www.nqou.net/2004/09/28/054704/","title":"テンプレート・モジュールを使う"},{"content":" ","date":"2004-09-27T13:25:30+09:00","permalink":"https://www.nqou.net/2004/09/27/132530/","title":"The Wars of Roses"},{"content":" ","date":"2004-09-27T11:45:41+09:00","permalink":"https://www.nqou.net/2004/09/27/114541/","title":"晩御飯"},{"content":"ピアノ講座のあと、みっちゃんを駅まで送っていった。\nそのあと、また別の友達の家へ押しかけていった。\n妻とＯ夫人が中学（だっけ？）からの仲良しさん。\nＯ夫妻には結婚前から夫婦共々お世話になっている。\nつい話しこんで、気がついたら日付が変わっていた。\nオレは最後のほうは眠気と空腹でダウン気味。\nで、帰りに近くの天一（淡路店）へ（好きだねぇ）。当然こってり。\nネギが多く、にんにくはきざんだヤツを盛り付けていた。オレは結構好きかも。\nが、妻はネギをいやがっていた。\n「にんにくはおろしたヤツよりもきざんだヤツのほうがよく効く。」\nというようなセリフを思い出した。\n食べたあとはそんなに感じなかったのだが、今朝になってかなりにんにく臭を発している事に気づいた。\nきざみにんにくはなかなか侮れない。\n味は悪くなかった。というか、普通に美味しかった。\nが、時間帯のせいか場所柄のせいか、怪しい人たちもいて落ち着かなかったのが残念。\n","date":"2004-09-27T05:22:42+09:00","permalink":"https://www.nqou.net/2004/09/27/052242/","title":"深夜の天一"},{"content":"公式サイト\nカバーばかり目立っていてあまり好きではなかったのだが「Perseus-ペルセウス-(CCCD)」や「Viola (CCCD)」を聴いてからはあまりこだわらなくなった。\nPerseus-ペルセウス-(CCCD)\nどこがどう好きなのかよくわからないけど好きな曲。\nViola (CCCD)\n胡弓（二胡）と思われる音色が奏でるアジアっぽい雰囲気が好き。\n","date":"2004-09-27T04:39:37+09:00","permalink":"https://www.nqou.net/2004/09/27/043937/","title":"島谷ひとみ （しまたに ひとみ）"},{"content":" ","date":"2004-09-27T03:31:10+09:00","permalink":"https://www.nqou.net/2004/09/27/033110/","title":"X JAPAN （えっくす じゃぱん）"},{"content":" ","date":"2004-09-27T03:30:03+09:00","permalink":"https://www.nqou.net/2004/09/27/033003/","title":"浜田麻里 （はまだ まり）"},{"content":" ","date":"2004-09-27T03:28:30+09:00","permalink":"https://www.nqou.net/2004/09/27/032830/","title":"宇多田ヒカル （うただ ひかる）"},{"content":" ","date":"2004-09-27T03:27:23+09:00","permalink":"https://www.nqou.net/2004/09/27/032723/","title":"Tommy February6 （とみー ふぇぶらりー）"},{"content":" ","date":"2004-09-27T03:20:58+09:00","permalink":"https://www.nqou.net/2004/09/27/032058/","title":"BoA （ぼあ）"},{"content":" ","date":"2004-09-27T03:13:47+09:00","permalink":"https://www.nqou.net/2004/09/27/031347/","title":"一青窈 （ひとと よう）"},{"content":" ","date":"2004-09-27T03:12:26+09:00","permalink":"https://www.nqou.net/2004/09/27/031226/","title":"キンモクセイ （きんもくせい）"},{"content":" ","date":"2004-09-27T03:11:30+09:00","permalink":"https://www.nqou.net/2004/09/27/031130/","title":"RAMJET PULLEY （らむじぇっと ぷーりー）"},{"content":" ","date":"2004-09-27T03:10:00+09:00","permalink":"https://www.nqou.net/2004/09/27/031000/","title":"於保 佐代子 （おほ さよこ）"},{"content":" ","date":"2004-09-27T02:45:40+09:00","permalink":"https://www.nqou.net/2004/09/27/024540/","title":"我が家の動物たち"},{"content":" \u0026lt;p\u0026gt;実際には、日本語変換や画像のサイズ取得など、お世話になっているモジュールやライブラリはあるのだけど。\u0026lt;br /\u0026gt; なんと言うか、気分的に解放されたと言うかそういう雰囲気（謎） モジュールの使い方をマスターする時間のほうが、作ってデバッグしてメンテナンスする時間よりもはるかに短いという事が、メリットとして自分自身の中で折り合いがついたのだろう。\n","date":"2004-09-27T01:52:17+09:00","permalink":"https://www.nqou.net/2004/09/27/015217/","title":"完璧主義と路線変更"},{"content":" ","date":"2004-09-26T07:48:58+09:00","permalink":"https://www.nqou.net/2004/09/26/074858/","title":"標準はXML（XHTML）？"},{"content":" ","date":"2004-09-26T07:43:22+09:00","permalink":"https://www.nqou.net/2004/09/26/074322/","title":"マロンの状態"},{"content":" ","date":"2004-09-26T07:21:55+09:00","permalink":"https://www.nqou.net/2004/09/26/072155/","title":"ピアノ講座？"},{"content":" ","date":"2004-09-25T14:20:12+09:00","permalink":"https://www.nqou.net/2004/09/25/142012/","title":"天下一品総本店"},{"content":"テンプレートの中でも、スタイルシートはまだわかる。\nが、テンプレートのテンプレートで表示したいもの（例えばカテゴリーとか）をどうやって表示するのかが、マニュアルを読んでもいまいちぴんと来ない。\n結局検索して、参考になりそうなサイトを二つほど。\n・プロが教えるMovable Typeの構造デザイン\n・HINAGATA\nまあ、そんなに深く探したわけじゃないけど。\nまず、最初のサイト（というか記事）ですが。\n多少なりともStrictなHTMLを目指して、StyleSheetの機能的デザインを考えたことがあるので、主旨はよくわかりました。\n特に私の場合、IDに依存するスタイルシートは好きではないので。\nただ、テンプレートが「Main Index」の分しかないので、他の分まで考える必要がありました。\nあと、記事が少々古いので現在のVer3.xに対応しているのかもわかりません。\nもしも、時間ができたら参考にしたいなと、いうことでリストアップ。\nで、次のサイト。\nここには、すべてのテンプレートが用意されていました。しかも、Ver3.xに対応していました。\nさらに、skinも用意されていました。\n手軽さで即採用決定。\n","date":"2004-09-24T19:36:28+09:00","permalink":"https://www.nqou.net/2004/09/24/193628/","title":"テンプレートのテンプレート"},{"content":" ","date":"2004-09-24T18:15:04+09:00","permalink":"https://www.nqou.net/2004/09/24/181504/","title":"Wikiを併用したほうが楽だった"},{"content":"かわいい系チャットを書いた\n","date":"2004-09-24T18:09:22+09:00","permalink":"https://www.nqou.net/2004/09/24/180922/","title":"NANO-Chat"},{"content":" ","date":"2004-09-24T18:06:31+09:00","permalink":"https://www.nqou.net/2004/09/24/180631/","title":"Incomprehensible Bulletin Board System"},{"content":"Cryptを拡張し最大32文字までを判別するモジュールを書いた\n","date":"2004-09-24T17:45:18+09:00","permalink":"https://www.nqou.net/2004/09/24/174518/","title":"LargeCrypt"},{"content":" ","date":"2004-09-24T17:27:26+09:00","permalink":"https://www.nqou.net/2004/09/24/172726/","title":"Cost"},{"content":" ","date":"2004-09-24T11:27:34+09:00","permalink":"https://www.nqou.net/2004/09/24/112734/","title":"マロン危機一髪！？"},{"content":" ","date":"2004-09-24T05:26:53+09:00","permalink":"https://www.nqou.net/2004/09/24/052653/","title":"移行していたコンテンツ"},{"content":" ","date":"2004-09-23T01:55:35+09:00","permalink":"https://www.nqou.net/2004/09/23/015535/","title":"参考にしたところとか"},{"content":" ","date":"2004-09-23T01:21:54+09:00","permalink":"https://www.nqou.net/2004/09/23/012154/","title":"トラックバックのテスト"},{"content":" ","date":"2004-09-23T01:09:45+09:00","permalink":"https://www.nqou.net/2004/09/23/010945/","title":"日本語テスト２"},{"content":" ","date":"2004-09-23T01:05:45+09:00","permalink":"https://www.nqou.net/2004/09/23/010545/","title":"日本語テスト"},{"content":" \u0026lt;p\u0026gt;glucoseを使って投稿してみるてすと。\u0026lt;br /\u0026gt; 作成日時のチェックをはずしてみた。 ","date":"2004-09-23T00:58:00+09:00","permalink":"https://www.nqou.net/2004/09/23/005800/","title":"TEST"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $usr_title = \u0026#39;テスト３２\u0026#39;; $tgCode = ord(\u0026#39;漢\u0026#39;); if($tgCode == 0x8a){ $usr_outcode = \u0026#39;sjis\u0026#39;; }elsif($tgCode == 0xb4){ $usr_outcode = \u0026#39;euc\u0026#39;; } require \u0026#34;./tsenv.pl\u0026#34;; { printHeader($usr_title); printBodyHeader(\u0026#39;文字←→文字コード\u0026#39;); # チェックする文字 @checkStrs = (\u0026#39;a\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;@\u0026#39;, \u0026#39;\\\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;[ ]\u0026#39;, \u0026#39;あ\u0026#39;); # １文字変換 Jprint(\u0026lt;\u0026lt;EOM); \u0026lt;table border=1\u0026gt; \u0026lt;caption\u0026gt;ord() \u0026amp;amp;amp; chr()\u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th rowspan=2\u0026gt;文字 \u0026lt;th rowspan=2\u0026gt;→ \u0026lt;th colspan=5\u0026gt;文字コード \u0026lt;th rowspan=2\u0026gt;→ \u0026lt;th rowspan=2\u0026gt;文字 \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;10進数 \u0026lt;th\u0026gt;→ \u0026lt;th\u0026gt;16進数 \u0026lt;th\u0026gt;→ \u0026lt;th\u0026gt;10進数 \u0026lt;/tr\u0026gt; EOM foreach(@checkStrs){ my $dOrd = ord(); my $hOrd = sprintf(\u0026#34;%x\u0026#34;, $dOrd); my $dhOrd = hex($hOrd); my $dChr = chr($dhOrd); print \u0026lt;\u0026lt;EOM; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;$_ \u0026lt;td\u0026gt; \u0026lt;td\u0026gt;$dOrd \u0026lt;td\u0026gt; \u0026lt;td\u0026gt;$hOrd \u0026lt;td\u0026gt; \u0026lt;td\u0026gt;$dhOrd \u0026lt;td\u0026gt; \u0026lt;td\u0026gt;$dChr \u0026lt;/tr\u0026gt; EOM } Jprint(\u0026lt;\u0026lt;EOM); \u0026lt;/table\u0026gt; EOM # 一括変換その２ push @checkStrs, \u0026#39;漢字\u0026#39;, \u0026#39;Nobu3\u0026#39;, \u0026#39;!\u0026#34;#()=~\u0026#39;; Jprint(\u0026lt;\u0026lt;EOM); \u0026lt;table border=1\u0026gt; \u0026lt;caption\u0026gt;unpack(H*) \u0026amp;amp;amp; pack(H*)\u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;文字 \u0026lt;th\u0026gt;→ \u0026lt;th\u0026gt;文字コード \u0026lt;th\u0026gt;→ \u0026lt;th\u0026gt;文字 \u0026lt;/tr\u0026gt; EOM foreach(@checkStrs){ my $hunpack = unpack(\u0026#34;H*\u0026#34;, $_); my $hpack = pack(\u0026#34;H*\u0026#34;, $hunpack); print \u0026lt;\u0026lt;EOM; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;$_ \u0026lt;td\u0026gt; \u0026lt;td\u0026gt;$hunpack \u0026lt;td\u0026gt; \u0026lt;td\u0026gt;$hpack \u0026lt;/tr\u0026gt; EOM } Jprint(\u0026lt;\u0026lt;EOM); \u0026lt;/table\u0026gt; EOM printFooter(); exit(0); } \u0026lt;/div\u0026gt; ","date":"2000-10-07T14:13:37+09:00","permalink":"https://www.nqou.net/2000/10/07/141337/","title":"文字と文字コード"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $usr_title = \u0026#39;テスト３１\u0026#39;; require \u0026#34;tsenv.pl\u0026#34;; $G_image = \u0026#34;/x/nobu3/images/blue1.gif\u0026#34;; { printHeader($usr_title); printBodyHeader(\u0026#39;\u0026lt;font face=times\u0026gt;Random Test\u0026lt;/font\u0026gt;\u0026#39;); srand(time()^($$+($$\u0026lt;\u0026lt;15))); randomTest(10, 2**4); randomTest(10, 2**8); randomTest(10, 2**12); printFooter(); exit(0); } sub randomTest{ my($len, $loopTimes) = @_; my @value = (); # 発生値格納用 my @near = (); # 発生値差格納用 my $winH = 150; # 縦棒グラフの最大高さ my $eleW = 40; # 縦棒グラフの各棒の幅 my $winW = 400; # 横棒グラフの最大長さ my $eleH = 20; # 横棒グラフの各棒の幅 # 配列初期化（無くても動くけど・・・） for($i=0;$i\u0026lt;$len;$i++){ $value[$i] = 0; $near[$i]-\u0026gt;[0] = 0; } # 移動値用（上に同じ） # for($i=$len;$i\u0026lt;$len*2-1;$i++){ # $near[$i]-\u0026gt;[0] = 0; # } # 乱数発生 # １回目例外処理 my $lst = int(rand(scalar(@value))); # 発生値比較用 $value[$lst]++; # ２回目以降処理 for($i=1;$i\u0026lt;$loopTimes;$i++){ my $now = int(rand(scalar(@value))); $value[$now]++; $near[abs($now-$lst)]-\u0026gt;[0]++; # 前回との差をカウント # $near[$now-$lst+$len-1]-\u0026gt;[0]++; # 前回との移動値をカウント $lst = $now; } # 最小値、最大値 my($min, $max) = ($loopTimes, 0);# 最小値、最大値初期化 foreach(@value){ $min = $_ if($_ \u0026lt; $min); $max = $_ if($max \u0026lt; $_); } # 書式設定 my $ws = $max / ($winW - 10); # 横グラフ表示用 my $loopTimesN = divideNum($loopTimes); my $dif = $max - $min; my $difN = divideNum($dif); my $difP = sprintf \u0026#34;%.2f%%\u0026#34;, $dif / $loopTimes * 100; my $maxN = divideNum($max); my $maxP = sprintf \u0026#34;%.2f%%\u0026#34;, $max / $loopTimes * 100; my $minN = divideNum($min); my $minP = sprintf \u0026#34;%.2f%%\u0026#34;, $min / $loopTimes * 100; foreach(@near){ $_-\u0026gt;[1] = divideNum($_-\u0026gt;[0]); $_-\u0026gt;[2] = sprintf \u0026#34;%.2f%%\u0026#34;, $_-\u0026gt;[0] / $loopTimes * 100; } # まとめの出力 Jprint(\u0026lt;\u0026lt;EOM); \u0026lt;div class=box1\u0026gt; \u0026lt;strong\u0026gt;データ数：$loopTimesN\u0026lt;/strong\u0026gt; \u0026lt;table border=1\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;最大値\u0026lt;td align=right\u0026gt;$maxN\u0026lt;td align=right\u0026gt;$maxP \u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;最小値\u0026lt;td align=right\u0026gt;$minN\u0026lt;td align=right\u0026gt;$minP \u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;誤　差\u0026lt;td align=right\u0026gt;$difN\u0026lt;td align=right\u0026gt;$difP \u0026lt;/table\u0026gt; \u0026lt;br\u0026gt; EOM # 各項目の出力 Jprint(\u0026lt;\u0026lt;EOM); \u0026lt;table border=1\u0026gt; \u0026lt;caption\u0026gt;値の発生回数と比率\u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;発生値 \u0026lt;th width=$winW\u0026gt;カウント数 \u0026lt;th\u0026gt;比率 \u0026lt;th\u0026gt;備考 EOM my $cnt = 0; foreach(@value){ my $w = int($_ / $ws); # グラフ巾決定 my $n = divideNum($_); # カウント数 my $p = sprintf(\u0026#34;%.2f%%\u0026#34;, $_ / $loopTimes * 100); # 比率 print \u0026lt;\u0026lt;EOM; \u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;$cnt\u0026lt;td\u0026gt; \u0026lt;img src=\u0026#34;$G_image\u0026#34; width=$w height=$eleH alt=\u0026#34;$n\u0026#34;\u0026gt;\u0026lt;td align=right\u0026gt; $p\u0026lt;td\u0026gt; EOM if($min == $_){ Jprint(\u0026#39;最小\u0026#39;); }elsif($max == $_){ Jprint(\u0026#39;最大\u0026#39;); }else{ print \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } print \u0026#34;n\u0026#34;; $cnt++; } print \u0026#34;\u0026lt;/table\u0026gt;nn\u0026lt;br\u0026gt;nn\u0026#34;; # 発生値差 print \u0026#34;\u0026lt;table border=1\u0026gt;n\u0026#34;; Jprint(\u0026#34;\u0026lt;caption\u0026gt;前回の発生値との差\u0026lt;/caption\u0026gt;n\u0026lt;tr\u0026gt;n\u0026#34;); my $nearmax = 0; foreach(@near){ $nearmax = $_-\u0026gt;[0] if $nearmax \u0026lt; $_-\u0026gt;[0]; } my $hs = $nearmax / ($winH - 10); Jprint(\u0026#34;\u0026lt;th height=$winH\u0026gt;カウント数\u0026#34;); foreach(@near){ my $h = int($_-\u0026gt;[0] / $hs); print qq(\u0026lt;td valign=bottom align=center\u0026gt;\u0026lt;img src=\u0026#34;$G_image\u0026#34; width=$eleW height=$h alt=\u0026#34;$_-\u0026gt;[1]\u0026#34;\u0026gt;); } Jprint(\u0026#34;\u0026lt;tr\u0026gt;n\u0026lt;th\u0026gt;前回との差\u0026#34;); for($i=0;$i\u0026lt;$len;$i++){ print \u0026#34;\u0026lt;th\u0026gt;$i\u0026#34; } # 移動値用 # for($i=-($len-1);$i\u0026lt;$len;$i++){ print \u0026#34;\u0026lt;th\u0026gt;$i\u0026#34; } Jprint(\u0026#34;n\u0026lt;tr\u0026gt;n\u0026lt;th\u0026gt;比率\u0026#34;); print \u0026#34;\u0026lt;td align=right\u0026gt;$_-\u0026gt;[2]\u0026#34; foreach(@near); print \u0026#34;n\u0026lt;/table\u0026gt;nn\u0026lt;br\u0026gt;nn\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;nn\u0026#34;; } sub divideNum{ my($num) = @_; 1 while $num =~ s/(d+)(d{3})/$1,$2/; return $num; } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:57:39+09:00","permalink":"https://www.nqou.net/2000/10/07/135739/","title":"乱数の信憑性"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $usr_title = \u0026#39;テスト３０\u0026#39;; require \u0026#34;tsenv.pl\u0026#34;; { printHeader($usr_title); printBodyHeader(\u0026#39;\u0026lt;font face=times\u0026gt;Crypt Test\u0026lt;/font\u0026gt;\u0026#39;); # 乱数初期化 srand; crypt_test(\u0026#39;12345678\u0026#39;, \u0026#39;12345678\u0026#39;); crypt_test(\u0026#39;987654321\u0026#39;, \u0026#39;987654320\u0026#39;); crypt_test(\u0026#39;abcdefgh\u0026#39;, \u0026#39;abcdefgi\u0026#39;); new_crypt_test(\u0026#39;12345678\u0026#39;, \u0026#39;12345678\u0026#39;); new_crypt_test(\u0026#39;987654321\u0026#39;, \u0026#39;987654320\u0026#39;); new_crypt_test(\u0026#39;abcdefgh\u0026#39;, \u0026#39;abcdefgi\u0026#39;); print \u0026#34;\u0026lt;pre\u0026gt;\u0026#34;; print \u0026#34;Normal localtime : \u0026#34;; print localtime(); print \u0026#34;n\u0026#34;; print \u0026#34;Scalar localtime : \u0026#34;; print scalar(localtime()); print \u0026#34;n\u0026#34;; print \u0026#34;Expand localtime : \u0026#34;; print join(\u0026#34;, \u0026#34;, localtime()); print \u0026#34;n\u0026#34;; print \u0026#34;n\u0026#34;; print \u0026#34;int(1.5) = \u0026#34;; print int(1.5); print \u0026#34;n\u0026#34;; print \u0026#34;int(2.9) = \u0026#34;; print int(2.9); print \u0026#34;n\u0026#34;; print \u0026#34;int(-2.5) = \u0026#34;; print int(-2.5); print \u0026#34;n\u0026#34;; print \u0026#34;int(-2.9) = \u0026#34;; print int(-2.9); print \u0026#34;n\u0026#34;; print \u0026#34;int(-1.1) = \u0026#34;; print int(-1.1); print \u0026#34;n\u0026#34;; print \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;; printFooter(); exit(0); } sub crypt_test{ my($setpass, $authpass) = @_; # 設定パスワード確認 print qq(\u0026lt;table border=1 width=\u0026#34;80%\u0026#34;\u0026gt;n\u0026lt;tr\u0026gt;n\u0026lt;td width=\u0026#34;40%\u0026#34;\u0026gt;n); Jprint(\u0026#34;設定パスワード：$setpass\u0026lt;br\u0026gt;n\u0026#34;); # salt値作成 my @char = (\u0026#34;.\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;0\u0026#34;..\u0026#34;9\u0026#34;, \u0026#34;a\u0026#34;..\u0026#34;z\u0026#34;, \u0026#34;A\u0026#34;..\u0026#34;Z\u0026#34;); my $salt = \u0026#39;\u0026#39;; for(0,1){ $salt .= $char[int(rand(scalar(@char)))]; } # salt値の確認 Jprint(\u0026#34;Salt値：$salt\u0026lt;br\u0026gt;n\u0026#34;); # cryptする $sp = crypt($setpass, $salt); Jprint(\u0026#34;crypt結果：$sp\u0026lt;br\u0026gt;n\u0026#34;); # 認証パスワード確認 print qq(\u0026lt;td width=\u0026#34;40%\u0026#34;\u0026gt;n); Jprint(\u0026#34;認証パスワード：$authpass\u0026lt;br\u0026gt;n\u0026#34;); # 作成したパスワードから「salt値」を取得 if($sp =~ /^$1$/){ $offset = 3; }else{ $offset = 0; } $salt = substr($sp, $offset, 2); # salt値の確認 Jprint(\u0026#34;Salt値：$salt\u0026lt;br\u0026gt;n\u0026#34;); # cryptする $ap = crypt($authpass, $salt); Jprint(\u0026#34;crypt結果：$ap\u0026lt;br\u0026gt;n\u0026#34;); # 結果は同じ？ if($sp eq $ap){ $result = \u0026#39;OK\u0026#39;; }else{ $result = \u0026#39;NG\u0026#39;; } print \u0026#34;\u0026lt;tr\u0026gt;n\u0026lt;td colspan=2 align=center\u0026gt;n\u0026#34;; Jprint(\u0026#34;認証結果：$result\u0026lt;br\u0026gt;n\u0026#34;); print \u0026#34;\u0026lt;/table\u0026gt;\u0026lt;br\u0026gt;nn\u0026#34;; } # 新しい（というか、正しい）cryptの使い方 # 中身は手抜き・・・(^^;;; sub new_crypt_test{ my($PW, $enterPW) = @_; my $salt = \u0026#39;./\u0026#39;; # salt値作成、手抜き my $cryptedPW = crypt($PW, $salt); my $result = \u0026#39;\u0026#39;; if( crypt($enterPW, $cryptedPW) eq $cryptedPW ){ $result = \u0026#39;OK\u0026#39;; }else{ $result = \u0026#39;NG\u0026#39;; } print \u0026lt;\u0026lt;EOM; \u0026lt;pre\u0026gt; 設定パスワード ： $PW 認証パスワード ： $enterPW 照合結果　： $result \u0026lt;/pre\u0026gt; EOM } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:57:07+09:00","permalink":"https://www.nqou.net/2000/10/07/135707/","title":"お手軽暗号化"},{"content":"ソースをコンパクトにまとめる一つの方法として、たぶん少なからず使われるのが「再帰呼出し」が可能なサブルーチンでしょう。僕は恐くてあまり使えませんが・・・。\nなぜ恐いかというと、無限ループに陥りやすいからです。\n「こんなもんだろう」という感じで「とりあえず実行」をしてしまうので、この手のサブルーチンは苦手なのです。そのおかげか知りませんが、強制終了は上手くなりました（自爆）\n数少ない成果として、「数値の整形スクリプト」を作ってみました。これだとループさせてもよさそうなものですが、なんとなく。でも、結構シンプルにまとまっているでしょう？（自画自讃）\nもともと「TestCGI Index」のバイト数表示用に作ってみたのですが、結構緊張しました。こちらは「1MB」を越えることは無い（と思う）ので、本当は再帰は必要ないのですけどね・・・。\nただ、この手の機能はよく使われると思うので、ライブラリがあると思うのですけど、全然把握してません。必要な機能を自分で作るのも勉強です（苦笑）\nまた、ディレクトリの検索にも「再帰呼出し」を使っていますが、この場合、「..（親ディレクトリ）」の処理を忘れると大変です。とほほさんの検索スクリプトを見ていなかったら、迷わず嵌っていた事でしょう（笑）\nちなみに、明らかに数値しか扱わない場合は正規表現を使えば簡単に整形できます。\n1 2 3 4 5 sub divideNum { my ($num) = @_; 1 while $num =~ s/(d+)(d{3})/$1,$2/; return $num; } 変換部分は、とほほさんのラウンジで見たのを多少アレンジしたものですが、最初見たときには目から鱗が落ちました。正規表現を極めると面白そうです。\nそんなわけで、上の「（自画自讃）」はかなりボケてます（爆）\nここから追記（2000/12/14）\n「再帰呼出し」とは関係ないですが、数値の整形については「Perlメモ」の「数字を 3桁ごとにコンマで区切る」が、かなり詳しいです。\nソースコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $usr_title = \u0026#39;テスト２９\u0026#39;; require \u0026#34;tsenv.pl\u0026#34;; { $rh_form = getForm(); if(exists $rh_form-\u0026gt;{num}){ if($rh_form-\u0026gt;{num}){ outputNumber($rh_form-\u0026gt;{num}); }else{ error(\u0026#39;Data is `Nothing` or `Zero`\u0026#39;); } }else{ inputNumber(); } exit(0); } sub error{ my($err, $num) = @_; print \u0026#34;Content-type: text/html; charset=iso-8859-1nn\u0026#34;; print \u0026#34;\u0026lt;html lang=en\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Error\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$err\u0026lt;/h1\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;p\u0026gt;Request is `$num`\u0026lt;/p\u0026gt;n\u0026#34; if $num; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; exit(1); } sub inputNumber{ my $title = $usr_title.\u0026#39;（数値入力）\u0026#39;; printHeader($title); printBodyHeader($title); print qq(\u0026lt;form action=\u0026#34;$ENV{SCRIPT_NAME}\u0026#34;\u0026gt;n); Jprint(\u0026#39;\u0026lt;p\u0026gt;不要っぽい「０」を消し、３桁ずつ区切って表示します。\u0026#39;.\u0026#34;n\u0026#34;); Jprint(\u0026#39;\u0026lt;p\u0026gt;適当な数値を入力してください。\u0026#39;.\u0026#34;n\u0026#34;); print qq(\u0026lt;p\u0026gt;\u0026lt;input type=text name=num size=30\u0026gt;n); Jprint(qq(\u0026lt;p\u0026gt;\u0026lt;input type=submit value=\u0026#34;区切ってみる\u0026#34;\u0026gt;n)); Jprint(qq(\u0026lt;input type=reset value=\u0026#34;とりあえず消す\u0026#34;\u0026gt;n)); print qq(\u0026lt;/p\u0026gt;\u0026lt;/form\u0026gt;n); printFooter(); } sub outputNumber{ my($num) = @_; my $outnum = numbering($num); my $title = $usr_title.\u0026#39;（結果出力）\u0026#39;; printHeader($title); printBodyHeader($title); print \u0026#34;\u0026lt;table border=1 cellpadding=4\u0026gt;n\u0026#34;; Jprint(qq(\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;入力された値\u0026lt;td\u0026gt;$numn)); Jprint(qq(\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;整形後\u0026lt;td\u0026gt;$outnumn)); print \u0026#34;\u0026lt;/table\u0026gt;\u0026#34;; Jprint(\u0026#39;\u0026lt;p\u0026gt;合ってるでしょうか・・・？\u0026#39;); printFooter(); } sub getForm{ my $method = $ENV{REQUEST_METHOD}; my $len = $ENV{CONTENT_LENGTH}; my($query, $key, $value, @elm, %form); if($method eq \u0026#39;POST\u0026#39;){ error(\u0026#39;Memory Over\u0026#39;) if(8191 \u0026lt; $len); read(STDIN, $query, $len); }elsif($method eq \u0026#39;GET\u0026#39;){ $query = $ENV{QUERY_STRING}; }else{ error(\u0026#39;Unknown Request\u0026#39;); } @elm = split(\u0026#39;\u0026amp;amp;\u0026#39;, $query); foreach(@elm){ ($key, $value) = split(\u0026#39;=\u0026#39;); $form{$key} = $value; } return %form; } sub numbering{ my($num) = @_; my($f); error(\u0026#39;Not a Number\u0026#39;, $num) if($num !~ /^[0-9]*.?[0-9]*$/); $num =~ s/^0+//; if($num =~ /./){ ($num, $f) = split(/./, $num); $f =~ s/0+$// if $f; } $num = \u0026#39;0\u0026#39; unless $num; $num = divideNum($num); $num .= \u0026#39;.\u0026#39;.$f if $f; return $num; } sub divideNum{ my($num) = @_; my $len = length($num); if(3 \u0026lt; $len){ my $hn = substr($num, -3); my $th = divideNum(substr($num, 0, $len - 3)); return $th.\u0026#39;,\u0026#39;.$hn; }else{ return $num; } } ","date":"2000-10-07T13:55:15+09:00","permalink":"https://www.nqou.net/2000/10/07/135515/","title":"再帰呼出し型サブルーチン"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $usr_title = \u0026#39;テスト２８\u0026#39;; require \u0026#34;tsenv.pl\u0026#34;; require \u0026#34;hoge.pl\u0026#34;; { printHeader($usr_title); printBodyHeader($usr_title); @_ = (\u0026#39;ホゲ１\u0026#39;,\u0026#39;ほげ２\u0026#39;,\u0026#39;ｈｏｇｅ３\u0026#39;); $_ = \u0026#39;hogeほげgehoげほ\u0026#39;; print \u0026#39;$_ = \u0026#39;; Jprint($_); print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#39;@_ = \u0026#39;; Jprint(join(\u0026#39;,\u0026#39;, @_)); print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; Jprint(\u0026#39;\u0026amp;amp;hoge::hogeprint;で呼出し\u0026lt;br\u0026gt;\u0026#39;); \u0026amp;amp;hoge::hogeprint; Jprint(\u0026#39;\u0026amp;amp;hoge::hogeprint();で呼出し\u0026lt;br\u0026gt;\u0026#39;); \u0026amp;amp;hoge::hogeprint(); Jprint(\u0026#39;\u0026amp;amp;hoge::hogeprint($_);で呼出し\u0026lt;br\u0026gt;\u0026#39;); \u0026amp;amp;hoge::hogeprint($_); print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; Jprint(\u0026#39;\u0026amp;amp;hoge::hogeprint;で配列呼出し\u0026lt;br\u0026gt;\u0026#39;); foreach(@_){ \u0026amp;amp;hoge::hogeprint; } print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; Jprint(\u0026#39;\u0026amp;amp;hoge::hogeprint($_);で配列呼出し\u0026lt;br\u0026gt;\u0026#39;); foreach(@_){ \u0026amp;amp;hoge::hogeprint($_); } print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; Jprint(\u0026#39;Jprint(hoge::hogereturn);で呼出し（不可。文字列と解釈される）\u0026lt;br\u0026gt;\u0026#39;); Jprint(hoge::hogereturn); print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; Jprint(\u0026#39;Jprint(hoge::hogereturn());で呼出し\u0026lt;br\u0026gt;\u0026#39;); Jprint(hoge::hogereturn()); Jprint(\u0026#39;Jprint(hoge::hogereturn($_));で呼出し\u0026lt;br\u0026gt;\u0026#39;); Jprint(hoge::hogereturn($_)); print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#39;$hoge::version = \u0026#39;; print $hoge::version; print \u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#39;@hoge::version = \u0026#39;; print foreach(@hoge::version); print \u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#39;%hoge::version = \u0026#39;; print \u0026#34;$_ =\u0026gt; $hoge::version{$_}\u0026#34; foreach(keys %hoge::version); print \u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; Jprint(\u0026#39;hogehoge();で呼出し\u0026lt;br\u0026gt;\u0026#39;); hogehoge(); printFooter(); exit(0); } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:53:02+09:00","permalink":"https://www.nqou.net/2000/10/07/135302/","title":"普通の「require」"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $timeBegin = times; $usr_title = \u0026#39;テスト２７\u0026#39;; require \u0026#34;tsenv.pl\u0026#34;; { printHeader($usr_title); printBodyHeader($usr_title); Jprint(\u0026#39;ほげてすと\u0026lt;br\u0026gt;\u0026#39;); Jprint(\u0026#39;ちゃんとJISで表示されてますか？\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#39;); # print Jcode-\u0026gt;new(\u0026#39;げほてすと\u0026lt;br\u0026gt;これもJISですか？\u0026#39;)-\u0026gt;jis; printFooter(); exit(0); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 # tsenv.pl : TestCGI向き共通設定 init() unless defined $info_copyright; sub init{ # use Jcode; unshift(@INC, \u0026#39;../..\u0026#39;); require \u0026#39;jcode.pl\u0026#39;; $info_copyright=\u0026#39;\u0026#39;; open(IN, \u0026#34;../../sig.txt\u0026#34;); \u0026lt;IN\u0026gt;; while(\u0026lt;IN\u0026gt;){ $info_copyright .= $_; } close(IN); $usr_outcode = \u0026#39;jis\u0026#39; unless defined $usr_outcode;# \u0026#39;sjis\u0026#39;;# \u0026#39;euc\u0026#39;;# \u0026#39;utf8\u0026#39;; if($usr_outcode eq \u0026#39;sjis\u0026#39;){ $usr_outCharset = \u0026#39;shift_jis\u0026#39;; }elsif($usr_outcode eq \u0026#39;jis\u0026#39;){ $usr_outCharset = \u0026#39;iso-2022-jp\u0026#39;; }elsif($usr_outcode eq \u0026#39;euc\u0026#39;){ $usr_outCharset = \u0026#39;euc-jp\u0026#39;; # }elsif($usr_outcode eq \u0026#39;utf8\u0026#39;){ # $usr_outCharset = \u0026#39;utf-8\u0026#39;; } $usr_exTitle = $usr_title . \u0026#39;の解説\u0026#39;; $usr_ex = $ENV{SCRIPT_NAME}; $usr_ex =~ s|cgi/(ts[0-9]{4})(_[12u])?.cgi$|$1.htm|; @usr_stylesheet = ( \u0026#39;../../ipp.css\u0026#39;, \u0026#39;../test.css\u0026#39;, ); # %usr_links = ( # \u0026#39;Home\u0026#39; =\u0026gt; \u0026#39;../../../index.htm\u0026#39;, # \u0026#39;Perl\u0026#39; =\u0026gt; \u0026#39;../../\u0026#39;, # \u0026#39;TestCGI Index\u0026#39; =\u0026gt; \u0026#39;../\u0026#39;, # $usr_exTitle =\u0026gt; $usr_ex, # ); @usr_linkName = ( \u0026#39;Home\u0026#39;, \u0026#39;Perl\u0026#39;, \u0026#39;TestCGI Index\u0026#39;, $usr_exTitle, ); @usr_linkAddr = ( \u0026#39;../../../index.htm\u0026#39;, \u0026#39;../../\u0026#39;, \u0026#39;../\u0026#39;, $usr_ex, ); } sub printHeader{ # 「\u0026lt;title\u0026gt;タグ」の文字列 my($title) = @_; my $ss = \u0026#39;\u0026#39;; $ss .= qq(\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n) foreach @usr_stylesheet; Jprint(\u0026lt;\u0026lt;EOM); Content-type: text/html; charset=$usr_outCharset \u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt; \u0026lt;html lang=ja\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;ROBOTS\u0026#34; content=\u0026#34;NOINDEX\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-type\u0026#34; content=\u0026#34;text/html; charset=$usr_outCharset\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-style-type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt; \u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt; \u0026lt;link rev=\u0026#34;made\u0026#34; href=\u0026#34;$info_mailAddr\u0026#34;\u0026gt; $ss \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; EOM } sub printBodyHeader{ # 英字なら「printBodyHeader(\u0026#34;\u0026lt;font face=times\u0026gt;Title String\u0026lt;/font\u0026gt;\u0026#34;);」がいいんだけど・・・。 my($title) = @_; print \u0026#34;\u0026lt;div align=center\u0026gt;n\u0026#34;; Jprint(qq(\u0026lt;h2\u0026gt;\u0026lt;a name=\u0026#34;top\u0026#34;\u0026gt;$title\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;n\u0026lt;hr\u0026gt;n)); printLinks(); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=test\u0026gt;nn\u0026#34;; } sub printFooter{ print \u0026#34;n\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div align=center\u0026gt;n\u0026#34;; print qq(\u0026lt;a href=\u0026#34;#top\u0026#34; class=en\u0026gt;Top\u0026lt;/a\u0026gt;n\u0026lt;hr\u0026gt;n); printLinks(); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;n\u0026lt;div align=right\u0026gt;n\u0026#34;; printf(\u0026#34;Cost : %.2f\u0026lt;br\u0026gt;n\u0026#34;, times); print $info_copyright; print \u0026#34;n\u0026lt;/div\u0026gt;n\u0026lt;/body\u0026gt;n\u0026lt;/html\u0026gt;nn\u0026#34;; } sub printLinks{ # my $cnt = 0; # foreach(sort keys %usr_links){ # print \u0026#34;/ \u0026#34; if $cnt++; # Jprint(qq(\u0026lt;a href=\u0026#34;$usr_links{$_}\u0026#34;\u0026gt;$_\u0026lt;/a\u0026gt;n)); # } # for($i=0; $i\u0026lt;@usr_linkName; $i++){ foreach $i(0 .. $#usr_linkName){ print \u0026#34;/ \u0026#34; if $i; Jprint(qq(\u0026lt;a href=\u0026#34;$usr_linkAddr[$i]\u0026#34; class=en\u0026gt;$usr_linkName[$i]\u0026lt;/a\u0026gt;n)); } print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; } sub Jprint{ # print Jcode::convert($_, $usr_outcode) foreach(@_); print jcode::to($usr_outcode, $_) foreach @_; } 1; \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:52:09+09:00","permalink":"https://www.nqou.net/2000/10/07/135209/","title":"強引な「require」"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} %h = ( \u0026#39;num1\u0026#39; =\u0026gt; 1, \u0026#39;num2\u0026#39; =\u0026gt; 2, ); @a = (1,2); $hash = %h; $array = @a; print \u0026lt;\u0026lt;EOM; Content-type: text/plain $h{num1} = $h{num1} $$hash{num1} = $$hash{num1} %$hash{num1} = %$hash{num1} $hash-\u0026gt;{num1} = $hash-\u0026gt;{num1} $a[0] = $a[0] @a[0] = @a[0] $$array[0] = $$array[0] @$array[0] = @$array[0] $array-\u0026gt;[0] = $array-\u0026gt;[0] EOM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #!/usr/bin/perl BEGIN{ print \u0026#34;Content-type: text/plainnn\u0026#34;; open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); $|=1; } use Benchmark; $count = 1000; $cnt = 100; $dat1 = \u0026#34;reftest1.txt\u0026#34;; $dat2 = \u0026#34;reftest2.txt\u0026#34;; srand; for(0 .. $cnt){ @nums[$_] = rand; } open(OUT, \u0026#34;\u0026gt; $dat1\u0026#34;); close(OUT); open(OUT, \u0026#34;\u0026gt; $dat2\u0026#34;); close(OUT); sleep 1; @t = timethese($count, { \u0026#39;Refuse\u0026#39; =\u0026gt; \u0026#39;\u0026amp;amp;use_ref;\u0026#39;, \u0026#39;RefNouse\u0026#39; =\u0026gt; \u0026#39;\u0026amp;amp;nouse_ref;\u0026#39;, }); exit(0); sub use_ref{ my $r_nums; $r_nums = @nums; open(OUT, \u0026#34;\u0026gt;\u0026gt; $dat1\u0026#34;); foreach(@$r_nums){ print OUT \u0026#34;$_n\u0026#34;; } close(OUT); } sub nouse_ref{ my @n_nums; @n_nums = @nums; open(OUT, \u0026#34;\u0026gt;\u0026gt; $dat2\u0026#34;); foreach(@n_nums){ print OUT \u0026#34;$_n\u0026#34;; } close(OUT); } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:49:29+09:00","permalink":"https://www.nqou.net/2000/10/07/134929/","title":"リファレンス"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gtusr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $timeBegin = times; # use Jcode; require \u0026#39;../../../cgi-bin/jcode.pl\u0026#39;; $info_mailName = \u0026#39;Nobu3\u0026#39;; $info_mailAddr = \u0026#39;nobu3@x.age.ne.jp\u0026#39;; $info_uriName = \u0026#39;Incomprehensible Perl Project\u0026#39;; $info_uriAddr = \u0026#39;http://www.age.ne.jp/x/nobu3/perl/\u0026#39;; $info_uri = qq(\u0026lt;a href=\u0026#34;$info_uriAddr\u0026#34;\u0026gt;$info_uriName\u0026lt;/a\u0026gt;.); $info_mail = qq((C)1999 \u0026lt;a href=\u0026#34;mailto:$info_mailAddr\u0026#34;\u0026gt;$info_mailName\u0026lt;/a\u0026gt;. All rights reserved.); $info_copyright = \u0026#34;\u0026lt;address\u0026gt;n\u0026lt;font face=times\u0026gt;$info_uri\u0026lt;br\u0026gt;n$info_mail\u0026lt;/font\u0026gt;\u0026lt;br\u0026gt;n\u0026lt;/address\u0026gt;n\u0026#34;; # @usr_stylesheet = (\u0026#39;/Nobu3/ipp.css\u0026#39;,\u0026#39;../test.css\u0026#39;);# できあがりからのURIパス @usr_stylesheet = (\u0026#39;../../ipp.css\u0026#39;, \u0026#39;../test.css\u0026#39;); $usr_outcode = \u0026#39;jis\u0026#39;; $usr_outCharset = \u0026#39;iso-2022-jp\u0026#39;; $usr_title = \u0026#39;テスト２５\u0026#39;; $explain = $ENV{SCRIPT_NAME}; $explain =~ s|cgi/(ts[0-9]{4})(_[12u])?.cgi$|$1.htm|; $explain_title = $usr_title . \u0026#39;の解説\u0026#39;; %usr_links = ( \u0026#39;Home\u0026#39; =\u0026gt; \u0026#39;../../../index.htm\u0026#39; , \u0026#39;Perl\u0026#39; =\u0026gt; \u0026#39;../../\u0026#39; , \u0026#39;TestCGI Index\u0026#39; =\u0026gt; \u0026#39;../\u0026#39; , $explain_title =\u0026gt; $explain ); $searchDir = \u0026#39;..\u0026#39;; $searchReg = \u0026#39;.(html?|[sp]ht(ml)?)$\u0026#39;; $indexReg = \u0026#34;index$searchReg\u0026#34;; { $ra_dir = dirSearch($searchDir); printHeader($usr_title); printBodyHeader($usr_title); print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; Jprint(\u0026#39;\u0026lt;p\u0026gt;親ディレクトリ以下にあるファイルの一覧（HTMLファイルのみ）\u0026lt;/p\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;); print \u0026#34;\u0026lt;ul\u0026gt;n\u0026#34;; # require \u0026#34;dumpvar.pl\u0026#34;; dumpValue($ra_dir); printRefArray($ra_dir); print \u0026#34;\u0026lt;/ul\u0026gt;n\u0026lt;/div\u0026gt;n\u0026#34;; printFooter(); exit(0); } sub searchTitle{ my($file)= @_; my $title = \u0026#39;タイトル無し\u0026#39;; open(IN, $file); while(\u0026lt;IN\u0026gt;){ if(m|\u0026lt;title\u0026gt;(.*?)\u0026lt;/title\u0026gt;|i){ $title = ($1 !~ /^s*$/) ? $1:\u0026#39;不正なタイトル\u0026#39;; last; } last if m|\u0026lt;/head\u0026gt;|i; } close(IN); return $title; } sub printRefArray{ my($ra_dir) = @_; my $indexfile = (grep(/$indexReg/, @$ra_dir))[0] || \u0026#39;\u0026#39;; my $dir = shift(@$ra_dir); my($dirname) = $dir =~ m|([^/]+)/$|; my $title = \u0026#39;ＨＴＭＬインデックス無し\u0026#39;; $title = searchTitle($indexfile) if($indexfile); Jprint(qq(\u0026lt;li\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;a href=\u0026#34;$dir\u0026#34;\u0026gt;$dirname（$title）\u0026lt;/a\u0026gt;\u0026lt;/strong\u0026gt;n)); return if($#$ra_dir \u0026lt; 0); print \u0026#34;\u0026lt;ul\u0026gt;n\u0026#34;; foreach $file(@$ra_dir){ next if($file eq $indexfile); if(ref($file)){ printRefArray($file); next; }elsif(-r $file){ my $title = searchTitle($file); my($filename) = $file =~ m|([^/]+)$|; Jprint(qq(\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;$file\u0026#34;\u0026gt;$filename（$title）\u0026lt;/a\u0026gt;n)); } } print \u0026#34;\u0026lt;/ul\u0026gt;n\u0026#34;; } sub dirSearch{ my($dir) = @_; my @dirs = (); my @filenames = (\u0026#34;$dir/\u0026#34;); opendir(DIR, $dir); my @files = sort grep(/^[^.]/, readdir(DIR)); closedir(DIR); foreach(@files){ $_ = \u0026#34;$dir/$_\u0026#34;; if(-d $_){ push(@dirs, dirSearch($_)); }elsif(/$searchReg/){ push(@filenames, $_); } } push(@filenames, @dirs); return @filenames; } sub printHeader{ # 「\u0026lt;title\u0026gt;タグ」の文字列 my($title) = @_; print \u0026#34;Content-type: text/html; charset=$usr_outCharsetnn\u0026#34;; print qq(\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;n); print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; print qq(\u0026lt;meta http-equiv=\u0026#34;Content-type\u0026#34; content=\u0026#34;text/html; charset=$usr_outCharset\u0026#34;\u0026gt;n); print qq(\u0026lt;meta http-equiv=\u0026#34;Content-style-type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;n); Jprint(\u0026#34;\u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt;n\u0026#34;); print qq(\u0026lt;link rev=\u0026#34;made\u0026#34; href=\u0026#34;$info_mailAddr\u0026#34;\u0026gt;n); foreach(@usr_stylesheet){ print qq(\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n); } print qq(\u0026lt;meta name=\u0026#34;ROBOTS\u0026#34; content=\u0026#34;NOINDEX\u0026#34;\u0026gt;n); print \u0026#34;\u0026lt;/head\u0026gt;nn\u0026#34;; print \u0026#34;\u0026lt;body\u0026gt;nn\u0026#34;; } sub printBodyHeader{ # 英字なら「printBodyHeader(\u0026#34;\u0026lt;font face=times\u0026gt;Title String\u0026lt;/font\u0026gt;\u0026#34;);」がいい my($title) = @_; print \u0026#34;\u0026lt;div align=center\u0026gt;n\u0026#34;; Jprint(qq(\u0026lt;h1\u0026gt;\u0026lt;a name=\u0026#34;top\u0026#34;\u0026gt;$title\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;n\u0026lt;hr\u0026gt;n)); printLinks(); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div align=center\u0026gt;n\u0026#34;; print qq(\u0026lt;a href=\u0026#34;#top\u0026#34;\u0026gt;Top\u0026lt;/a\u0026gt;n\u0026lt;hr\u0026gt;n); printLinks(); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;n\u0026lt;div align=right\u0026gt;n\u0026#34;; $timeEnd = sprintf(\u0026#34;%.3f\u0026#34;, times - $timeBegin); print \u0026#34;Cost : $timeEnd\u0026lt;br\u0026gt;n\u0026#34;; print $info_copyright; print \u0026#34;n\u0026lt;/body\u0026gt;n\u0026lt;/html\u0026gt;nn\u0026#34;; } sub printLinks{ my $cnt = 0; foreach(keys %usr_links){ print \u0026#34;/ \u0026#34; if($cnt++); Jprint(qq(\u0026lt;a href=\u0026#34;$usr_links{$_}\u0026#34;\u0026gt;$_\u0026lt;/a\u0026gt;n)); } print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; } sub Jprint{ foreach(@_){ # print Jcode::convert($_, $usr_outcode); print jcode::to($usr_outcode, $_); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:43:40+09:00","permalink":"https://www.nqou.net/2000/10/07/134340/","title":"サブディレクトリ内も一覧（その３）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 #!/usr/bin/perl #BEGIN{ # print \u0026#34;Content-type: text/plainnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; #} $timeBegin = times; unshift(@INC, \u0026#34;../..\u0026#34;);# 「jcode.pl」のあるディレクトリ require \u0026#34;jcode.pl\u0026#34;; use Jcode; $info_mailName = \u0026#39;Nobu3\u0026#39;; $info_mailAddr = \u0026#39;nobu3@x.age.ne.jp\u0026#39;; $info_uriName = \u0026#39;Incomprehensible Perl Project\u0026#39;; $info_uriAddr = \u0026#39;http://www.age.ne.jp/x/nobu3/perl/\u0026#39;; $info_uri = qq(\u0026lt;a href=\u0026#34;$info_uriAddr\u0026#34;\u0026gt;$info_uriName\u0026lt;/a\u0026gt;.); $info_mail = qq((C)1999 - 2000 \u0026lt;a href=\u0026#34;mailto:$info_mailAddr\u0026#34;\u0026gt;$info_mailName\u0026lt;/a\u0026gt;. All rights reserved.); $info_copyright = \u0026#34;\u0026lt;address\u0026gt;n\u0026lt;font face=times\u0026gt;$info_uri\u0026lt;br\u0026gt;n$info_mail\u0026lt;/font\u0026gt;\u0026lt;br\u0026gt;n\u0026lt;/address\u0026gt;n\u0026#34;; @usr_stylesheet = (\u0026#39;/Nobu3/ipp.css\u0026#39;,\u0026#39;../test.css\u0026#39;);# できあがりからのURIパス $usr_outcode = \u0026#39;jis\u0026#39;; $usr_outCharset = \u0026#39;iso-2022-jp\u0026#39;; $usr_title = \u0026#39;テスト２４\u0026#39;; $explain = $ENV{SCRIPT_NAME}; $explain =~ s|cgi/(ts[0-9]{4})(_[12u])?.cgi$|$1.htm|; $explain_title = $usr_title . \u0026#39;の解説\u0026#39;; %usr_links = (# リンクネーム =\u0026gt; リンクアドレス \u0026#39;Home\u0026#39; =\u0026gt; \u0026#39;../../../index.htm\u0026#39; , \u0026#39;Perl\u0026#39; =\u0026gt; \u0026#39;../../\u0026#39; , \u0026#39;TestCGI Index\u0026#39; =\u0026gt; \u0026#39;../\u0026#39; , $explain_title =\u0026gt; $explain ); { printHeader($usr_title); printBodyHeader($usr_title); print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; # require \u0026#34;dumpvar.pl\u0026#34;; dumpValue(%usr_links); print \u0026#34;Jcode $Jcode::VERSION\u0026lt;br\u0026gt;n\u0026#34;; $japanese = \u0026#34;日本語に変換する文字列。\u0026lt;br\u0026gt;n\u0026#34;; print useJcode($japanese); print Jcode-\u0026gt;new(\u0026#39;これも日本語\u0026lt;br\u0026gt;\u0026#39;)-\u0026gt;jis; $hoge = \u0026#39;ほげほげほ?\u0026#39;; print Jcode::convert($hoge, $usr_outcode); $geho = \u0026#39;げほげほげ?\u0026#39;; print Jcode::convert($geho, $usr_outcode); print $geho; print \u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;jcode.pl $jcode::version\u0026lt;br\u0026gt;n\u0026#34;; print usejcode($japanese); print jcode::convert(\u0026#39;これも日本語\u0026lt;br\u0026gt;\u0026#39;, $usr_outcode); $hoge = \u0026#39;ほげほげほ?\u0026#39;; print jcode::convert($hoge, $usr_outcode); $geho = \u0026#39;げほげほげ?\u0026#39;; print jcode::convert($geho, $usr_outcode); print $geho; print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; printFooter(); exit(0); } sub useJcode{ my($str)= @_; return Jcode-\u0026gt;new($str)-\u0026gt;jis; } sub usejcode{ my($str) = @_; jcode::convert($str, $usr_outcode); return $str; } sub error{ my($err) = shift; printHeader($err); printBodyHeader($err.\u0026#39;です\u0026#39;); Jprint(@_); printFooter(); exit(1); } sub printHeader{ # 「\u0026lt;title\u0026gt;タグ」の文字列 my($title) = @_; print \u0026#34;Content-type: text/html; charset=$usr_outCharsetnn\u0026#34;; print qq(\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;n); print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; print qq(\u0026lt;meta http-equiv=\u0026#34;Content-type\u0026#34; content=\u0026#34;text/html; charset=$usr_outCharset\u0026#34;\u0026gt;n); print qq(\u0026lt;meta http-equiv=\u0026#34;Content-style-type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;n); Jprint(\u0026#34;\u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt;n\u0026#34;); print qq(\u0026lt;link rev=\u0026#34;made\u0026#34; href=\u0026#34;$info_mailAddr\u0026#34;\u0026gt;n); foreach(@usr_stylesheet){ print qq(\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n); } print qq(\u0026lt;meta name=\u0026#34;ROBOTS\u0026#34; content=\u0026#34;NOINDEX\u0026#34;\u0026gt;n); print \u0026#34;\u0026lt;/head\u0026gt;nn\u0026#34;; print \u0026#34;\u0026lt;body\u0026gt;nn\u0026#34;; } sub printBodyHeader{ # 英字なら「printBodyHeader(\u0026#34;\u0026lt;font face=times\u0026gt;Title String\u0026lt;/font\u0026gt;\u0026#34;);」がいい my($title) = @_; print \u0026#34;\u0026lt;div align=center\u0026gt;n\u0026#34;; Jprint(qq(\u0026lt;h1\u0026gt;\u0026lt;a name=\u0026#34;top\u0026#34;\u0026gt;$title\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;n\u0026lt;hr\u0026gt;n)); printLinks(); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div align=center\u0026gt;n\u0026#34;; print qq(\u0026lt;a href=\u0026#34;#top\u0026#34;\u0026gt;Top\u0026lt;/a\u0026gt;n\u0026lt;hr\u0026gt;n); printLinks(); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;n\u0026lt;div align=right\u0026gt;n\u0026#34;; $timeEnd = sprintf(\u0026#34;%.3f\u0026#34;, times - $timeBegin); print \u0026#34;Cost : $timeEnd\u0026lt;br\u0026gt;n\u0026#34;; print $info_copyright; print \u0026#34;n\u0026lt;/body\u0026gt;n\u0026lt;/html\u0026gt;nn\u0026#34;; } sub printLinks{ my $cnt = 0; foreach(keys %usr_links){ print \u0026#34;/ \u0026#34; if($cnt++); Jprint(qq(\u0026lt;a href=\u0026#34;$usr_links{$_}\u0026#34;\u0026gt;$_\u0026lt;/a\u0026gt;n)); } print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; } sub Jprint{ foreach(@_){ my $tmp = $_; jcode::convert($tmp, $usr_outcode); print $tmp; } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:42:47+09:00","permalink":"https://www.nqou.net/2000/10/07/134247/","title":"漢字コードの変換（その３）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/perl -w BEGIN{ print \u0026#34;Content-type: text/plainnn\u0026#34;; open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); $|=1; } { my $_; \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:42:00+09:00","permalink":"https://www.nqou.net/2000/10/07/134200/","title":"エラーをブラウザで見る"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #!/usr/bin/perl use Benchmark; use Jcode; $count = 50000; $icode = \u0026#39;sjis\u0026#39;; # $icode = \u0026#39;euc\u0026#39;; # $icode = \u0026#39;jis\u0026#39;; # $icode = \u0026#39;utf8\u0026#39;; $japanese = \u0026#39;あいうえお阿衣兎得緒\u0026#39;; \u0026amp;amp;Jcode::convert($japanese, $icode); print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;pre\u0026gt;n\u0026#34;; @t = timethese($count, { \u0026#39;to_SJIS\u0026#39; =\u0026gt; \u0026#39;\u0026amp;amp;to_sjis;\u0026#39; ,\u0026#39;to_EUC\u0026#39; =\u0026gt; \u0026#39;\u0026amp;amp;to_euc;\u0026#39; ,\u0026#39;to_JIS\u0026#39; =\u0026gt; \u0026#39;\u0026amp;amp;to_jis;\u0026#39; # ,\u0026#39;to_UTF8\u0026#39; =\u0026gt; \u0026#39;\u0026amp;amp;to_utf8;\u0026#39; }); print \u0026#34;\u0026lt;/pre\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; exit(0); sub to_sjis{ \u0026amp;amp;Jcode::convert($japanese, \u0026#39;sjis\u0026#39;, $icode); } sub to_euc{ \u0026amp;amp;Jcode::convert($japanese, \u0026#39;euc\u0026#39;, $icode); } sub to_jis{ \u0026amp;amp;Jcode::convert($japanese, \u0026#39;jis\u0026#39;, $icode); } sub to_utf8{ \u0026amp;amp;Jcode::convert($japanese, \u0026#39;utf8\u0026#39;, $icode); } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:39:06+09:00","permalink":"https://www.nqou.net/2000/10/07/133906/","title":"変換にかかる時間（その２）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #!/usr/bin/perl # 初期設定 use Jcode; $JcodeVer = \u0026#34;Jcode $Jcode::VERSION\u0026#34;; *Jgetcode = \u0026amp;amp;Jcode::getcode; *Jconvert = \u0026amp;amp;Jcode::convert; $G_myCode = \u0026amp;amp;Jgetcode(\u0026#34;漢字\u0026#34;); $G_code = \u0026#34;jis\u0026#34;; $G_charset = \u0026#34;iso-2022-jp\u0026#34;; { $icode = \u0026#39;sjis\u0026#39;; # $icode = \u0026#39;euc\u0026#39;; # $icode = \u0026#39;jis\u0026#39;; # $icode = \u0026#39;utf8\u0026#39;; $ocode = \u0026#39;sjis\u0026#39;; # $ocode = \u0026#39;euc\u0026#39;; # $ocode = \u0026#39;jis\u0026#39;; # $ocode = \u0026#39;utf8\u0026#39;; print(\u0026#34;Content-type: text/htmlnn\u0026#34;); $japanese = \u0026#39;あいうえお阿衣兎得緒\u0026#39;; $japanese = \u0026amp;amp;Jconvert($japanese, $icode); print(\u0026amp;amp;getTime); print(\u0026#39; : BeginTime \u0026#39;); print(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); for(1 .. 50000){ \u0026amp;amp;Jconvert($japanese, $ocode, $icode); } print(\u0026amp;amp;getTime); print(\u0026#39; : EndTime\u0026#39;); exit(0); } sub getTime{ my ($sec,$min,$hour,$day,$mon,$year) = localtime(time); return sprintf(\u0026#34;%4d/%02d/%02d %02d:%02d:%02d\u0026#34;, $year+1900,$mon+1,$day,$hour,$min,$sec); } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:36:15+09:00","permalink":"https://www.nqou.net/2000/10/07/133615/","title":"変換にかかる時間"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gtusr/bin/perl # print \u0026#34;Content-type: text/htmlnn\u0026#34;; # open(STDERR, \u0026#34;\u0026gt;\u0026amp;amp;STDOUT\u0026#34;); # $|=1; # 初期設定 # require Jcode; # $JcodeVer = \u0026#34;Jcode $Jcode::VERSION\u0026#34;; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; $JcodeVer = \u0026#34;jcode.pl $jcode::version\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @G_styles = (\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $G_title = \u0026#34;テスト２０\u0026#34;; # $G_myCode = \u0026amp;amp;Jgetcode(\u0026#34;漢字\u0026#34;); $G_myCode = \u0026amp;amp;Jgetcode(\u0026#34;漢字\u0026#34;); $G_code = \u0026#34;jis\u0026#34;; $G_charset = \u0026#34;iso-2022-jp\u0026#34;; %G_form=(); $G_scrName = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($G_scrName =~ /ts[0-9]{4}/){ # _1,_uなどと共通で使用する項目 $G_scrName = $\u0026amp;amp;; $G_dataFile = \u0026#34;dat/$G_scrName.dat\u0026#34;; $G_lock = \u0026#34;lock/$G_scrName\u0026#34;; $G_linkFile = \u0026#34;../$G_scrName.htm\u0026#34;; $G_linkName = $G_title; } { \u0026amp;amp;sigInit; if($#ARGV == -1){ \u0026amp;amp;selectCode; }elsif( $ENV{\u0026#39;HTTP_REFERER\u0026#39;} !~ /$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}/ || $ENV{\u0026#39;HTTP_REFERER\u0026#39;} !~ /$ENV{\u0026#39;HTTP_HOST\u0026#39;}/ ){ exit; # }elsif($ARGV[0] eq \u0026#34;utf8\u0026#34;){ # $G_code = \u0026#34;utf8\u0026#34;; # $G_charset = \u0026#34;UTF-8\u0026#34;; # \u0026amp;amp;printForm(\u0026#34;post\u0026#34;); }elsif($ARGV[0] eq \u0026#34;sjis\u0026#34;){ $G_code = \u0026#34;sjis\u0026#34;; $G_charset = \u0026#34;shift_jis\u0026#34;; \u0026amp;amp;printForm(\u0026#34;post\u0026#34;); }elsif($ARGV[0] eq \u0026#34;euc\u0026#34;){ $G_code = \u0026#34;euc\u0026#34;; $G_charset = \u0026#34;euc-jp\u0026#34;; \u0026amp;amp;printForm(\u0026#34;post\u0026#34;); }elsif($ARGV[0] eq \u0026#34;jis\u0026#34;){ \u0026amp;amp;printForm(\u0026#34;post\u0026#34;); }elsif($ARGV[0] eq \u0026#34;output\u0026#34;){ \u0026amp;amp;formRead; \u0026amp;amp;formWrite; }elsif($ARGV[0] eq \u0026#34;read\u0026#34;){ \u0026amp;amp;dataOpen; }else{ \u0026amp;amp;error(\u0026#34;\u0026lt;h2\u0026gt;無効なコマンドが渡されました。\u0026lt;/h2\u0026gt;\u0026#34;); } exit; } sub sigInit{ $SIG{\u0026#39;PIPE\u0026#39;} = \u0026#34;sigExit\u0026#34;; $SIG{\u0026#39;INT\u0026#39;} = \u0026#34;sigExit\u0026#34;; $SIG{\u0026#39;HUP\u0026#39;} = \u0026#34;sigExit\u0026#34;; $SIG{\u0026#39;QUIT\u0026#39;} = \u0026#34;sigExit\u0026#34;; $SIG{\u0026#39;TERM\u0026#39;} = \u0026#34;sigExit\u0026#34;; } sub sigExit{ \u0026amp;amp;dataUnlock; exit; } sub error{ $G_title .= \u0026#34;（エラー）\u0026#34;; \u0026amp;amp;printHeader; \u0026amp;amp;Jprint(@_); \u0026amp;amp;printFooter; exit; } sub selectCode{ $G_title .= \u0026#34;（漢字コード選択）\u0026#34;; \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;p\u0026gt;入力フォームで使用する漢字コードを選んでください。\u0026lt;/p\u0026gt;n\u0026#34;); print \u0026lt;\u0026lt;EOM; \u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?jis\u0026#34;\u0026gt;\u0026lt;input type=submit value=\u0026#34;JIS(iso-2022-jp)\u0026#34;\u0026gt;\u0026lt;/form\u0026gt; \u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?sjis\u0026#34;\u0026gt;\u0026lt;input type=submit value=\u0026#34;Shift_JIS\u0026#34;\u0026gt;\u0026lt;/form\u0026gt; \u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?euc\u0026#34;\u0026gt;\u0026lt;input type=submit value=\u0026#34;EUC-JP\u0026#34;\u0026gt;\u0026lt;/form\u0026gt; EOM # 以下の一行を削除した # \u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?utf8\u0026#34;\u0026gt;\u0026lt;input type=submit value=\u0026#34;Unicode(UTF-8)\u0026#34;\u0026gt;\u0026lt;/form\u0026gt; print qq(\u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?read\u0026#34;\u0026gt;n); \u0026amp;amp;Jprint(qq(\u0026lt;input type=submit value=\u0026#34;過去ログ（？）を見る\u0026#34;\u0026gt;n)); print \u0026#34;\u0026lt;/form\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; } sub dataLock{ local($i, $mtime); for($i=0;$i\u0026lt;2;$i++){ if(mkdir($G_lock, 0755)){ return; }else{ unless($i){ ($mtime) = (stat($G_lock))[9]; if ($mtime \u0026lt; time() - 60) { # １分以上前のロックは解除 rmdir($G_lock); } } } } \u0026amp;amp;error(\u0026#34;\u0026lt;h2\u0026gt;現在、ロック中です。ごめんなさい。\u0026lt;/h2\u0026gt;\u0026#34;); } sub dataUnlock{ if(-d $G_lock){ rmdir($G_lock); } } sub dataOpen{ $G_title .= \u0026#34;（過去ログ）\u0026#34;; \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;dataLock; open(IN, \u0026#34;\u0026lt;$ G_dataFile\u0026#34;)||die \u0026#34;Can not open $G_dataFile....\u0026#34;; # データファイルはEUC記録なので時間短縮のつもり。 # 標準出力は「jis」だけど・・・。 if($G_code eq \u0026#34;euc\u0026#34;){ print while (\u0026lt;IN\u0026gt;); }else{ while (\u0026lt;IN\u0026gt;){ print \u0026amp;amp;Jconvert($_, $G_code, \u0026#34;euc\u0026#34;); } } close(IN); \u0026amp;amp;dataUnlock; print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; } sub formWrite{ local($name, $value); \u0026amp;amp;dataLock; open(OUT, \u0026#34;\u0026gt;\u0026gt; $G_dataFile\u0026#34;)||die \u0026#34;Can not open $G_dataFile....\u0026#34;; print(OUT \u0026#34;\u0026lt;table border=1\u0026gt;n\u0026#34;); print(OUT \u0026#34;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;th\u0026gt;Value\u0026lt;/tr\u0026gt;n\u0026#34;); while (($name, $value) = each(%G_form)){ print(OUT \u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;$name\u0026lt;td\u0026gt;$value\u0026lt;/tr\u0026gt;n\u0026#34;); } sleep 5; print(OUT \u0026#34;\u0026lt;/table\u0026gt;n\u0026#34;); close(OUT); \u0026amp;amp;dataUnlock; $G_title .= \u0026#34;（送信完了）\u0026#34;; \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;p\u0026gt;たぶん、無事に送信されました。n\u0026#34;); \u0026amp;amp;Jprint(qq(\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?read\u0026#34;\u0026gt;心配だから、過去ログを見る。\u0026lt;/a\u0026gt;n)); print \u0026#34;\u0026lt;/p\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; } sub formRead{ local($query_string, @elements, $elm, $name, $value, $code, $method); $method = $ENV{\u0026#39;REQUEST_METHOD\u0026#39;}; if($method eq \u0026#34;POST\u0026#34;){ read(STDIN, $query_string, $ENV{\u0026#39;CONTENT_LENGTH\u0026#39;}); }elsif($method eq \u0026#34;GET\u0026#34;){ $query_string = $ENV{\u0026#39;QUERY_STRING\u0026#39;}; }else{ \u0026amp;amp;error(\u0026#34;\u0026lt;h2\u0026gt;「POST」か「GET」のデータしか受け取れません。\u0026lt;/h2\u0026gt;\u0026#34;); } @elements = split(/\u0026amp;amp;/, $query_string); # 中身はpostもgetも同じ foreach $elm (@elements){ ($name, $value) = split(/=/, $elm); $value =~ tr/+/ /; $value =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack(\u0026#34;C\u0026#34;, hex($1))/eg; # $code = \u0026amp;amp;Jgetcode($value); $code = \u0026amp;amp;Jgetcode($value); if($code ne \u0026#34;euc\u0026#34;){ $value = \u0026amp;amp;Jconvert($value, \u0026#34;euc\u0026#34;, $code); # とりあえずEUCに変換 } $value =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; # メタ文字（？）を無効化 # $value =~ s/\u0026lt;!--/\u0026amp;amp;lt;!--/g; # SSI入力を無効化 # $value =~ s/--\u0026gt;/--\u0026amp;amp;gt;/g; # SSI入力を無効化 $value =~ s/\u0026lt;/\u0026amp;amp;lt;/g; # タグを無効化 $value =~ s/\u0026gt;/\u0026amp;amp;gt;/g; # タグを無効化 $value =~ s/rn*/n/g; # 改行を統一 $value =~ s/nnn+/nn/g; # 長い改行（３回以上）を２回（１行空き）に $value =~ s/[ns]+$//g; # 最後の連続した空白、改行を削除 $value =~ s/n/\u0026lt;br\u0026gt;/g; # 改行を\u0026lt;br\u0026gt;に変換 $G_form{$name} = $value .\u0026#34;\u0026lt;br\u0026gt;InputCode : $coden\u0026#34;; } } sub printForm{ $G_title .= \u0026#34;（入力画面）\u0026#34;; \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; print qq(\u0026lt;form method=$_[0] action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?output\u0026#34;\u0026gt;n); \u0026amp;amp;Jprint(qq(\u0026lt;input type=hidden name=tx0 value=\u0026#34;画面表示：$G_codenブラウザ：$ENV{\u0026#39;HTTP_USER_AGENT\u0026#39;}nスクリプト：$G_myCode\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n)); print qq(\u0026lt;input type=text name=tx1 value=\u0026#34;tx1\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n); \u0026amp;amp;Jprint(\u0026#34;\u0026lt;textarea name=ta1 cols=40 rows=4\u0026gt;ta1n何か適当にどうぞ。n\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;); \u0026amp;amp;Jprint(\u0026#34;\u0026lt;p\u0026gt;送信し、データを書き込んでいる最中に５秒間待ちます。\u0026lt;/p\u0026gt;n\u0026#34;); \u0026amp;amp;Jprint(\u0026#34;\u0026lt;p\u0026gt;この間は、しばらく待つか、他のブラウザなどから「送信」を試してみてください。\u0026lt;/p\u0026gt;n\u0026#34;); \u0026amp;amp;Jprint(qq(\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}\u0026#34;\u0026gt;ブラウザをもう一枚開く\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;n)); \u0026amp;amp;Jprint(qq(\u0026lt;input type=submit value=\u0026#34;送信する\u0026#34;\u0026gt;n)); print \u0026#34;\u0026lt;/form\u0026gt;n\u0026#34;; print qq(\u0026lt;form method=$_[0] action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?read\u0026#34;\u0026gt;n); \u0026amp;amp;Jprint(qq(\u0026lt;input type=submit value=\u0026#34;過去ログ（？）を見る\u0026#34;\u0026gt;n)); print \u0026#34;\u0026lt;/form\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; } sub printHeader{ if($G_charset){ print \u0026#34;Content-type: text/html; charset=$G_charsetnn\u0026#34;; }else{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; } print qq(\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;n); print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; if($G_charset){ print qq(\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=$G_charset\u0026#34;\u0026gt;n); } print qq(\u0026lt;meta http-equiv=\u0026#34;Content-Script-Type\u0026#34; content=\u0026#34;text/javascript\u0026#34;\u0026gt;n); print qq(\u0026lt;meta http-equiv=\u0026#34;Content-Style-Type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;n); \u0026amp;amp;Jprint(\u0026#34;\u0026lt;title\u0026gt;$G_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@G_styles){ print qq(\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n); } print \u0026#34;\u0026lt;/head\u0026gt;n\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;h1\u0026gt;$G_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; # print $ENV{\u0026#39;HTTP_REFERER\u0026#39;}.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$ENV{\u0026#39;HTTP_HOST\u0026#39;}; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;漢字コード変換 ： $JcodeVer\u0026lt;br\u0026gt;n\u0026#34;); open(IN, \u0026#34;../../sig.txt\u0026#34;); print while (\u0026lt;IN\u0026gt;); close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print qq(\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n); print qq(/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n); print qq(/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n); if($G_linkFile){ \u0026amp;amp;Jprint(qq(/n\u0026lt;a href=\u0026#34;$G_linkFile\u0026#34;\u0026gt;$G_linkNameの解説\u0026lt;/a\u0026gt;n)); } } sub Jprint{ if($G_code eq $G_myCode){ foreach (@_){ print; } }else{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_code, $G_myCode); } } } sub JconvPrint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:33:48+09:00","permalink":"https://www.nqou.net/2000/10/07/133348/","title":"ファイルのロック"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 #!/usr/bin/perl # 初期設定 # require Jcode; # $JcodeVer = \u0026#34;Jcode $Jcode::VERSION\u0026#34;; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; $JcodeVer = \u0026#34;jcode.pl $jcode::version\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @G_styles = (\u0026#39;../../ipp.css\u0026#39;,\u0026#39;../test.css\u0026#39;); $G_title = \u0026#39;テスト１９\u0026#39;; $G_myCode = \u0026amp;amp;Jgetcode(\u0026#39;漢字\u0026#39;); $G_Code = \u0026#39;jis\u0026#39;; $G_Charset = \u0026#39;iso-2022-jp\u0026#39;; $G_scrName = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($G_scrName =~ /ts[0-9]{4}/){ $G_scrName = $\u0026amp;amp;; $G_linkFile = \u0026#34;../$G_scrName.htm\u0026#34;; } { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026lt;table border=1\u0026gt;\u0026#34;; $temp = \u0026#39;\u0026#34;変数\u0026#34;という文字列\u0026#39;; $quotstr = \u0026#39;][)(\u0026#39;\u0026#34;/\\\u0026#39;; $doublequotstr = \u0026#34;][)(\u0026#39;\u0026#34;/\\\u0026#34;; $str = \u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;?\u0026#39;を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr\u0026#39;; \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); $str = q(\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;q(?)を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr); \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); $str = q/\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;q/?/を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr/; \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); # $str = q[\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;q[?]を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr]; # \u0026amp;amp;Jprint($str.\u0026#34;nn\u0026#34;); $str = \u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#34;?\u0026#34;を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr\u0026#34;; \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); $str = qq(\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;qq(?)を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr); \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); $str = qq/\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;qq/?/を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr/; \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); # $str = qq[\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;qq[?]を使用\u0026lt;td\u0026gt;$tempを\u0026#34;格納\u0026#34;、\u0026#39;表示\u0026#39;する。\u0026lt;td\u0026gt;][)(\u0026#39;\u0026#34;/\\\u0026lt;td\u0026gt;$quotstr\u0026lt;td\u0026gt;$doublequotstr]; # \u0026amp;amp;Jprint($str.\u0026#34;n\u0026#34;); print \u0026#34;\u0026lt;/table\u0026gt;n\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ if($G_Charset){ print \u0026#34;Content-type: text/html; charset=$G_Charsetnn\u0026#34;; }else{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; } print \u0026#39;\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; if($G_Charset){ print \u0026#34;\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=$G_Charset\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Script-Type\u0026#34; content=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026#39;,\u0026#34;n\u0026#34;; print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Style-Type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;title\u0026gt;$G_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@G_styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;n\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$G_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;漢字コード変換 ： $JcodeVer\u0026lt;br\u0026gt;n\u0026#34;); open(IN, \u0026#39;../../sig.txt\u0026#39;); print while (\u0026lt;IN\u0026gt;); close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($G_linkFile){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;$G_linkFile\u0026#34;\u0026gt;$G_titleの解説\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ if($G_Code eq $G_myCode){ foreach (@_){ print; } }else{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, $G_myCode); } } } sub JconvPrint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:33:11+09:00","permalink":"https://www.nqou.net/2000/10/07/133311/","title":"新型引用符"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 #!/usr/bin/perl # 初期設定 # require Jcode; # $JcodeVer = \u0026#34;Jcode $Jcode::VERSION\u0026#34;; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; $JcodeVer = \u0026#34;jcode.pl $jcode::version\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @G_styles = (\u0026#39;../../ipp.css\u0026#39;,\u0026#39;../test.css\u0026#39;); $G_title = \u0026#39;テスト１８\u0026#39;; $G_myCode = \u0026amp;amp;Jgetcode(\u0026#39;漢字\u0026#39;); $G_Code = \u0026#39;jis\u0026#39;; $G_Charset = \u0026#39;iso-2022-jp\u0026#39;; %G_form=(); $G_scrName = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($G_scrName =~ /ts[0-9]{4}/){ $G_scrName = $\u0026amp;amp;; $G_linkFile = \u0026#34;../$G_scrName.htm\u0026#34;; } { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($#ARGV == -1){ if($ENV{\u0026#39;QUERY_STRING\u0026#39;}){ \u0026amp;amp;formRead; \u0026amp;amp;formWrite; }else{ \u0026amp;amp;printForm(\u0026#34;get\u0026#34;); } }else{ \u0026amp;amp;error(\u0026#39;\u0026lt;h2\u0026gt;無効なコマンドが渡されました。\u0026lt;/h2\u0026gt;\u0026#39;); } print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub error{ \u0026amp;amp;Jprint(@_); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub formWrite{ local($name, $value); print \u0026#34;\u0026lt;table border=1\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;エレメントの名前\u0026lt;th\u0026gt;エレメントの中身\u0026lt;/tr\u0026gt;n\u0026#34;); while (($name, $value) = each(%G_form)){ \u0026amp;amp;JconvPrint(\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;$name\u0026lt;td\u0026gt;$value\u0026lt;/tr\u0026gt;n\u0026#34;); } print \u0026#34;\u0026lt;/table\u0026gt;n\u0026#34;; } sub formRead{ local($query_string, @elements, $elm, $name, $value, $code, $method); $method = $ENV{\u0026#39;REQUEST_METHOD\u0026#39;}; if($method eq \u0026#34;POST\u0026#34;){ read(STDIN, $query_string, $ENV{\u0026#39;CONTENT_LENGTH\u0026#39;}); }elsif($method eq \u0026#34;GET\u0026#34;){ $query_string = $ENV{\u0026#39;QUERY_STRING\u0026#39;}; }else{ \u0026amp;amp;error(\u0026#39;methodは「post」か「get」にしてください。\u0026#39;); } @elements = split(/\u0026amp;amp;/, $query_string); # 中身はpostもgetも同じ foreach $elm (@elements){ ($name, $value) = split(/=/, $elm); $value =~ s/+/ /g; # =~ tr/+/ /; と書くのが普通なのか？ $value =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack(\u0026#34;C\u0026#34;, hex($1))/eg; $code = \u0026amp;amp;Jgetcode($value); if($code ne \u0026#39;euc\u0026#39;){ $value = \u0026amp;amp;Jconvert($value, \u0026#39;euc\u0026#39;, $code); } # とりあえずEUCに変換 $value =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; # メタ文字（？）を無効化 $value =~ s/\u0026lt;/\u0026amp;amp;lt;/g; # タグを無効化 $value =~ s/\u0026gt;/\u0026amp;amp;gt;/g; # タグを無効化 $value =~ s/rn?/n/g; # 改行を統一 $value =~ s/n/\u0026lt;br\u0026gt;/g; # 改行を\u0026lt;br\u0026gt;に変換 $G_form{$name} = $value; } } sub printForm{ print \u0026#34;\u0026lt;form method=$_[0] action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?output\u0026#34;\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;input type=text name=tx1 value=\u0026#34;tx1\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;input type=text name=tx2 value=\u0026#34;tx2\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;textarea name=tx3 cols=40 rows=4\u0026gt;tx3 日本語 英語 どちらでもnタグなどは無効になります。\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;); print \u0026#34;\u0026lt;input type=submit value=\u0026#34;Submit!\u0026#34;\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/form\u0026gt;n\u0026#34;; } sub printHeader{ if($G_Charset){ print \u0026#34;Content-type: text/html; charset=$G_Charsetnn\u0026#34;; }else{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; } print \u0026#39;\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; if($G_Charset){ print \u0026#34;\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=$G_Charset\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Script-Type\u0026#34; content=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026#39;,\u0026#34;n\u0026#34;; print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Style-Type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;title\u0026gt;$G_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@G_styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;n\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$G_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;漢字コード変換 ： $JcodeVer\u0026lt;br\u0026gt;n\u0026#34;); open(IN, \u0026#39;../../sig.txt\u0026#39;); print while (\u0026lt;IN\u0026gt;); close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($G_linkFile){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;$G_linkFile\u0026#34;\u0026gt;$G_titleの解説\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ if($G_Code eq $G_myCode){ foreach (@_){ print; } }else{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, $G_myCode); } } } sub JconvPrint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:32:38+09:00","permalink":"https://www.nqou.net/2000/10/07/133238/","title":"フォームからの入力（その３）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 #!/usr/bin/perl # 初期設定 # require Jcode; # $JcodeVer = \u0026#34;Jcode $Jcode::VERSION\u0026#34;; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; $JcodeVer = \u0026#34;jcode.pl $jcode::version\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @G_styles = (\u0026#39;../../ipp.css\u0026#39;,\u0026#39;../test.css\u0026#39;); $G_title = \u0026#39;テスト１７\u0026#39;; $G_myCode = \u0026amp;amp;Jgetcode(\u0026#39;漢字\u0026#39;); $G_Code = \u0026#39;jis\u0026#39;; $G_Charset = \u0026#39;iso-2022-jp\u0026#39;; %G_form=(); $G_scrName = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($G_scrName =~ /ts[0-9]{4}/){ $G_scrName = $\u0026amp;amp;; $G_linkFile = \u0026#34;../$G_scrName.htm\u0026#34;; } { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($#ARGV == -1){ \u0026amp;amp;printMethodtype; }elsif($ARGV[0] eq \u0026#34;output\u0026#34;){ \u0026amp;amp;formRead; \u0026amp;amp;formWrite; }elsif($ARGV[0] eq \u0026#34;post\u0026#34;){ \u0026amp;amp;printForm(\u0026#34;post\u0026#34;); }elsif($ARGV[0] eq \u0026#34;get\u0026#34;){ \u0026amp;amp;printForm(\u0026#34;get\u0026#34;); }else{ \u0026amp;amp;error(\u0026#39;\u0026lt;h2\u0026gt;無効なコマンドが渡されました。\u0026lt;/h2\u0026gt;\u0026#39;); } print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printMethodtype{ \u0026amp;amp;Jprint(\u0026#34;\u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?post\u0026#34;\u0026gt;\u0026lt;input type=submit value=\u0026#34;POSTでの送信フォーム\u0026#34;\u0026gt;\u0026lt;/form\u0026gt;n\u0026#34;); \u0026amp;amp;Jprint(\u0026#34;\u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?get\u0026#34;\u0026gt;\u0026lt;input type=submit value=\u0026#34;GETでの送信フォーム\u0026#34;\u0026gt;\u0026lt;/form\u0026gt;n\u0026#34;); } sub error{ \u0026amp;amp;Jprint(@_); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub formWrite{ local($name, $value); print \u0026#34;\u0026lt;table border=1\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;エレメントの名前\u0026lt;th\u0026gt;エレメントの中身\u0026lt;/tr\u0026gt;n\u0026#34;); while (($name, $value) = each(%G_form)){ \u0026amp;amp;JconvPrint(\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;$name\u0026lt;td\u0026gt;$value\u0026lt;/tr\u0026gt;n\u0026#34;); } print \u0026#34;\u0026lt;/table\u0026gt;n\u0026#34;; } sub formRead{ local($query_string, @elements, $elm, $name, $value, $code, $method); $method = $ENV{\u0026#39;REQUEST_METHOD\u0026#39;}; if($method eq \u0026#34;POST\u0026#34;){ read(STDIN, $query_string, $ENV{\u0026#39;CONTENT_LENGTH\u0026#39;}); }elsif($method eq \u0026#34;GET\u0026#34;){ $query_string = $ENV{\u0026#39;QUERY_STRING\u0026#39;}; }else{ \u0026amp;amp;error(\u0026#39;methodは「post」か「get」にしてください。\u0026#39;); } @elements = split(/\u0026amp;amp;/, $query_string); # 中身はpostもgetも同じ foreach $elm (@elements){ ($name, $value) = split(/=/, $elm); $value =~ s/+/ /g; # =~ tr/+/ /; と書くのが普通なのか？ $value =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack(\u0026#34;C\u0026#34;, hex($1))/eg; $code = \u0026amp;amp;Jgetcode($value); if($code ne \u0026#39;euc\u0026#39;){ $value = \u0026amp;amp;Jconvert($value, \u0026#39;euc\u0026#39;, $code); } # とりあえずEUCに変換 $value =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; # メタ文字（？）を無効化 $value =~ s/\u0026lt;/\u0026amp;amp;lt;/g; # タグを無効化 $value =~ s/\u0026gt;/\u0026amp;amp;gt;/g; # タグを無効化 $value =~ s/rn?/n/g; # 改行を統一 $value =~ s/n/\u0026lt;br\u0026gt;/g; # 改行を\u0026lt;br\u0026gt;に変換 $G_form{$name} = $value; } } sub printForm{ print \u0026#34;\u0026lt;form method=$_[0] action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?output\u0026#34;\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;input type=text name=tx1 value=\u0026#34;tx1\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;input type=text name=tx2 value=\u0026#34;tx2\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;textarea name=tx3 cols=40 rows=4\u0026gt;tx3 日本語 英語 どちらでもnタグなどは無効になります。\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;); print \u0026#34;\u0026lt;input type=submit value=\u0026#34;Submit!\u0026#34;\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/form\u0026gt;n\u0026#34;; } sub printHeader{ if($G_Charset){ print \u0026#34;Content-type: text/html; charset=$G_Charsetnn\u0026#34;; }else{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; } print \u0026#39;\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; if($G_Charset){ print \u0026#34;\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=$G_Charset\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Script-Type\u0026#34; content=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026#39;,\u0026#34;n\u0026#34;; print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Style-Type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;title\u0026gt;$G_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@G_styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;n\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$G_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;漢字コード変換 ： $JcodeVer\u0026lt;br\u0026gt;n\u0026#34;); open(IN, \u0026#39;../../sig.txt\u0026#39;); print while (\u0026lt;IN\u0026gt;); close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($G_linkFile){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;$G_linkFile\u0026#34;\u0026gt;$G_titleの解説\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ if($G_Code eq $G_myCode){ foreach (@_){ print; } }else{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, $G_myCode); } } } sub JconvPrint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:32:00+09:00","permalink":"https://www.nqou.net/2000/10/07/133200/","title":"フォームからの入力（その２）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 #!/usr/bin/perl # 初期設定 # require Jcode; # $JcodeVer = \u0026#34;Jcode $Jcode::VERSION\u0026#34;; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; $JcodeVer = \u0026#34;jcode.pl $jcode::version\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @G_styles = (\u0026#39;../../ipp.css\u0026#39;,\u0026#39;../test.css\u0026#39;); $G_title = \u0026#39;テスト１６\u0026#39;; $G_myCode = \u0026amp;amp;Jgetcode(\u0026#39;漢字\u0026#39;); $G_Code = \u0026#39;jis\u0026#39;; $G_Charset = \u0026#39;iso-2022-jp\u0026#39;; %G_form=(); $G_scrName = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($G_scrName =~ /ts[0-9]{4}/){ $G_scrName = $\u0026amp;amp;; $G_linkFile = \u0026#34;../$G_scrName.htm\u0026#34;; } { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($#ARGV == -1){ \u0026amp;amp;printForm; }elsif($ARGV[0] eq \u0026#34;output\u0026#34;){ \u0026amp;amp;formRead; \u0026amp;amp;formWrite; } print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub formWrite{ local($name, $value); print \u0026#34;\u0026lt;table border=1\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;エレメントの名前\u0026lt;th\u0026gt;エレメントの中身\u0026lt;/tr\u0026gt;n\u0026#34;); while (($name, $value) = each(%G_form)){ \u0026amp;amp;JconvPrint(\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;$name\u0026lt;td\u0026gt;$value\u0026lt;/tr\u0026gt;n\u0026#34;); } print \u0026#34;\u0026lt;/table\u0026gt;n\u0026#34;; } sub formRead{ local($query_string, @elements, $elm, $name, $value, $code); read(STDIN, $query_string, $ENV{\u0026#39;CONTENT_LENGTH\u0026#39;}); @elements = split(/\u0026amp;amp;/, $query_string); foreach $elm (@elements){ ($name, $value) = split(/=/, $elm); $value =~ s/+/ /g; # =~ tr/+/ /; と書くのが普通なのか？ $value =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack(\u0026#34;C\u0026#34;, hex($1))/eg; $code = \u0026amp;amp;Jgetcode($value); if($code ne \u0026#39;euc\u0026#39;){ $value = \u0026amp;amp;Jconvert($value, \u0026#39;euc\u0026#39;, $code); } # とりあえずEUCに変換 $value =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; # メタ文字（？）を無効化 $value =~ s/\u0026lt;/\u0026amp;amp;lt;/g; # タグを無効化 $value =~ s/\u0026gt;/\u0026amp;amp;gt;/g; # タグを無効化 $value =~ s/rn?/n/g; # 改行を統一 $value =~ s/n/\u0026lt;br\u0026gt;/g; # 改行を\u0026lt;br\u0026gt;に変換 $G_form{$name} = $value; } } sub printForm{ print \u0026#34;\u0026lt;form method=post action=\u0026#34;$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}?output\u0026#34;\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;input type=text name=tx1 value=\u0026#34;tx1\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;input type=text name=tx2 value=\u0026#34;tx2\u0026#34;\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;\u0026lt;textarea name=tx3 cols=40 rows=4\u0026gt;tx3 日本語 英語 どちらでもnタグなどは無効になります。\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;n\u0026#34;); print \u0026#34;\u0026lt;input type=submit value=\u0026#34;Submit!\u0026#34;\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/form\u0026gt;n\u0026#34;; } sub printHeader{ if($G_Charset){ print \u0026#34;Content-type: text/html; charset=$G_Charsetnn\u0026#34;; }else{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; } print \u0026#39;\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.01 Transitional//EN\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; if($G_Charset){ print \u0026#34;\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=$G_Charset\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Script-Type\u0026#34; content=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026#39;,\u0026#34;n\u0026#34;; print \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Style-Type\u0026#34; content=\u0026#34;text/css\u0026#34;\u0026gt;\u0026#39;.\u0026#34;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;title\u0026gt;$G_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@G_styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;n\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$G_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;漢字コード変換 ： $JcodeVer\u0026lt;br\u0026gt;n\u0026#34;); open(IN, \u0026#39;../../sig.txt\u0026#39;); print while (\u0026lt;IN\u0026gt;); close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($G_linkFile){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;$G_linkFile\u0026#34;\u0026gt;$G_titleの解説\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ if($G_Code eq $G_myCode){ foreach (@_){ print; } }else{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, $G_myCode); } } } sub JconvPrint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:31:16+09:00","permalink":"https://www.nqou.net/2000/10/07/133116/","title":"フォームからの入力"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 #!/usr/bin/perl # 初期設定 # require Jcode; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @G_styles = (\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $G_title = \u0026#34;テスト１５\u0026#34;; $G_myCode = \u0026amp;amp;Jgetcode(\u0026#34;漢字\u0026#34;); $G_Code = \u0026#34;jis\u0026#34;; $G_Charset = \u0026#34;ISO-2022-JP\u0026#34;; $G_scrName = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($G_scrName =~ /ts[0-9]{4}/){ $G_scrName = $\u0026amp;amp;; $G_linkFile = \u0026#34;../$G_scrName.htm\u0026#34;; } # 固有設定 $G_inFile = \u0026#34;ts0014.cgi\u0026#34;; # $G_outCode = \u0026#34;utf8\u0026#34;; $G_outCode = \u0026#34;euc\u0026#34;; $G_outFile = $G_inFile; # $G_outFile =~ s/.cgi/_u.txt/; $G_outFile =~ s/.cgi/_e.txt/; { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;fileOUT ($G_outFile, \u0026amp;amp;fileIN($G_inFile)); \u0026amp;amp;Jprint (\u0026#34;\u0026lt;a href=\u0026#34;$G_outFile\u0026#34;\u0026gt;出力が完了しました。\u0026lt;/a\u0026gt;n\u0026#34;); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub fileOUT{ local($outFile)= shift(@_); local(@outFileLines) = @_; \u0026amp;amp;Jprint (\u0026#34;出力ファイル名 : \u0026#34;); print $outFile; print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; # \u0026amp;amp;printSource(@_); open (OUT, \u0026#34;\u0026gt; $outFile\u0026#34;); foreach (@outFileLines){ print OUT \u0026amp;amp;Jconvert($_, $G_outCode, \u0026amp;amp;Jgetcode($_)); } close (OUT); # \u0026amp;amp;Jprint (\u0026#34;以上の内容で出力しました。\u0026#34;); } sub fileIN{ local(@inFileLines); local($inFile) = $_[0]; \u0026amp;amp;Jprint (\u0026#34;入力ファイル名 : \u0026#34;); print $inFile; print \u0026#34;\u0026lt;br\u0026gt;n\u0026#34;; open (IN, $inFile); @inFileLines = \u0026lt;IN\u0026gt;; close (IN); return @inFileLines; } sub printSource{ local(@lines)= @_; local($line); print \u0026#34;\u0026lt;ol\u0026gt;n\u0026#34;; foreach $line (@lines){ $line =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; $line =~ s/\u0026#34;/\u0026amp;amp;quot;/g; $line =~ s/\u0026lt;/\u0026amp;amp;lt;/g; $line =~ s/\u0026gt;/\u0026amp;amp;gt;/g; $line =~ s/ /\u0026amp;amp;nbsp;/g; print \u0026amp;amp;JconvPrint(\u0026#34;\u0026lt;li\u0026gt;\u0026lt;code\u0026gt;$line\u0026lt;/code\u0026gt;\u0026#34;); } print \u0026#34;\u0026lt;/ol\u0026gt;n\u0026#34;; } sub printHeader{ if($G_Charset){ print \u0026#34;Content-type: text/html; charset=$G_Charsetnn\u0026#34;; }else{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; } print \u0026#34;\u0026lt;!doctype html public \u0026#34;-//W3C//DTD HTML 4.0 Transitional//EN\u0026#34;\u0026gt;\u0026#34;.\u0026#34;n\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;n\u0026lt;head\u0026gt;n\u0026#34;; if($G_Charset){ print \u0026#34;\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=$G_Charset\u0026#34;\u0026gt;n\u0026#34;; } \u0026amp;amp;Jprint (\u0026#34;\u0026lt;title\u0026gt;$G_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@G_styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;n\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$G_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN, \u0026#34;../../sig.txt\u0026#34;); while (\u0026lt;IN\u0026gt;) { print; } close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($G_linkFile){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;$G_linkFile\u0026#34;\u0026gt;$G_titleの解説\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, $G_myCode); } } sub JconvPrint{ foreach (@_){ print \u0026amp;amp;Jconvert($_, $G_Code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:30:10+09:00","permalink":"https://www.nqou.net/2000/10/07/133010/","title":"漢字コードの変換（その２）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 初期設定 require Jcode; *Jgetcode = \u0026amp;Jcode::getcode; *Jconvert = \u0026amp;Jcode::convert; require \u0026ldquo;../../../cgi-bin/jcode.pl\u0026rdquo;; *Jgetcode = \u0026amp;jcode::getcode; *Jconvert = sub { \u0026amp;jcode::to($[1], $[0], $_[2]); };\n@g_styles = (\u0026quot;../../ipp.css\u0026quot;,\u0026quot;../test.css\u0026quot;); $g_title = \u0026ldquo;テスト１４\u0026rdquo;; $my_code = \u0026amp;Jgetcode(\u0026ldquo;漢字\u0026rdquo;); $cut_code = \u0026ldquo;jis\u0026rdquo;; $htmlfile = \u0026ldquo;html?|[ps]ht(ml)?\u0026rdquo;;\n$scrname = $ENV{\u0026lsquo;SCRIPT_NAME\u0026rsquo;}; $scrname =~ s/_1|_u// ; if($scrname =~ /ts[0-9]{4}.cgi$/){ $linkfile = $\u0026amp; ; $linkfile =~ s/.cgi/.htm/ ; }\n固有設定 $searchdir = \u0026ldquo;..\u0026rdquo;; $searchfile = \u0026ldquo;.$htmlfile\u0026rdquo;; $indexfile = \u0026ldquo;index.($htmlfile)\u0026rdquo;;\n{ \u0026amp;printHeader;\nprint \u0026quot;\u0026lt;div class=test\u0026gt;n\u0026quot;; \u0026amp;amp;Jprint(\u0026quot;親ディレクトリ以下にあるファイルの一覧（HTMLファイルのみ）\u0026quot;,\u0026quot;n\u0026quot;); print \u0026quot;\u0026lt;ul\u0026gt;n\u0026quot;; \u0026amp;amp;Jconv (\u0026quot;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;$searchdir\u0026quot;\u0026gt;\u0026quot;, \u0026amp;amp;indexSearch($searchdir), \u0026quot;\u0026lt;/a\u0026gt;n\u0026quot;); \u0026amp;amp;dirlist($searchdir); print \u0026quot;\u0026lt;/ul\u0026gt;n\u0026quot;; print \u0026quot;\u0026lt;/div\u0026gt;n\u0026quot;; \u0026amp;amp;printFooter; exit; }\nsub indexSearch{ local($dir) = $_[0]; local($result, @filelist); opendir(DIR, $dir); @filelist = readdir(DIR); closedir(DIR); @filelist = sort @filelist; $result = \u0026ldquo;インデックス無し\u0026rdquo;;\nforeach(@filelist){ if(/$indexfile/){ $result = \u0026amp;amp;getHTMLTitle(\u0026quot;$dir/$\u0026amp;amp;\u0026quot;); last; } } return $result; }\nsub dirlist{ local($dir)=$_[0]; local(@filelist,@dirs, $file, $filename, $ftitle, $fileflg); @dirs = (); $fileflg = 1; opendir(DIR, $dir); @filelist = readdir(DIR); closedir(DIR); @filelist = sort @filelist;\nforeach $file(@filelist){ if($file eq \u0026quot;.\u0026quot;){ next; } if($file eq \u0026quot;..\u0026quot;){ next; } $filename = \u0026quot;$dir/$file\u0026quot;; if(-d $filename){ push(@dirs, $filename); }elsif($filename =~ /$searchfile/){ if($filename !~ /$indexfile/){ if($fileflg){ print \u0026quot;\u0026lt;ul\u0026gt;n\u0026quot;; $fileflg = 0; } $ftitle = \u0026amp;amp;getHTMLTitle($filename); \u0026amp;amp;Jconv (\u0026quot;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;$filename\u0026quot;\u0026gt;$file（\u0026quot;, $ftitle, \u0026quot;）\u0026lt;/a\u0026gt;n\u0026quot;); } } } foreach $filename (@dirs){ if($filename =~ /[w-]+$/){ $file = $\u0026amp;amp;; } $ftitle = \u0026amp;amp;indexSearch($filename); \u0026amp;amp;Jconv (\u0026quot;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;$filename/\u0026quot;\u0026gt;$file（\u0026quot;, $ftitle, \u0026quot;）\u0026lt;/a\u0026gt;n\u0026quot;); \u0026amp;amp;dirlist($filename); } if(!$fileflg){print \u0026quot;\u0026lt;/ul\u0026gt;n\u0026quot;;} }\nsub getHTMLTitle{ local($file)=$_[0]; local($ttl, $result); $result = \u0026ldquo;タイトル無し\u0026rdquo;; if($file =~ /$htmlfile/){ open(IN, $file); while(){ if(//){ if($\u0026rsquo; =~ //){ $ttl = $`; if($ttl =~ /S/){$result = $ttl;} last; } } } close(IN); } return $result; }\nsub printHeader{ print \u0026ldquo;Content-type: text/htmlnn\u0026rdquo;; \u0026amp;Jprint (\u0026quot;$g_titlen\u0026quot;); foreach (@g_styles){ print \u0026ldquo;n\u0026rdquo;; } print \u0026ldquo;n\u0026rdquo;; print \u0026ldquo;n\u0026rdquo;; \u0026amp;Jprint (\u0026quot;$g_titlen\u0026quot;); \u0026amp;printlinks; print \u0026ldquo;n\u0026rdquo;; }\nsub printFooter{ print \u0026ldquo;n\u0026rdquo;; \u0026amp;printlinks; print \u0026ldquo;n\u0026rdquo;; open(IN, \u0026ldquo;../../sig.txt\u0026rdquo;); while (){ print; } close(IN); print \u0026ldquo;n\u0026rdquo;; print \u0026ldquo;n\u0026rdquo;; }\nsub printlinks{ print \u0026ldquo;Homen\u0026rdquo;; print \u0026ldquo;/nPerln\u0026rdquo;; print \u0026ldquo;/nTestCGI Indexn\u0026rdquo;; if($linkfile){ \u0026amp;Jprint (\u0026quot;/n$g_titleの解説n\u0026quot;); } }\nsub Jprint{ foreach (@) { print \u0026amp;Jconvert($, $cut_code, $my_code); } }\nsub Jconv{ foreach (@) { print \u0026amp;Jconvert($, $cut_code, \u0026amp;Jgetcode($_)); } }\n1 2 \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:29:20+09:00","permalink":"https://www.nqou.net/2000/10/07/132920/","title":"サブディレクトリ内も一覧（その２）"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 #!/usr/bin/perl # 初期設定 # require Jcode; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @g_styles = (\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $g_title = \u0026#34;テスト１３\u0026#34;; $my_code = \u0026amp;amp;Jgetcode(\u0026#34;漢字\u0026#34;); $cut_code = \u0026#34;jis\u0026#34;; $htmlfile = \u0026#34;html?|[ps]ht(ml)?\u0026#34;; $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; $scrname =~ s/_1|_u// ; if($scrname =~ /ts[0-9]{4}.cgi$/){ $linkfile = $\u0026amp;amp; ; $linkfile =~ s/.cgi/.htm/ ; } # 固有設定 $searchdir = \u0026#34;..\u0026#34;; $searchfile = $htmlfile; { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint(\u0026#34;親ディレクトリ以下にあるファイルの一覧（HTMLファイルのみ）\u0026#34;,\u0026#34;n\u0026#34;); \u0026amp;amp;dirlist($searchdir); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub dirlist{ local($dir)=$_[0]; local(@filelist, $file, $filename, $ftitle); opendir(DIR, $dir); @filelist = readdir(DIR); closedir(DIR); @filelist = sort @filelist; print \u0026#34;\u0026lt;ul\u0026gt;n\u0026#34;; foreach $file(@filelist){ if($file eq \u0026#34;.\u0026#34;){ next; } if($file eq \u0026#34;..\u0026#34;){ next; } $filename = \u0026#34;$dir/$file\u0026#34;; if(-d $filename){ print \u0026#34;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;$filename/\u0026#34;\u0026gt;$file\u0026lt;/a\u0026gt;n\u0026#34;; \u0026amp;amp;dirlist($filename); }elsif($filename =~ /.$searchfile/){ $ftitle = \u0026amp;amp;getHTMLTitle($filename); \u0026amp;amp;Jconv (\u0026#34;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;$filename\u0026#34;\u0026gt;$file（\u0026#34;, $ftitle, \u0026#34;）\u0026lt;/a\u0026gt;n\u0026#34;); } } print \u0026#34;\u0026lt;/ul\u0026gt;n\u0026#34;; } sub getHTMLTitle{ local($file)=$_[0]; local($result); $result = \u0026#34;タイトル無し\u0026#34;; if($file =~ /$htmlfile/){ open(IN, $file); while(\u0026lt;IN\u0026gt;){ if(/\u0026lt;title\u0026gt;/){ if($\u0026#39; =~ /\u0026lt;/title\u0026gt;/){ $result = $`; last; } } } close(IN); } return $result; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$g_title\u0026lt;/title\u0026gt;n\u0026#34;); foreach (@g_styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$g_title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN, \u0026#34;../../sig.txt\u0026#34;); while (\u0026lt;IN\u0026gt;){ print; } close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($linkfile){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;../$linkfile\u0026#34;\u0026gt;$g_titleの解説\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ foreach (@_) { print \u0026amp;amp;Jconvert($_, $cut_code, $my_code); } } sub Jconv{ foreach (@_) { print \u0026amp;amp;Jconvert($_, $cut_code, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:28:17+09:00","permalink":"https://www.nqou.net/2000/10/07/132817/","title":"サブディレクトリ内も一覧"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!/usr/bin/perl # require Jcode; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; $file = \u0026#34;ts0011\u0026#34;; $outfile = \u0026#34;$file.htm\u0026#34;; $infile = \u0026#34;$file.cgi\u0026#34;; $title = \u0026#34;$infileのソース\u0026#34;; $fcode = \u0026#34;sjis\u0026#34;; $mycode = \u0026amp;amp;Jgetcode(\u0026#34;漢字\u0026#34;); $cutcode = \u0026#34;jis\u0026#34;; $title .= \u0026#34;（$mycodeから出力）\u0026#34;; { open(OUT, \u0026#34;\u0026gt; $outfile\u0026#34;); \u0026amp;amp;printHeader; print (OUT \u0026#34;\u0026lt;ol\u0026gt;\u0026#34;); open(IN, $infile); while($line = \u0026lt;IN\u0026gt;){ $line =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; $line =~ s/\u0026#34;/\u0026amp;amp;quot;/g; $line =~ s/\u0026lt;/\u0026amp;amp;lt;/g; $line =~ s/\u0026gt;/\u0026amp;amp;gt;/g; $line =~ s/ /\u0026amp;amp;nbsp;/g; \u0026amp;amp;Jfprint (\u0026#34;\u0026lt;li\u0026gt;\u0026lt;code\u0026gt;$line\u0026lt;/code\u0026gt;\u0026#34;); } close(IN); print (OUT \u0026#34;\u0026lt;/ol\u0026gt;\u0026#34;); \u0026amp;amp;printFooter; close(OUT); print \u0026#34;Location: $outfilenn\u0026#34;; exit; } sub printHeader{ \u0026amp;amp;Jprint (\u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt;n\u0026#34;); print (OUT \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;); \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;$title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); } sub printFooter{ print (OUT \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;); print (OUT \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;); } sub Jprint{ foreach (@_) { print (OUT \u0026amp;amp;Jconvert($_, $cutcode, $mycode)); } } sub Jfprint{ foreach (@_) { print (OUT \u0026amp;amp;Jconvert($_, $cutcode, $fcode)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:27:43+09:00","permalink":"https://www.nqou.net/2000/10/07/132743/","title":"ファイルを作って飛ばす"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 #!/usr/bin/perl # require Jcode; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @styles = (\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $title = \u0026#34;テスト１１\u0026#34;; $mycode = \u0026amp;amp;Jgetcode($title); # $cutcode = \u0026#34;utf8\u0026#34;; $cutcode = \u0026#34;euc\u0026#34;; $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; $scrname =~ s/_1|_u// ; if($scrname =~ /(ts[0-9]{4}.cgi$)/){ $filename = $+ ; $filename =~ s/cgi/htm/ ; } $file = \u0026#34;ts0010.cgi\u0026#34;; $fcode = \u0026#34;sjis\u0026#34;; { \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;$cutcode で $file の出力をする。\u0026lt;br\u0026gt;n\u0026#34;); print \u0026#34;\u0026lt;ol\u0026gt;\u0026#34;; open(IN, $file); while($line = \u0026lt;IN\u0026gt;){ $line =~ s/\u0026amp;amp;/\u0026amp;amp;amp;/g; $line =~ s/\u0026#34;/\u0026amp;amp;quot;/g; $line =~ s/\u0026lt;/\u0026amp;amp;lt;/g; $line =~ s/\u0026gt;/\u0026amp;amp;gt;/g; $line =~ s/ /\u0026amp;amp;nbsp;/g; \u0026amp;amp;Jfprint (\u0026#34;\u0026lt;li\u0026gt;$line\u0026#34;); } close(IN); print \u0026#34;\u0026lt;/ol\u0026gt;\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;\u0026#34;, $title, \u0026#34;\u0026lt;/title\u0026gt;\u0026#34;, \u0026#34;n\u0026#34;); foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;\u0026#34;, $title, \u0026#34;\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN, \u0026#34;../../sig.txt\u0026#34;); while ($sig = \u0026lt;IN\u0026gt;){ print $sig; } close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($filename){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;../$filename\u0026#34;\u0026gt;\u0026#34;, $title, \u0026#34;の解説\u0026#34;, \u0026#34;\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ foreach (@_) { print \u0026amp;amp;Jconvert($_, $cutcode, $mycode); } } sub Jfprint{ foreach (@_) { print \u0026amp;amp;Jconvert($_, $cutcode, $fcode); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:27:00+09:00","permalink":"https://www.nqou.net/2000/10/07/132700/","title":"ソースの表示"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #!/usr/bin/perl # require Jcode; # *Jgetcode = \u0026amp;amp;Jcode::getcode; # *Jconvert = \u0026amp;amp;Jcode::convert; require \u0026#34;../../../cgi-bin/jcode.pl\u0026#34;; *Jgetcode = \u0026amp;amp;jcode::getcode; *Jconvert = sub { \u0026amp;amp;jcode::to($_[1], $_[0], $_[2]); }; @styles = (\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $title = \u0026#34;テスト１０\u0026#34;; $mycode = \u0026amp;amp;Jgetcode($title); $cutcode = \u0026#34;jis\u0026#34;; $scrname = \u0026#34;\u0026#34;; $filename = \u0026#34;\u0026#34;; $rtdir = \u0026#34;../\u0026#34;; $file = \u0026#34;\u0026#34;; { $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; $scrname =~ s/_1|_u// ; if($scrname =~ /(ts[0-9]{4}.cgi$)/){ $filename = $+ ; $filename =~ s/cgi/htm/ ; } \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;$mycode → $cutcode 変換\u0026lt;br\u0026gt;n\u0026#34;); \u0026amp;amp;Jprint (\u0026#34;「親ディレクトリ」には、以下のHTMファイルがあります。\u0026#34;); print \u0026#34;\u0026lt;ul\u0026gt;n\u0026#34;; chdir($rtdir); opendir(DIR, \u0026#34;.\u0026#34;); while ($file = readdir(DIR)) { if($file =~ /htm$/){ open(IN, $file); while(\u0026lt;IN\u0026gt;){ if(/\u0026lt;title\u0026gt;/){ if($\u0026#39; =~ /\u0026lt;/title\u0026gt;/){ print \u0026#34;\u0026lt;li\u0026gt;$file\u0026#34; ; \u0026amp;amp;Jconv (\u0026#34;（\u0026#34;, $`, \u0026#34;）\u0026#34;, \u0026#34;n\u0026#34;); last; } } } close(IN); } } closedir(DIR); print \u0026#34;\u0026lt;/ul\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;\u0026#34;, $title, \u0026#34;\u0026lt;/title\u0026gt;\u0026#34;, \u0026#34;n\u0026#34;); foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; \u0026amp;amp;Jprint (\u0026#34;\u0026lt;h1\u0026gt;\u0026#34;, $title, \u0026#34;\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;); \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN, \u0026#34;../../sig.txt\u0026#34;); while ($sig = \u0026lt;IN\u0026gt;){ print $sig; } close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($filename){ \u0026amp;amp;Jprint (\u0026#34;/n\u0026lt;a href=\u0026#34;../$filename\u0026#34;\u0026gt;\u0026#34;, $title, \u0026#34;の解説\u0026#34;, \u0026#34;\u0026lt;/a\u0026gt;n\u0026#34;); } } sub Jprint{ foreach (@_) { print \u0026amp;amp;Jconvert($_, $cutcode, $mycode); } } sub Jconv{ foreach (@_) { print \u0026amp;amp;Jconvert($_, $cutcode, \u0026amp;amp;Jgetcode($_)); } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:25:52+09:00","permalink":"https://www.nqou.net/2000/10/07/132552/","title":"漢字コードの変換"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $title=\u0026#34;テスト９\u0026#34;; $scrname=\u0026#34;\u0026#34;; $filename=\u0026#34;\u0026#34;; $rtdir=\u0026#34;../\u0026#34;; $file=\u0026#34;\u0026#34;; { $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; $scrname =~ s/_1// ; if($scrname =~ /(ts[0-9]{4}.cgi$)/){ $filename = $+ ; $filename =~ s/cgi/htm/ ; } \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; print \u0026#34;「親ディレクトリ」には、以下のHTMファイルがあります。\u0026#34;; print \u0026#34;\u0026lt;ul\u0026gt;n\u0026#34;; chdir($rtdir); opendir(DIR, \u0026#34;.\u0026#34;); while ($file = readdir(DIR)) { if($file =~ /htm$/){ open(IN, $file); while(\u0026lt;IN\u0026gt;){ if(/\u0026lt;title\u0026gt;/){ if($\u0026#39; =~ /\u0026lt;/title\u0026gt;/){ print \u0026#34;\u0026lt;li\u0026gt;$file（$`）n\u0026#34;; last; } } } close(IN); } } closedir(DIR); print \u0026#34;\u0026lt;/ul\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($filename){ print \u0026#34;/n\u0026lt;a href=\u0026#34;../$filename\u0026#34;\u0026gt;$titleの解説\u0026lt;/a\u0026gt;n\u0026#34;; } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:25:19+09:00","permalink":"https://www.nqou.net/2000/10/07/132519/","title":"タイトルを探す"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $title=\u0026#34;テスト８\u0026#34;; $scrname=\u0026#34;\u0026#34;; $filename=\u0026#34;\u0026#34;; $rtdir=\u0026#34;./\u0026#34;; $file=\u0026#34;\u0026#34;; { $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($scrname =~ /(ts[0-9][0-9][0-9][0-9][_1]*.cgi$)/){ $filename = $+ ; $filename =~ s/_1// ; $filename =~ s/.cgi/.htm/ ; } \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; print \u0026#34;このディレクトリには、以下のHTMファイルがあります。\u0026#34;; opendir(DIR, $rtdir); print \u0026#34;\u0026lt;ul\u0026gt;\u0026#34;; while ($file = readdir(DIR)) { if($file =~ /.htm$/){ print \u0026#34;\u0026lt;li\u0026gt;$filen\u0026#34;; } } print \u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;; closedir(DIR); print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($filename){ print \u0026#34;/n\u0026lt;a href=\u0026#34;../$filename\u0026#34;\u0026gt;$titleの解説\u0026lt;/a\u0026gt;n\u0026#34;; } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:23:59+09:00","permalink":"https://www.nqou.net/2000/10/07/132359/","title":"ディレクトリを見る"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $title=\u0026#34;テスト７\u0026#34;; $scrname=\u0026#34;\u0026#34;; $filename=\u0026#34;\u0026#34;; { $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; if($scrname =~ /(ts[0-9][0-9][0-9][0-9][_1]*.cgi$)/){ $filename = $+ ; $filename =~ s/_1// ; $filename =~ s/.cgi/.htm/ ; } \u0026amp;amp;printHeader; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($filename){ print \u0026#34;この実行ファイルのパス名（？）は「$scrname」です。\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;つまり、このスクリプトの解説は「\u0026#34; . $filename . \u0026#34;」にあります。\u0026lt;br\u0026gt;n\u0026#34;; }else{ print \u0026#34;・・・どうやら失敗のようです・・・。\u0026#34;; } print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$title\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$title\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; \u0026amp;amp;printlinks; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } sub printlinks{ print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;/n\u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; if($filename){ print \u0026#34;/n\u0026lt;a href=\u0026#34;../$filename\u0026#34;\u0026gt;$titleの解説\u0026lt;/a\u0026gt;n\u0026#34;; } } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:23:30+09:00","permalink":"https://www.nqou.net/2000/10/07/132330/","title":"文字列の置換"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); $scrname=\u0026#34;\u0026#34;; $filename=\u0026#34;\u0026#34;; { \u0026amp;amp;printHeader(\u0026#34;テスト６\u0026#34;); $scrname = $ENV{\u0026#39;SCRIPT_NAME\u0026#39;}; print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($scrname){ print \u0026#34;この実行ファイルのパス名（？）は「$scrname」です。\u0026lt;br\u0026gt;n\u0026#34;; print \u0026#34;そのうち、ファイルの名前は\u0026#34;; if($scrname =~ /(ts[0-9]+[_1]*.cgi$)/){ $filename = \u0026#34;「\u0026#34; . $+ . \u0026#34;」です。\u0026#34;; }else{ $filename = \u0026#34;わかりませんでした。\u0026#34;; } print $filename; }else{ print \u0026#34;・・・どうやら失敗のようです・・・。\u0026#34;; } print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$_[0]\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:22:45+09:00","permalink":"https://www.nqou.net/2000/10/07/132245/","title":"正規表現"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); { \u0026amp;amp;printHeader(\u0026#34;テスト５\u0026#34;); print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($ENV{\u0026#39;SCRIPT_NAME\u0026#39;}){ print \u0026#34;この実行ファイルのパス名（？）は「$ENV{\u0026#39;SCRIPT_NAME\u0026#39;}」です。n\u0026#34;; }else{ print \u0026#34;・・・どうやら失敗のようです・・・。\u0026#34;; } print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$_[0]\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:21:59+09:00","permalink":"https://www.nqou.net/2000/10/07/132159/","title":"自分の名前を調べる"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); { \u0026amp;amp;printHeader(\u0026#34;テスト４\u0026#34;); print \u0026#34;\u0026lt;div class=test\u0026gt;n\u0026#34;; if($ENV{\u0026#39;HTTP_REFERER\u0026#39;}){ print \u0026#34;\u0026lt;a href=\u0026#34;$ENV{\u0026#39;HTTP_REFERER\u0026#39;}\u0026#34;\u0026gt;戻る\u0026lt;/a\u0026gt;n\u0026#34;; }else{ print \u0026#34;・・・どうやら失敗のようです・・・。\u0026#34;; } print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$_[0]\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:21:04+09:00","permalink":"https://www.nqou.net/2000/10/07/132104/","title":"「戻る」リンクを作る"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); @wdays = (\u0026#34;日\u0026#34;, \u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;); { \u0026amp;amp;printHeader(\u0026#34;テスト３\u0026#34;); print \u0026#34;「temp.txt」に書き出します。n\u0026#34;; open(OUT,\u0026#34;\u0026gt; temp.txt\u0026#34;); print(OUT \u0026#34;この文は temp.txt の中身になるはずです。n\u0026#34;); print(OUT \u0026#34;書き込んだ時間は、\u0026#34;); ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time); $date = sprintf(\u0026#34;%04d/%02d/%02d(%s) %02d:%02d:%02d\u0026#34;, $year + 1900, $mon + 1, $mday, @wdays[$wday], $hour, $min, $sec); print(OUT $date); print(OUT \u0026#34;です。n\u0026#34;); close(OUT); print \u0026#34;\u0026lt;div class=test\u0026gt;\u0026lt;a href=\u0026#34;temp.txt\u0026#34;\u0026gt;temp.txtを見る\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$_[0]\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } \u0026lt;/div\u0026gt; ","date":"2000-10-07T13:18:13+09:00","permalink":"https://www.nqou.net/2000/10/07/131813/","title":"ファイルに書き出す"},{"content":"そりゃ、includeと同じ事くらいはCGIでもやってみないとね・・・。\n「open(IN,\u0026ldquo;ファイル名\u0026rdquo;)」だけど、ファイル名にはサーバーのルートからの指定は無視されるのかな？「/sig.txt」とやると何も表示されなかった・・・。\nと思っていたけど、思いっきり勘違いをしていた。CGIを実行するときは、サーバー自身のディレクトリの参照が必要なのだった。だから、ホストのルートではなく、ルートディレクトリを参照していたみたい。ディレクトリの指定も気をつけないと、変なところにファイルを作りかねない・・・。\n実は、「テスト１」（便宜上こう呼ぶ）の方だけど、titleタグの方の変数が訂正してなかった。よく考えてみると、タイトルバーにはURLが表示されていたような気がする。サブルーチンでの引数の扱い方も気をつけよう。\nちなみに、エディタは「Perl Editor」を使っている。プログラミング用のエディタみたいで、サブルーチンや変数の一覧が表示されて、使用されている場所へジャンプする事もできる。エディタとしては少し能力不足だけど、他の人が作ったプログラムを見るのにはとても便利だ。ホイールも認識するのが気に入ってる。意外といいエディタだと思っても、ホイールに対応してないのが多いから、この手のソフトはバージョンアップに期待したい。作者のページは「川千原千」です。\n・・・時は過ぎ・・・\n「Perl Editor」も結構便利になってきた。漢字コードや改行の種類を気にしないで編集できるのが特にいい感じ。\nソースコード\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;,\u0026#34;../test.css\u0026#34;); { \u0026amp;amp;printHeader(\u0026#34;テスト２\u0026#34;); print \u0026#34;「sig.txt」を読み込みます。n\u0026#34;; print \u0026#34;\u0026lt;div class=test\u0026gt;\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); @sig1=\u0026lt;IN\u0026gt;; foreach $line(@sig1){ print $line; } close(IN); print \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt;n\u0026#34;; foreach $st (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$st\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$_[0]\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; open(IN,\u0026#34;../../sig.txt\u0026#34;); while ($sig=\u0026lt;IN\u0026gt;){print $sig;} close(IN); print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } ","date":"2000-10-07T13:16:48+09:00","permalink":"https://www.nqou.net/2000/10/07/131648/","title":"ファイルから読み込む"},{"content":" \u0026lt;p\u0026gt;ソースコード\u0026lt;/p\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #!/usr/bin/perl @styles=(\u0026#34;../../ipp.css\u0026#34;); { \u0026amp;amp;printHeader(\u0026#34;テスト１\u0026#34;); print \u0026#34;うまく動くかな？n\u0026#34;; \u0026amp;amp;printFooter; exit; } sub printHeader{ print \u0026#34;Content-type: text/htmlnn\u0026#34;; print \u0026#34;\u0026lt;html lang=ja\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;$_[0]\u0026lt;/title\u0026gt;n\u0026#34;; foreach (@styles){ print \u0026#34;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;$_\u0026#34;\u0026gt;n\u0026#34;; } print \u0026#34;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;div class=head\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;h1\u0026gt;$_[0]\u0026lt;/h1\u0026gt;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;\u0026lt;/div\u0026gt;n\u0026#34;; } sub printFooter{ print \u0026#34;\u0026lt;div class=foot\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;a href=\u0026#34;../../../index.htm\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../../\u0026#34;\u0026gt;Perl\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;../\u0026#34;\u0026gt;TestCGI Index\u0026lt;/a\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;hr\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;address\u0026gt;\u0026lt;a href=\u0026#34;mailto:nobu3@x.age.ne.jp\u0026#34;\u0026gt;Written by Nobu3\u0026lt;/a\u0026gt;\u0026lt;/address\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/div\u0026gt;n\u0026#34;; print \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;n\u0026#34;; } \u0026lt;/div\u0026gt; ","date":"2000-10-07T12:50:35+09:00","permalink":"https://www.nqou.net/2000/10/07/125035/","title":"サブルーチンを使う"}]